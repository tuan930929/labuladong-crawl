{
    "url": "https://labuladong.online/algo-visualize/tutorial/basic-levelorder1/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } function levelOrderTraverse(root) {\n    if (!root) {\n        return;\n    }\n    let q = [root];\n    while (q.length > 0) {\n        let cur = q.shift();\n        // 访问 cur 节点\n        // @visualize color *cur #6ccff9\n        console.log(cur.val);\n\n        // 把 cur 的左右子节点加入队列\n        if (cur.left) {\n            q.push(cur.left);\n        }\n        if (cur.right) {\n            q.push(cur.right);\n        }\n    }\n}\n\nlet _allRoot = BTree.createRoot([3,9,2,1,null,5,7])\nlevelOrderTraverse(_allRoot);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}