{
    "url": "https://labuladong.online/algo-game/zh/hanoi/",
    "title": "汉诺塔 | labuladong.online",
    "content": "<div class=\"content-container horizontal-layout\"><div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div></div> <div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div> <div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div> <div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div> <div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div> <template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template> <div>loading...</div> <div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div> <div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div> <div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div></div> <div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div></div> <div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div> <h4>题目</h4> <div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div> <a href=\"https://labuladong.online/algo/game/hanoi/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a> <div class=\"question-content\"><p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul>\n<h3>算法分析</h3>\n<p>经典的三柱汉诺塔的递归解法是：</p>\n<ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol>\n<p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p>\n<p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下接口：</p>\n<ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>示例</h3>\n<p>假设有3根柱子，3个圆盘：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre>\n<p>祝你好运！</p></div> <p>汉诺塔是一个经典的数学游戏和递归算法的完美例子。你需要实现一个算法来自动解决汉诺塔问题。</p> <h3>游戏规则</h3> <ul>\n<li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li>\n<li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li>\n<li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li>\n<li>不能将大圆盘放在小圆盘上面</li>\n<li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li>\n</ul> <li>有多根柱子（至少3根），所有圆盘最初都堆叠在第一根柱子上</li> <li>圆盘按照从大到小的顺序堆叠，大的在下面，小的在上面</li> <li>每次只能移动一个圆盘，且只能移动柱子顶部的圆盘</li> <li>不能将大圆盘放在小圆盘上面</li> <li>目标是将所有圆盘移动到最后一根柱子上，保持相同的大小顺序</li> <h3>算法分析</h3> <p>经典的三柱汉诺塔的递归解法是：</p> <ol>\n<li>将前 n-1 个圆盘从起始柱移动到辅助柱</li>\n<li>将最大的圆盘从起始柱移动到目标柱</li>\n<li>将 n-1 个圆盘从辅助柱移动到目标柱</li>\n</ol> <li>将前 n-1 个圆盘从起始柱移动到辅助柱</li> <li>将最大的圆盘从起始柱移动到目标柱</li> <li>将 n-1 个圆盘从辅助柱移动到目标柱</li> <p>这个解法能够解决三柱汉诺塔问题，同时也是移动步数最少的最优解。</p> <p>游戏可以自定义柱子和圆盘的数量，如果设置柱子的数量 &gt; 3，可以仅使用其中的三根柱子，转化为三柱汉诺塔问题求解。但是这样没有充分利用所有柱子，不是最优解。你可以探索一下，对于柱子数量 &gt; 3 的情况如何得到步数最少的最优解。</p> <h3>你的任务</h3> <p>实现一个 <code>solveHanoi</code> 函数，通过操作 <code>gameController</code> 来自动解决汉诺塔问题。</p> <code>solveHanoi</code> <code>gameController</code> <h3>输入</h3> <p><code>gameController</code> 提供以下接口：</p> <code>gameController</code> <ul>\n<li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li>\n<li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li>\n</ul> <li>\n<p><code>getState()</code>: 获取当前游戏状态</p>\n<ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul>\n</li> <p><code>getState()</code>: 获取当前游戏状态</p> <code>getState()</code> <ul>\n<li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li>\n<li>数组中的数字代表圆盘大小，1是最小的圆盘</li>\n<li>数组的最后一个元素是柱子顶部的圆盘</li>\n</ul> <li>返回一个二维数组，每个子数组代表一根柱子上的圆盘</li> <li>数组中的数字代表圆盘大小，1是最小的圆盘</li> <li>数组的最后一个元素是柱子顶部的圆盘</li> <li>\n<p><code>move(from, to)</code>: 移动圆盘</p>\n<ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul>\n</li> <p><code>move(from, to)</code>: 移动圆盘</p> <code>move(from, to)</code> <ul>\n<li><code>from</code>: 源柱子的索引 (0-based)</li>\n<li><code>to</code>: 目标柱子的索引 (0-based)</li>\n<li>将源柱子顶部的圆盘移动到目标柱子顶部</li>\n<li>如果移动无效（如将大盘放到小盘上），会抛出错误</li>\n</ul> <li><code>from</code>: 源柱子的索引 (0-based)</li> <code>from</code> <li><code>to</code>: 目标柱子的索引 (0-based)</li> <code>to</code> <li>将源柱子顶部的圆盘移动到目标柱子顶部</li> <li>如果移动无效（如将大盘放到小盘上），会抛出错误</li> <h3>示例</h3> <p>假设有3根柱子，3个圆盘：</p> <pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code></pre> <code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span>\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span>\n\n<span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span>\n\n<span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span>\ngameController.<span class=\"hljs-title function_\">move</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\ngameController.<span class=\"hljs-title function_\">getState</span>() <span class=\"hljs-comment\">// [[3], [2], [1]]</span>\n</code> <span class=\"hljs-comment\">// 初始状态：所有圆盘在第0根柱子上</span> <span class=\"hljs-title function_\">getState</span> <span class=\"hljs-comment\">// [[3, 2, 1], [], []]</span> <span class=\"hljs-comment\">// 移动最小圆盘到第2根柱子</span> <span class=\"hljs-title function_\">move</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-title function_\">getState</span> <span class=\"hljs-comment\">// [[3, 2], [], [1]]</span> <span class=\"hljs-comment\">// 移动中等圆盘到第1根柱子</span> <span class=\"hljs-title function_\">move</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-title function_\">getState</span> <span class=\"hljs-comment\">// [[3], [2], [1]]</span> <p>祝你好运！</p> <div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div> <div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div> <div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div> <h3 class=\"editor-title\">编辑器</h3> <div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div> <button>提交</button> <button>恢复</button> <button>Console+</button> <div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div> <div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div> <div class=\"cm-theme code-mirror-wrapper\"></div> <div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div> <div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div> <div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div> <h3>控制台输出</h3> <div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div> <button>清空日志</button> <button class=\"close-button\" title=\"关闭\">×</button> <div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div> <p class=\"no-logs\">暂无日志输出</p>"
}