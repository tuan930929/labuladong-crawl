{
    "url": "https://labuladong.online/algo/essential-technique/understand-recursion/",
    "title": "一个视角 + 两种思维模式搞定递归 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->一个视角 + 两种思维模式搞定递归</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 5285 字</span><meta property=\"wordCount\" content=\"5285\"></span></div><hr></div> <h1><!---->一个视角 + 两种思维模式搞定递归</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 5285 字</span><meta property=\"wordCount\" content=\"5285\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 5285 字</span><meta property=\"wordCount\" content=\"5285\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 5285 字</span> <meta property=\"wordCount\" content=\"5285\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 104. 二叉树的最大深度 https://leetcode.cn/problems/maximum-depth-of-binary-tree </h3></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>一个视角是指「树」的视角，两种思维模式是指「遍历」和「分解问题」两种思维模式。</p></div><details class=\"hint-container details\" open data-v-40b908e2><summary class=\"video-summary-title\" data-v-40b908e2><div class=\"video-summary-title\" data-v-40b908e2><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg>   <strong data-v-40b908e2>视频讲解</strong>  </div></summary><!--[--><!--]--><div class=\"video-container\" data-v-40b908e2><div class=\"loader\" data-v-40b908e2><div class=\"spinner\" data-v-40b908e2></div></div><div style=\"\" class=\"video-mask\" data-v-40b908e2><img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2><button class=\"play-button\" data-v-40b908e2></button></div><video style=\"display:none;\" id=\"player-container-id\" preload=\"metadata\" playsinline data-v-40b908e2></video></div><!----></details><p>本文给你讲清楚：</p><p>1、算法的本质是穷举，递归是一种重要的穷举手段，递归的正确理解方法是从「树」的角度理解。</p><p>2、编写递归算法，有两种思维模式：一种是通过「遍历」一遍树得到答案，另一种是通过「分解问题」得到答案。</p><p>本文的主要目的是借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 给你讲清楚正确的思维方法，而不会深入探讨代码细节。本站后面有专门的章节讲解各种递归算法以及习题，都遵循文本讲解的思维模式，有了本文的铺垫，学习起来将事半功倍。</p><h2 id=\"从树的角度理解递归\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BB%8E%E6%A0%91%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92\"><span>从树的角度理解递归</span></a></h2><p>对于初学者，递归算法确实不容易理解，我刚学算法时也不例外。</p><p>我曾设想过一些有趣的视角来理解递归，比如把两面镜子相对放置，镜子中的影像就会无限嵌套下去，这似乎也算是递归的一种体现？</p><p>再比如，从程序运行原理上来看，递归函数的调用本质上就是入栈和出栈的过程，所以应该可以从栈的角度理解递归？</p><p>随着我对算法的理解不断深入，现在我可以负责任地告诉你，理解和编写递归算法最有效的方法是从「树」的视角去理解，其他的都属于花拳绣腿，中看不中用。</p><p>下面我将用斐波那契树和全排列这两个简单的经典算法问题来论证这一点。</p><p>再次强调，本文的重点是思维方法而不是代码，所以不必太纠结代码细节。请结合可视化面板，重点理解「递归树」的抽象，以及「遍历」和「分解问题」这两种思维模式的区别。</p><h3 id=\"斐波那契数列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span>斐波那契数列</span></a></h3><p>首先来看一个既简单又经典的问题：斐波那契数列。</p><p>斐波那契数列的数学定义如下：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p>比方说：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么现在请你写一个函数，输入一个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，返回斐波那契数列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的值：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><p>其实直接把斐波那契数列的数学定义翻译成代码，就可以得到一个递归解法：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，这个解法的效率并不高，在 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中，我们会继续优化，这里暂且不优化，就看这个递归解法。</p><p>把这个解法放到可视化面板中，让我们来计算一下 <code>fib(5)</code>，请你按照我的步骤操作：</p><div class=\"viz-template\"><!--[--><p>点开这个可视化面版，多次点击左侧代码中的 <code type=\"click\">if (n &lt; 2)</code> 这一行，即可看到这个 fib 函数就像是一个在二叉树上游走的指针，从根节点出发遍历完整棵树，最终回到根节点，也就计算出了 <code>fib(5)</code> 的值：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><div class=\"hint-container tip\"><p class=\"hint-container-title\">理解可视化面板</p><p>之所以点击 <code>if (n &lt; 2)</code> 这一行，是因为这个条件是递归的 base case，每次递归调用都会执行这一行代码，所以点击跳转这一行代码就相当于进入一次新的递归调用，即进入递归树上的一个新节点。</p><p>注意看递归树的节点还有颜色的区别：</p><p>最开始的时候，根节点是粉色的，其他节点都是半透明的，因为算法开始时站在根节点上，其他递归节点还没有执行，所以它们是半透明的；</p><p>随着递归的进行，递归经过的节点会变成粉色，表示这些递归计算已经开始了（处在函数堆栈中），但是还未完成计算；</p><p>递归继续进行，粉色的节点会变成绿色，表示这些递归计算已经完成了（已经从递归堆栈中弹出，返回了值）。</p><p>把鼠标移动到绿色的递归节点上，可以看到这个函数的调用参数和返回值，比如 <code>fib(2) = 1</code>。</p></div><p>接下来，我描述一下这个算法的计算过程：</p><p>首先，我们想计算 <code>fib(5)</code>，根据算法，我们需要计算 <code>fib(4)</code> 和 <code>fib(3)</code>，然后求和。</p><p>那就先算 <code>fib(4)</code> 的值吧：根据定义，<code>fib(4)</code> 需要计算 <code>fib(3)</code> 和 <code>fib(2)</code>，然后求和。</p><p>那就先算 <code>fib(3)</code> 的值吧：根据定义，<code>fib(3)</code> 需要计算 <code>fib(2)</code> 和 <code>fib(1)</code>，然后求和。</p><p>那就先算 <code>fib(2)</code> 的值吧：根据定义，<code>fib(2)</code> 需要对 <code>fib(1) = 1</code> 和 <code>fib(0) = 0</code> 求和，结果是 1。</p><p>...</p><p>你可以对比上面可视化面版的递归树，就很容易理解这个过程了。一个节点要等待左子节点计算完成，再等待右子节点计算完成，最后把两个子节点的值相加，得到当前节点的值，正符合 <code>fib(n) = fib(n-1) + fib(n-2)</code> 的定义。</p><p>从树结构的角度，是不是很容易理解递归的计算过程？你看这个 <code>fib</code> 函数和二叉树的遍历函数像不像？所以这个函数抽象出来的递归树就是一棵二叉树：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接下来，我们再看一个稍微复杂一些的递归算法：全排列问题。</p><h3 id=\"全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>全排列问题</span></a></h3><p>现在给你输入一个 <code>nums</code> 数组，其中有不重复的 <code>n</code> 个元素，请你返回这些元素的所有排列方式。</p><p>比方说输入 <code>nums = [1,2,3]</code>，那么算法返回如下 6 种排列：</p><div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>[1,2,3], [1,3,2],</span></span>\n<span class=\"line\"><span>[2,1,3], [2,3,1],</span></span>\n<span class=\"line\"><span>[3,1,2], [3,2,1]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>排列组合问题可以有多种变体，我们将在 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列组合子集问题</a> 中详细探讨，本文不讲代码实现，仅借助可视化面板来理解全排列算法的执行过程。</p><p>我们中学时学过排列组合，就应该做过类似的题目吧，如果让你手动计算 <code>[1,2,3]</code> 的全排列，你会怎么做？本质上就是穷举，只不过这个穷举过程需要一些条理：</p><p>先穷举第一位，可以放 <code>1, 2, 3</code> 中的任意一个，我们都要尝试一遍。</p><p>如果把 <code>1</code> 放在第一位，接下来第二位只能放 <code>2</code> 或 <code>3</code> 了。</p><p>如果第二位放 <code>2</code>，那么第三位只能放 <code>3</code> 了，得到了第一个全排列 <code>[1,2,3]</code>。</p><p>如果第二位放 <code>3</code>，那么第三位只能放 <code>2</code> 了，得到了第二个全排列 <code>[1,3,2]</code>。</p><p>回头来看，把 <code>2</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>3</code> 了。</p><p>如果第二位放 <code>1</code>，那么第三位只能放 <code>3</code> 了，得到了第三个全排列 <code>[2,1,3]</code>。</p><p>如果第二位放 <code>3</code>，那么第三位只能放 <code>1</code> 了，得到了第四个全排列 <code>[2,3,1]</code>。</p><p>回头来看，把 <code>3</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>2</code> 了。</p><p>如果第二位放 <code>1</code>，那么第三位只能放 <code>2</code> 了，得到了第五个全排列 <code>[3,1,2]</code>。</p><p>如果第二位放 <code>2</code>，那么第三位只能放 <code>1</code> 了，得到了第六个全排列 <code>[3,2,1]</code>。</p><p>这样，就得到了 <code>[1,2,3]</code> 的所有全排列。</p><p>上面的的穷举过程，其实就可以抽象成一棵递归树，请你点开下面的这个可视化面板，按照我说的操作：</p><div class=\"viz-template\"><!--[--><p>多次点击 <code type=\"click\">if (track.length === nums.length)</code> 这行代码，即可看到 <code>backtrack</code> 这个递归函数就好比一个从根节点出发的指针在递归树上游走，每当走到叶子节点，就得到了一个合法的全排列结果：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>目前不需要你彻底理解代码，只需留意代码中的递归部分：</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-192-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-192-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>抽出递归部分，应该能看出这个算法可以抽象成一棵多叉树：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>你应该已经感觉到了，「树」结构是一个非常有效的数据结构。把问题抽象成树结构，然后用代码去遍历这棵树，就是递归的本质</strong>。</p><h2 id=\"编写递归的两种思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BC%96%E5%86%99%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>编写递归的两种思维模式</span></a></h2><p>现在你已经知道了一切递归算法都要抽象成树结构来理解，接下来要更进一步：如果你想用递归算法来求解一个问题，应该怎么写代码呢？</p><p>其实很简单，编写递归算法只可能有两种思维模式，都尝试套用一下，必然有一种能写出来：</p><p>一种是「遍历」的思维模式，另一种是「分解问题」的思维模式。</p><p>上面讲的两道例题中，它们虽然都抽象成了一棵递归树，但斐波那契数列使用的是「分解问题」的思维模式求解，全排列使用的是「遍历」的思维模式求解。</p><h3 id=\"分解问题的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%86%E8%A7%A3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>分解问题的思维模式</span></a></h3><p>你看斐波那契数列问题，递归树上的每个节点，其实就是一个子问题的解。<code>fib(5)</code> 是怎么算出来的？是根节点 <code>fib(5)</code> 去问左右子节点 <code>fib(4)</code> 和 <code>fib(3)</code> 的值，然后相加得到的：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div><p>这里面就存在一个分解问题的过程：把规模较大的问题 <code>fib(5)</code> 分解成规模较小的问题 <code>fib(4)</code> 和 <code>fib(3)</code>，然后通过子问题的解得到原问题的解，我们可以称这种思维模式为「分解问题」。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「分解问题」的思维模式来写递归算法，那么这个递归函数一定要有一个清晰的定义，说明这个函数参数的含义是什么，返回什么结果</strong>。</p><p>这样你才能利用这个定义来计算子问题，反推原问题的解。</p></div><p>比如斐波那契数列的递归函数 <code>fib</code> 就有一个清晰的定义，且算法就在利用这个定义：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>再来一个简单的例题吧，比如计算二叉树的最大深度，力扣第 104 题「<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a>」：</p><details class=\"hint-container details\" open><summary><strong>104. 二叉树的最大深度</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟢</summary><div><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p>\n\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n\n\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"></p>\n\n\n\n<pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\">力扣 104. 二叉树的最大深度</a>。</strong></details><p>这道题可以用分解问题的思路求解：想计算整棵树的最大深度，可以先计算左右子树的最大深度，取两者的最大值加一，就是整棵树的最大深度。</p><p>那么我们可以给 <code>maxDepth</code> 函数一个明确的定义：输入一棵二叉树的节点，函数返回以这个节点为根的二叉树的最大深度。</p><p>然后，就可以得到一个类似斐波那契的递归公式：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-267-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-267-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构，其中父节点的值是左右子节点的较大值加一。</p><div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>maxDepth</code> 的递归树，当函数返回时，递归树节点会显示递归函数的返回值，最终所有节点的值都计算出来了，根节点的值就是我们想要的答案：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-divide\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>现在你应该理解了什么叫做「分解问题」的思路了，下面来看另一种编写递归算法的思路。</p><h3 id=\"遍历的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%81%8D%E5%8E%86%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>遍历的思维模式</span></a></h3><p>再结合可视化面板看全排列问题：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div><p>递归树上的节点并没有一个明确的含义，只是记录了之前所做的一些选择。所有全排列，就是所有叶子节点上的结果。这种思维模式称为「遍历」。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「遍历」的思维模式来写递归算法，那么你需要一个无返回值的遍历函数，在遍历的过程中收集结果</strong>。</p></div><p>比如全排列问题，目前你不需要完全理解全排列的代码，只需注意 <code>backtrack</code> 函数没有返回值，也没有一个明确的定义，它就类似 for 循环一样，单纯起到遍历递归树，收集叶子节点上的结果的作用：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有没有感觉出「遍历」和「分解问题」两种思维模式的区别？</p><p>再来看力扣第 104 题「二叉树的最大深度」，我们也可以用「遍历」的思维模式来写解法，用标准的二叉树遍历函数 <code>traverse</code> 来遍历整棵树，在遍历的过程更新最大深度，这样当遍历完所有节点时，必然可以求出整棵树的最大深度：</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-318-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-318-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构。其实 <code>traverse</code> 就是一个普通的二叉树遍历函数，只不过它会在遍历的过程中记录当前深度，并在遍历到叶子节点时更新最大深度。</p><div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>traverse</code> 的递归过程：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-traverse\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%80%BB%E7%BB%93\"><span>总结</span></a></h2><p>本文先用斐波那契数列和全排列问题的递归可视化，论证一定要从「树」的角度理解递归算法。</p><p>然后总结编写递归算法的两种思维模式：「分解问题」的思路和「遍历」的思路。文中给出的斐波那契数列的解法是「分解问题」的思路，全排列的解法是「遍历」的思路。</p><p>有些题目可以同时运用这两种思维模式，比如力扣第 104 题「二叉树的最大深度」，既可以用「分解问题」的思路，也可以用「遍历」的思路来求解，两种解法效率相同，但是代码看起来差异很大。</p><p><strong>讲上面这些，最终目的还是希望你能够参考以下步骤，运用自如地写出递归算法</strong>：</p><p>1、首先，这个问题是否可以抽象成一棵树结构？如果可以，那么就要用递归算法了。</p><p>2、如果要用递归算法，那么就思考「遍历」和「分解问题」这两种思维模式，看看哪种更适合这个问题。</p><p>3、如果用「分解问题」的思维模式，那么一定要写清楚这个递归函数的定义是什么，然后利用这个定义来分解问题，利用子问题的答案推导原问题的答案；如果用「遍历」的思维模式，那么要用一个无返回值的递归函数，单纯起到遍历递归树，收集目标结果的作用。</p><p>其实，「分解问题」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划算法</a> 和 <a class=\"route-link\" href=\"/algo/essential-technique/divide-and-conquer/\">分治算法</a>，「遍历」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">DFS/回溯算法</a>。</p><p>在 <a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树习题章节</a>，我专门把所有二叉树相关的题目都用这两种思维模式来解一遍。你只要把二叉树玩明白了，这些递归算法就都玩明白了，真的很简单。</p></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 104. 二叉树的最大深度 https://leetcode.cn/problems/maximum-depth-of-binary-tree </h3></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>一个视角是指「树」的视角，两种思维模式是指「遍历」和「分解问题」两种思维模式。</p></div><details class=\"hint-container details\" open data-v-40b908e2><summary class=\"video-summary-title\" data-v-40b908e2><div class=\"video-summary-title\" data-v-40b908e2><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg>   <strong data-v-40b908e2>视频讲解</strong>  </div></summary><!--[--><!--]--><div class=\"video-container\" data-v-40b908e2><div class=\"loader\" data-v-40b908e2><div class=\"spinner\" data-v-40b908e2></div></div><div style=\"\" class=\"video-mask\" data-v-40b908e2><img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2><button class=\"play-button\" data-v-40b908e2></button></div><video style=\"display:none;\" id=\"player-container-id\" preload=\"metadata\" playsinline data-v-40b908e2></video></div><!----></details><p>本文给你讲清楚：</p><p>1、算法的本质是穷举，递归是一种重要的穷举手段，递归的正确理解方法是从「树」的角度理解。</p><p>2、编写递归算法，有两种思维模式：一种是通过「遍历」一遍树得到答案，另一种是通过「分解问题」得到答案。</p><p>本文的主要目的是借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 给你讲清楚正确的思维方法，而不会深入探讨代码细节。本站后面有专门的章节讲解各种递归算法以及习题，都遵循文本讲解的思维模式，有了本文的铺垫，学习起来将事半功倍。</p><h2 id=\"从树的角度理解递归\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BB%8E%E6%A0%91%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92\"><span>从树的角度理解递归</span></a></h2><p>对于初学者，递归算法确实不容易理解，我刚学算法时也不例外。</p><p>我曾设想过一些有趣的视角来理解递归，比如把两面镜子相对放置，镜子中的影像就会无限嵌套下去，这似乎也算是递归的一种体现？</p><p>再比如，从程序运行原理上来看，递归函数的调用本质上就是入栈和出栈的过程，所以应该可以从栈的角度理解递归？</p><p>随着我对算法的理解不断深入，现在我可以负责任地告诉你，理解和编写递归算法最有效的方法是从「树」的视角去理解，其他的都属于花拳绣腿，中看不中用。</p><p>下面我将用斐波那契树和全排列这两个简单的经典算法问题来论证这一点。</p><p>再次强调，本文的重点是思维方法而不是代码，所以不必太纠结代码细节。请结合可视化面板，重点理解「递归树」的抽象，以及「遍历」和「分解问题」这两种思维模式的区别。</p><h3 id=\"斐波那契数列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span>斐波那契数列</span></a></h3><p>首先来看一个既简单又经典的问题：斐波那契数列。</p><p>斐波那契数列的数学定义如下：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><p>比方说：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>那么现在请你写一个函数，输入一个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，返回斐波那契数列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的值：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><p>其实直接把斐波那契数列的数学定义翻译成代码，就可以得到一个递归解法：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，这个解法的效率并不高，在 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中，我们会继续优化，这里暂且不优化，就看这个递归解法。</p><p>把这个解法放到可视化面板中，让我们来计算一下 <code>fib(5)</code>，请你按照我的步骤操作：</p><div class=\"viz-template\"><!--[--><p>点开这个可视化面版，多次点击左侧代码中的 <code type=\"click\">if (n &lt; 2)</code> 这一行，即可看到这个 fib 函数就像是一个在二叉树上游走的指针，从根节点出发遍历完整棵树，最终回到根节点，也就计算出了 <code>fib(5)</code> 的值：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><div class=\"hint-container tip\"><p class=\"hint-container-title\">理解可视化面板</p><p>之所以点击 <code>if (n &lt; 2)</code> 这一行，是因为这个条件是递归的 base case，每次递归调用都会执行这一行代码，所以点击跳转这一行代码就相当于进入一次新的递归调用，即进入递归树上的一个新节点。</p><p>注意看递归树的节点还有颜色的区别：</p><p>最开始的时候，根节点是粉色的，其他节点都是半透明的，因为算法开始时站在根节点上，其他递归节点还没有执行，所以它们是半透明的；</p><p>随着递归的进行，递归经过的节点会变成粉色，表示这些递归计算已经开始了（处在函数堆栈中），但是还未完成计算；</p><p>递归继续进行，粉色的节点会变成绿色，表示这些递归计算已经完成了（已经从递归堆栈中弹出，返回了值）。</p><p>把鼠标移动到绿色的递归节点上，可以看到这个函数的调用参数和返回值，比如 <code>fib(2) = 1</code>。</p></div><p>接下来，我描述一下这个算法的计算过程：</p><p>首先，我们想计算 <code>fib(5)</code>，根据算法，我们需要计算 <code>fib(4)</code> 和 <code>fib(3)</code>，然后求和。</p><p>那就先算 <code>fib(4)</code> 的值吧：根据定义，<code>fib(4)</code> 需要计算 <code>fib(3)</code> 和 <code>fib(2)</code>，然后求和。</p><p>那就先算 <code>fib(3)</code> 的值吧：根据定义，<code>fib(3)</code> 需要计算 <code>fib(2)</code> 和 <code>fib(1)</code>，然后求和。</p><p>那就先算 <code>fib(2)</code> 的值吧：根据定义，<code>fib(2)</code> 需要对 <code>fib(1) = 1</code> 和 <code>fib(0) = 0</code> 求和，结果是 1。</p><p>...</p><p>你可以对比上面可视化面版的递归树，就很容易理解这个过程了。一个节点要等待左子节点计算完成，再等待右子节点计算完成，最后把两个子节点的值相加，得到当前节点的值，正符合 <code>fib(n) = fib(n-1) + fib(n-2)</code> 的定义。</p><p>从树结构的角度，是不是很容易理解递归的计算过程？你看这个 <code>fib</code> 函数和二叉树的遍历函数像不像？所以这个函数抽象出来的递归树就是一棵二叉树：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>接下来，我们再看一个稍微复杂一些的递归算法：全排列问题。</p><h3 id=\"全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>全排列问题</span></a></h3><p>现在给你输入一个 <code>nums</code> 数组，其中有不重复的 <code>n</code> 个元素，请你返回这些元素的所有排列方式。</p><p>比方说输入 <code>nums = [1,2,3]</code>，那么算法返回如下 6 种排列：</p><div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>[1,2,3], [1,3,2],</span></span>\n<span class=\"line\"><span>[2,1,3], [2,3,1],</span></span>\n<span class=\"line\"><span>[3,1,2], [3,2,1]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>排列组合问题可以有多种变体，我们将在 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列组合子集问题</a> 中详细探讨，本文不讲代码实现，仅借助可视化面板来理解全排列算法的执行过程。</p><p>我们中学时学过排列组合，就应该做过类似的题目吧，如果让你手动计算 <code>[1,2,3]</code> 的全排列，你会怎么做？本质上就是穷举，只不过这个穷举过程需要一些条理：</p><p>先穷举第一位，可以放 <code>1, 2, 3</code> 中的任意一个，我们都要尝试一遍。</p><p>如果把 <code>1</code> 放在第一位，接下来第二位只能放 <code>2</code> 或 <code>3</code> 了。</p><p>如果第二位放 <code>2</code>，那么第三位只能放 <code>3</code> 了，得到了第一个全排列 <code>[1,2,3]</code>。</p><p>如果第二位放 <code>3</code>，那么第三位只能放 <code>2</code> 了，得到了第二个全排列 <code>[1,3,2]</code>。</p><p>回头来看，把 <code>2</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>3</code> 了。</p><p>如果第二位放 <code>1</code>，那么第三位只能放 <code>3</code> 了，得到了第三个全排列 <code>[2,1,3]</code>。</p><p>如果第二位放 <code>3</code>，那么第三位只能放 <code>1</code> 了，得到了第四个全排列 <code>[2,3,1]</code>。</p><p>回头来看，把 <code>3</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>2</code> 了。</p><p>如果第二位放 <code>1</code>，那么第三位只能放 <code>2</code> 了，得到了第五个全排列 <code>[3,1,2]</code>。</p><p>如果第二位放 <code>2</code>，那么第三位只能放 <code>1</code> 了，得到了第六个全排列 <code>[3,2,1]</code>。</p><p>这样，就得到了 <code>[1,2,3]</code> 的所有全排列。</p><p>上面的的穷举过程，其实就可以抽象成一棵递归树，请你点开下面的这个可视化面板，按照我说的操作：</p><div class=\"viz-template\"><!--[--><p>多次点击 <code type=\"click\">if (track.length === nums.length)</code> 这行代码，即可看到 <code>backtrack</code> 这个递归函数就好比一个从根节点出发的指针在递归树上游走，每当走到叶子节点，就得到了一个合法的全排列结果：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>目前不需要你彻底理解代码，只需留意代码中的递归部分：</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-192-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-192-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>抽出递归部分，应该能看出这个算法可以抽象成一棵多叉树：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><strong>你应该已经感觉到了，「树」结构是一个非常有效的数据结构。把问题抽象成树结构，然后用代码去遍历这棵树，就是递归的本质</strong>。</p><h2 id=\"编写递归的两种思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BC%96%E5%86%99%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>编写递归的两种思维模式</span></a></h2><p>现在你已经知道了一切递归算法都要抽象成树结构来理解，接下来要更进一步：如果你想用递归算法来求解一个问题，应该怎么写代码呢？</p><p>其实很简单，编写递归算法只可能有两种思维模式，都尝试套用一下，必然有一种能写出来：</p><p>一种是「遍历」的思维模式，另一种是「分解问题」的思维模式。</p><p>上面讲的两道例题中，它们虽然都抽象成了一棵递归树，但斐波那契数列使用的是「分解问题」的思维模式求解，全排列使用的是「遍历」的思维模式求解。</p><h3 id=\"分解问题的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%86%E8%A7%A3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>分解问题的思维模式</span></a></h3><p>你看斐波那契数列问题，递归树上的每个节点，其实就是一个子问题的解。<code>fib(5)</code> 是怎么算出来的？是根节点 <code>fib(5)</code> 去问左右子节点 <code>fib(4)</code> 和 <code>fib(3)</code> 的值，然后相加得到的：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div><p>这里面就存在一个分解问题的过程：把规模较大的问题 <code>fib(5)</code> 分解成规模较小的问题 <code>fib(4)</code> 和 <code>fib(3)</code>，然后通过子问题的解得到原问题的解，我们可以称这种思维模式为「分解问题」。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「分解问题」的思维模式来写递归算法，那么这个递归函数一定要有一个清晰的定义，说明这个函数参数的含义是什么，返回什么结果</strong>。</p><p>这样你才能利用这个定义来计算子问题，反推原问题的解。</p></div><p>比如斐波那契数列的递归函数 <code>fib</code> 就有一个清晰的定义，且算法就在利用这个定义：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>再来一个简单的例题吧，比如计算二叉树的最大深度，力扣第 104 题「<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a>」：</p><details class=\"hint-container details\" open><summary><strong>104. 二叉树的最大深度</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟢</summary><div><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p>\n\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n\n\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"></p>\n\n\n\n<pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\">力扣 104. 二叉树的最大深度</a>。</strong></details><p>这道题可以用分解问题的思路求解：想计算整棵树的最大深度，可以先计算左右子树的最大深度，取两者的最大值加一，就是整棵树的最大深度。</p><p>那么我们可以给 <code>maxDepth</code> 函数一个明确的定义：输入一棵二叉树的节点，函数返回以这个节点为根的二叉树的最大深度。</p><p>然后，就可以得到一个类似斐波那契的递归公式：</p><p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-267-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-267-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构，其中父节点的值是左右子节点的较大值加一。</p><div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>maxDepth</code> 的递归树，当函数返回时，递归树节点会显示递归函数的返回值，最终所有节点的值都计算出来了，根节点的值就是我们想要的答案：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-divide\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>现在你应该理解了什么叫做「分解问题」的思路了，下面来看另一种编写递归算法的思路。</p><h3 id=\"遍历的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%81%8D%E5%8E%86%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>遍历的思维模式</span></a></h3><p>再结合可视化面板看全排列问题：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div><p>递归树上的节点并没有一个明确的含义，只是记录了之前所做的一些选择。所有全排列，就是所有叶子节点上的结果。这种思维模式称为「遍历」。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「遍历」的思维模式来写递归算法，那么你需要一个无返回值的遍历函数，在遍历的过程中收集结果</strong>。</p></div><p>比如全排列问题，目前你不需要完全理解全排列的代码，只需注意 <code>backtrack</code> 函数没有返回值，也没有一个明确的定义，它就类似 for 循环一样，单纯起到遍历递归树，收集叶子节点上的结果的作用：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>有没有感觉出「遍历」和「分解问题」两种思维模式的区别？</p><p>再来看力扣第 104 题「二叉树的最大深度」，我们也可以用「遍历」的思维模式来写解法，用标准的二叉树遍历函数 <code>traverse</code> 来遍历整棵树，在遍历的过程更新最大深度，这样当遍历完所有节点时，必然可以求出整棵树的最大深度：</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-318-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-318-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构。其实 <code>traverse</code> 就是一个普通的二叉树遍历函数，只不过它会在遍历的过程中记录当前深度，并在遍历到叶子节点时更新最大深度。</p><div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>traverse</code> 的递归过程：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-traverse\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%80%BB%E7%BB%93\"><span>总结</span></a></h2><p>本文先用斐波那契数列和全排列问题的递归可视化，论证一定要从「树」的角度理解递归算法。</p><p>然后总结编写递归算法的两种思维模式：「分解问题」的思路和「遍历」的思路。文中给出的斐波那契数列的解法是「分解问题」的思路，全排列的解法是「遍历」的思路。</p><p>有些题目可以同时运用这两种思维模式，比如力扣第 104 题「二叉树的最大深度」，既可以用「分解问题」的思路，也可以用「遍历」的思路来求解，两种解法效率相同，但是代码看起来差异很大。</p><p><strong>讲上面这些，最终目的还是希望你能够参考以下步骤，运用自如地写出递归算法</strong>：</p><p>1、首先，这个问题是否可以抽象成一棵树结构？如果可以，那么就要用递归算法了。</p><p>2、如果要用递归算法，那么就思考「遍历」和「分解问题」这两种思维模式，看看哪种更适合这个问题。</p><p>3、如果用「分解问题」的思维模式，那么一定要写清楚这个递归函数的定义是什么，然后利用这个定义来分解问题，利用子问题的答案推导原问题的答案；如果用「遍历」的思维模式，那么要用一个无返回值的递归函数，单纯起到遍历递归树，收集目标结果的作用。</p><p>其实，「分解问题」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划算法</a> 和 <a class=\"route-link\" href=\"/algo/essential-technique/divide-and-conquer/\">分治算法</a>，「遍历」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">DFS/回溯算法</a>。</p><p>在 <a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树习题章节</a>，我专门把所有二叉树相关的题目都用这两种思维模式来解一遍。你只要把二叉树玩明白了，这些递归算法就都玩明白了，真的很简单。</p></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 104. 二叉树的最大深度 https://leetcode.cn/problems/maximum-depth-of-binary-tree </h3></div> <h3 tabindex=\"-1\"> 104. 二叉树的最大深度 https://leetcode.cn/problems/maximum-depth-of-binary-tree </h3> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-traverse-basic/\">二叉树的递归/层序遍历</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>一个视角是指「树」的视角，两种思维模式是指「遍历」和「分解问题」两种思维模式。</p></div> <p class=\"hint-container-title\">一句话总结</p> <p>一个视角是指「树」的视角，两种思维模式是指「遍历」和「分解问题」两种思维模式。</p> <details class=\"hint-container details\" open data-v-40b908e2><summary class=\"video-summary-title\" data-v-40b908e2><div class=\"video-summary-title\" data-v-40b908e2><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg>   <strong data-v-40b908e2>视频讲解</strong>  </div></summary><!--[--><!--]--><div class=\"video-container\" data-v-40b908e2><div class=\"loader\" data-v-40b908e2><div class=\"spinner\" data-v-40b908e2></div></div><div style=\"\" class=\"video-mask\" data-v-40b908e2><img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2><button class=\"play-button\" data-v-40b908e2></button></div><video style=\"display:none;\" id=\"player-container-id\" preload=\"metadata\" playsinline data-v-40b908e2></video></div><!----></details> <summary class=\"video-summary-title\" data-v-40b908e2><div class=\"video-summary-title\" data-v-40b908e2><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg>   <strong data-v-40b908e2>视频讲解</strong>  </div></summary> <div class=\"video-summary-title\" data-v-40b908e2><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg>   <strong data-v-40b908e2>视频讲解</strong>  </div> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-40b908e2><path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path></svg> <path fill=\"currentColor\" d=\"M16.275 10.51q.292-.187.292-.51t-.292-.51l-3.836-2.47q-.298-.212-.619-.038t-.32.547v4.942q0 .373.32.547t.618-.037zM8.115 17q-.69 0-1.152-.462T6.5 15.385V4.615q0-.69.463-1.153T8.116 3h10.769q.69 0 1.153.462t.462 1.153v10.77q0 .69-.462 1.152T18.884 17zm0-1h10.77q.23 0 .423-.192t.192-.423V4.615q0-.23-.192-.423T18.884 4H8.116q-.231 0-.424.192t-.192.423v10.77q0 .23.192.423t.423.192m-3 4q-.69 0-1.153-.462T3.5 18.385V7.115q0-.213.143-.356T4 6.616t.357.143t.143.357v11.269q0 .23.192.423t.423.192h11.27q.213 0 .356.143t.144.357t-.144.357t-.356.143zM7.5 4v12z\" data-v-40b908e2></path> <strong data-v-40b908e2>视频讲解</strong> <div class=\"video-container\" data-v-40b908e2><div class=\"loader\" data-v-40b908e2><div class=\"spinner\" data-v-40b908e2></div></div><div style=\"\" class=\"video-mask\" data-v-40b908e2><img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2><button class=\"play-button\" data-v-40b908e2></button></div><video style=\"display:none;\" id=\"player-container-id\" preload=\"metadata\" playsinline data-v-40b908e2></video></div> <div class=\"loader\" data-v-40b908e2><div class=\"spinner\" data-v-40b908e2></div></div> <div class=\"spinner\" data-v-40b908e2></div> <div style=\"\" class=\"video-mask\" data-v-40b908e2><img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2><button class=\"play-button\" data-v-40b908e2></button></div> <img src=\"/algo/images/vod/recursion.jpg\" alt=\"Video Thumbnail\" loading=\"lazy\" class=\"cover-image\" data-v-40b908e2> <button class=\"play-button\" data-v-40b908e2></button> <video style=\"display:none;\" id=\"player-container-id\" preload=\"metadata\" playsinline data-v-40b908e2></video> <p>本文给你讲清楚：</p> <p>1、算法的本质是穷举，递归是一种重要的穷举手段，递归的正确理解方法是从「树」的角度理解。</p> <p>2、编写递归算法，有两种思维模式：一种是通过「遍历」一遍树得到答案，另一种是通过「分解问题」得到答案。</p> <p>本文的主要目的是借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 给你讲清楚正确的思维方法，而不会深入探讨代码细节。本站后面有专门的章节讲解各种递归算法以及习题，都遵循文本讲解的思维模式，有了本文的铺垫，学习起来将事半功倍。</p> <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> <h2 id=\"从树的角度理解递归\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BB%8E%E6%A0%91%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92\"><span>从树的角度理解递归</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%BB%8E%E6%A0%91%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92\"><span>从树的角度理解递归</span></a> <span>从树的角度理解递归</span> <p>对于初学者，递归算法确实不容易理解，我刚学算法时也不例外。</p> <p>我曾设想过一些有趣的视角来理解递归，比如把两面镜子相对放置，镜子中的影像就会无限嵌套下去，这似乎也算是递归的一种体现？</p> <p>再比如，从程序运行原理上来看，递归函数的调用本质上就是入栈和出栈的过程，所以应该可以从栈的角度理解递归？</p> <p>随着我对算法的理解不断深入，现在我可以负责任地告诉你，理解和编写递归算法最有效的方法是从「树」的视角去理解，其他的都属于花拳绣腿，中看不中用。</p> <p>下面我将用斐波那契树和全排列这两个简单的经典算法问题来论证这一点。</p> <p>再次强调，本文的重点是思维方法而不是代码，所以不必太纠结代码细节。请结合可视化面板，重点理解「递归树」的抽象，以及「遍历」和「分解问题」这两种思维模式的区别。</p> <h3 id=\"斐波那契数列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span>斐波那契数列</span></a></h3> <a class=\"header-anchor\" href=\"#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97\"><span>斐波那契数列</span></a> <span>斐波那契数列</span> <p>首先来看一个既简单又经典的问题：斐波那契数列。</p> <p>斐波那契数列的数学定义如下：</p> <p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p> <span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics></math> <semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation></semantics> <mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mi>n</mi> <mo stretchy=\"false\">)</mo> <mo>=</mo> <mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow> <mo fence=\"true\">{</mo> <mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle> <mn>0</mn> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle> <mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow> <mi>n</mi> <mo>=</mo> <mn>0</mn> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle> <mn>1</mn> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle> <mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow> <mi>n</mi> <mo>=</mo> <mn>1</mn> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle> <mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mi>n</mi> <mo>−</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mi>n</mi> <mo>−</mo> <mn>2</mn> <mo stretchy=\"false\">)</mo> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle> <mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow> <mi>n</mi> <mo>&gt;</mo> <mn>1</mn> <annotation encoding=\"application/x-tex\">fib(n) = \\begin{cases} 0 &amp; n = 0 \\\\ 1 &amp; n = 1 \\\\ fib(n-1) + fib(n-2) &amp; n &gt; 1 \\end{cases} </annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">n</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"base\"><span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span> <span class=\"strut\" style=\"height:4.32em;vertical-align:-1.91em;\"></span> <span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span> <span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span></span> <span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:2.35em;\"><span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span><span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span><span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span><span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span></span> <span style=\"top:-2.2em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎩</span></span></span> <span class=\"pstrut\" style=\"height:3.15em;\"></span> <span class=\"delimsizinginner delim-size4\"><span>⎩</span></span> <span>⎩</span> <span style=\"top:-2.192em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span> <span class=\"pstrut\" style=\"height:3.15em;\"></span> <span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg> <path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path> <span style=\"top:-3.15em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎨</span></span></span> <span class=\"pstrut\" style=\"height:3.15em;\"></span> <span class=\"delimsizinginner delim-size4\"><span>⎨</span></span> <span>⎨</span> <span style=\"top:-4.292em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span></span> <span class=\"pstrut\" style=\"height:3.15em;\"></span> <span style=\"height:0.316em;width:0.8889em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg></span> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.8889em\" height=\"0.316em\" style=\"width:0.8889em;\" viewbox=\"0 0 888.89 316\" preserveaspectratio=\"xMinYMin\"><path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path></svg> <path d=\"M384 0 H504 V316 H384z M384 0 H504 V316 H384z\"></path> <span style=\"top:-4.6em;\"><span class=\"pstrut\" style=\"height:3.15em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎧</span></span></span> <span class=\"pstrut\" style=\"height:3.15em;\"></span> <span class=\"delimsizinginner delim-size4\"><span>⎧</span></span> <span>⎧</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.85em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:1.85em;\"><span></span></span> <span></span> <span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span></span> <span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span></span> <span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span></span> <span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord\">0</span></span> <span class=\"mord\">0</span> <span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord\">1</span></span> <span class=\"mord\">1</span> <span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">n</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">−</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">n</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">−</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">2</span> <span class=\"mclose\">)</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:1.91em;\"><span></span></span> <span></span> <span class=\"arraycolsep\" style=\"width:1em;\"></span> <span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:2.41em;\"><span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span></span> <span style=\"top:-4.41em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span> <span class=\"mord mathnormal\">n</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord\">0</span> <span style=\"top:-2.97em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span> <span class=\"mord mathnormal\">n</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord\">1</span> <span style=\"top:-1.53em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">1</span></span> <span class=\"mord mathnormal\">n</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">&gt;</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord\">1</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.91em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:1.91em;\"><span></span></span> <span></span> <span class=\"mclose nulldelimiter\"></span> <p>比方说：</p> <p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p> <span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics></math> <semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation></semantics> <mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle> <mrow></mrow> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow></mstyle> <mrow><mrow></mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>4</mn><mo stretchy=\"false\">)</mo></mrow> <mrow></mrow> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>4</mn> <mo stretchy=\"false\">)</mo> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle> <mrow></mrow> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow></mstyle> <mrow><mrow></mrow><mo>=</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>3</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo></mrow> <mrow></mrow> <mo>=</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>3</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>2</mn> <mo stretchy=\"false\">)</mo> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle> <mrow></mrow> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle> <mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow> <mrow></mrow> <mo>=</mo> <mo stretchy=\"false\">(</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>2</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mo stretchy=\"false\">(</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>0</mn> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle> <mrow></mrow> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle> <mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow> <mrow></mrow> <mo>=</mo> <mo stretchy=\"false\">(</mo> <mo stretchy=\"false\">(</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>0</mn> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mo stretchy=\"false\">(</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mn>0</mn> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle> <mrow></mrow> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow></mstyle> <mrow><mrow></mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>3</mn></mrow> <mrow></mrow> <mo>=</mo> <mo stretchy=\"false\">(</mo> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo>+</mo> <mn>0</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo>+</mo> <mn>0</mn> <mo stretchy=\"false\">)</mo> <mo>=</mo> <mn>3</mn> <annotation encoding=\"application/x-tex\">\\begin{aligned} &amp; fib(4) \\\\ &amp; = fib(3) + fib(2) \\\\ &amp; = (fib(2) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0)) \\\\ &amp; = ((1 + 0) + 1) + (1 + 0) = 3 \\end{aligned} </annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span></span> <span class=\"strut\" style=\"height:7.5em;vertical-align:-3.5em;\"></span> <span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span></span> <span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span></span> <span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span> <span style=\"top:-6em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span> <span class=\"pstrut\" style=\"height:2.84em;\"></span> <span class=\"mord\"></span> <span style=\"top:-4.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span> <span class=\"pstrut\" style=\"height:2.84em;\"></span> <span class=\"mord\"></span> <span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span> <span class=\"pstrut\" style=\"height:2.84em;\"></span> <span class=\"mord\"></span> <span style=\"top:-1.5em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span> <span class=\"pstrut\" style=\"height:2.84em;\"></span> <span class=\"mord\"></span> <span style=\"top:0em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span> <span class=\"pstrut\" style=\"height:2.84em;\"></span> <span class=\"mord\"></span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:3.5em;\"><span></span></span> <span></span> <span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:4em;\"><span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span><span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span></span> <span style=\"top:-6.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span></span> <span class=\"pstrut\" style=\"height:3em;\"></span> <span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">4</span><span class=\"mclose\">)</span></span> <span class=\"mord\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">4</span> <span class=\"mclose\">)</span> <span style=\"top:-4.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span></span> <span class=\"pstrut\" style=\"height:3em;\"></span> <span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span></span> <span class=\"mord\"></span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">3</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">2</span> <span class=\"mclose\">)</span> <span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span> <span class=\"pstrut\" style=\"height:3em;\"></span> <span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span> <span class=\"mord\"></span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">2</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">))</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">0</span> <span class=\"mclose\">))</span> <span style=\"top:-1.66em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span></span> <span class=\"pstrut\" style=\"height:3em;\"></span> <span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">))</span></span> <span class=\"mord\"></span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mopen\">((</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">0</span> <span class=\"mclose\">))</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">))</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord\">0</span> <span class=\"mclose\">))</span> <span style=\"top:-0.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span></span> <span class=\"pstrut\" style=\"height:3em;\"></span> <span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mopen\">((</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">3</span></span> <span class=\"mord\"></span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mopen\">((</span> <span class=\"mord\">1</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">0</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">0</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord\">3</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.5em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:3.5em;\"><span></span></span> <span></span> <p>那么现在请你写一个函数，输入一个整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，返回斐波那契数列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的值：</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math> <semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics> <mrow><mi>n</mi></mrow> <mi>n</mi> <annotation encoding=\"application/x-tex\">n</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span> <span class=\"strut\" style=\"height:0.4306em;\"></span> <span class=\"mord mathnormal\">n</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics></math> <semantics><mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fib(n)</annotation></semantics> <mrow><mi>f</mi><mi>i</mi><mi>b</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow> <mi>f</mi> <mi>i</mi> <mi>b</mi> <mo stretchy=\"false\">(</mo> <mi>n</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">fib(n)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">ib</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">ib</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">n</span> <span class=\"mclose\">)</span> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <p>其实直接把斐波那契数列的数学定义翻译成代码，就可以得到一个递归解法：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) + </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>当然，这个解法的效率并不高，在 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中，我们会继续优化，这里暂且不优化，就看这个递归解法。</p> <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> <p>把这个解法放到可视化面板中，让我们来计算一下 <code>fib(5)</code>，请你按照我的步骤操作：</p> <code>fib(5)</code> <div class=\"viz-template\"><!--[--><p>点开这个可视化面版，多次点击左侧代码中的 <code type=\"click\">if (n &lt; 2)</code> 这一行，即可看到这个 fib 函数就像是一个在二叉树上游走的指针，从根节点出发遍历完整棵树，最终回到根节点，也就计算出了 <code>fib(5)</code> 的值：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div> <p>点开这个可视化面版，多次点击左侧代码中的 <code type=\"click\">if (n &lt; 2)</code> 这一行，即可看到这个 fib 函数就像是一个在二叉树上游走的指针，从根节点出发遍历完整棵树，最终回到根节点，也就计算出了 <code>fib(5)</code> 的值：</p> <code type=\"click\">if (n &lt; 2)</code> <code>fib(5)</code> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <div class=\"hint-container tip\"><p class=\"hint-container-title\">理解可视化面板</p><p>之所以点击 <code>if (n &lt; 2)</code> 这一行，是因为这个条件是递归的 base case，每次递归调用都会执行这一行代码，所以点击跳转这一行代码就相当于进入一次新的递归调用，即进入递归树上的一个新节点。</p><p>注意看递归树的节点还有颜色的区别：</p><p>最开始的时候，根节点是粉色的，其他节点都是半透明的，因为算法开始时站在根节点上，其他递归节点还没有执行，所以它们是半透明的；</p><p>随着递归的进行，递归经过的节点会变成粉色，表示这些递归计算已经开始了（处在函数堆栈中），但是还未完成计算；</p><p>递归继续进行，粉色的节点会变成绿色，表示这些递归计算已经完成了（已经从递归堆栈中弹出，返回了值）。</p><p>把鼠标移动到绿色的递归节点上，可以看到这个函数的调用参数和返回值，比如 <code>fib(2) = 1</code>。</p></div> <p class=\"hint-container-title\">理解可视化面板</p> <p>之所以点击 <code>if (n &lt; 2)</code> 这一行，是因为这个条件是递归的 base case，每次递归调用都会执行这一行代码，所以点击跳转这一行代码就相当于进入一次新的递归调用，即进入递归树上的一个新节点。</p> <code>if (n &lt; 2)</code> <p>注意看递归树的节点还有颜色的区别：</p> <p>最开始的时候，根节点是粉色的，其他节点都是半透明的，因为算法开始时站在根节点上，其他递归节点还没有执行，所以它们是半透明的；</p> <p>随着递归的进行，递归经过的节点会变成粉色，表示这些递归计算已经开始了（处在函数堆栈中），但是还未完成计算；</p> <p>递归继续进行，粉色的节点会变成绿色，表示这些递归计算已经完成了（已经从递归堆栈中弹出，返回了值）。</p> <p>把鼠标移动到绿色的递归节点上，可以看到这个函数的调用参数和返回值，比如 <code>fib(2) = 1</code>。</p> <code>fib(2) = 1</code> <p>接下来，我描述一下这个算法的计算过程：</p> <p>首先，我们想计算 <code>fib(5)</code>，根据算法，我们需要计算 <code>fib(4)</code> 和 <code>fib(3)</code>，然后求和。</p> <code>fib(5)</code> <code>fib(4)</code> <code>fib(3)</code> <p>那就先算 <code>fib(4)</code> 的值吧：根据定义，<code>fib(4)</code> 需要计算 <code>fib(3)</code> 和 <code>fib(2)</code>，然后求和。</p> <code>fib(4)</code> <code>fib(4)</code> <code>fib(3)</code> <code>fib(2)</code> <p>那就先算 <code>fib(3)</code> 的值吧：根据定义，<code>fib(3)</code> 需要计算 <code>fib(2)</code> 和 <code>fib(1)</code>，然后求和。</p> <code>fib(3)</code> <code>fib(3)</code> <code>fib(2)</code> <code>fib(1)</code> <p>那就先算 <code>fib(2)</code> 的值吧：根据定义，<code>fib(2)</code> 需要对 <code>fib(1) = 1</code> 和 <code>fib(0) = 0</code> 求和，结果是 1。</p> <code>fib(2)</code> <code>fib(2)</code> <code>fib(1) = 1</code> <code>fib(0) = 0</code> <p>...</p> <p>你可以对比上面可视化面版的递归树，就很容易理解这个过程了。一个节点要等待左子节点计算完成，再等待右子节点计算完成，最后把两个子节点的值相加，得到当前节点的值，正符合 <code>fib(n) = fib(n-1) + fib(n-2)</code> 的定义。</p> <code>fib(n) = fib(n-1) + fib(n-2)</code> <p>从树结构的角度，是不是很容易理解递归的计算过程？你看这个 <code>fib</code> 函数和二叉树的遍历函数像不像？所以这个函数抽象出来的递归树就是一棵二叉树：</p> <code>fib</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 斐波那契数列</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">         + </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 二叉树遍历函数</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>接下来，我们再看一个稍微复杂一些的递归算法：全排列问题。</p> <h3 id=\"全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>全排列问题</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>全排列问题</span></a> <span>全排列问题</span> <p>现在给你输入一个 <code>nums</code> 数组，其中有不重复的 <code>n</code> 个元素，请你返回这些元素的所有排列方式。</p> <code>nums</code> <code>n</code> <p>比方说输入 <code>nums = [1,2,3]</code>，那么算法返回如下 6 种排列：</p> <code>nums = [1,2,3]</code> <div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>[1,2,3], [1,3,2],</span></span>\n<span class=\"line\"><span>[2,1,3], [2,3,1],</span></span>\n<span class=\"line\"><span>[3,1,2], [3,2,1]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>[1,2,3], [1,3,2],</span></span>\n<span class=\"line\"><span>[2,1,3], [2,3,1],</span></span>\n<span class=\"line\"><span>[3,1,2], [3,2,1]</span></span></code></pre> <code><span class=\"line\"><span>[1,2,3], [1,3,2],</span></span>\n<span class=\"line\"><span>[2,1,3], [2,3,1],</span></span>\n<span class=\"line\"><span>[3,1,2], [3,2,1]</span></span></code> <span class=\"line\"><span>[1,2,3], [1,3,2],</span></span> <span>[1,2,3], [1,3,2],</span> <span class=\"line\"><span>[2,1,3], [2,3,1],</span></span> <span>[2,1,3], [2,3,1],</span> <span class=\"line\"><span>[3,1,2], [3,2,1]</span></span> <span>[3,1,2], [3,2,1]</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>排列组合问题可以有多种变体，我们将在 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列组合子集问题</a> 中详细探讨，本文不讲代码实现，仅借助可视化面板来理解全排列算法的执行过程。</p> <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列组合子集问题</a> <p>我们中学时学过排列组合，就应该做过类似的题目吧，如果让你手动计算 <code>[1,2,3]</code> 的全排列，你会怎么做？本质上就是穷举，只不过这个穷举过程需要一些条理：</p> <code>[1,2,3]</code> <p>先穷举第一位，可以放 <code>1, 2, 3</code> 中的任意一个，我们都要尝试一遍。</p> <code>1, 2, 3</code> <p>如果把 <code>1</code> 放在第一位，接下来第二位只能放 <code>2</code> 或 <code>3</code> 了。</p> <code>1</code> <code>2</code> <code>3</code> <p>如果第二位放 <code>2</code>，那么第三位只能放 <code>3</code> 了，得到了第一个全排列 <code>[1,2,3]</code>。</p> <code>2</code> <code>3</code> <code>[1,2,3]</code> <p>如果第二位放 <code>3</code>，那么第三位只能放 <code>2</code> 了，得到了第二个全排列 <code>[1,3,2]</code>。</p> <code>3</code> <code>2</code> <code>[1,3,2]</code> <p>回头来看，把 <code>2</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>3</code> 了。</p> <code>2</code> <code>1</code> <code>3</code> <p>如果第二位放 <code>1</code>，那么第三位只能放 <code>3</code> 了，得到了第三个全排列 <code>[2,1,3]</code>。</p> <code>1</code> <code>3</code> <code>[2,1,3]</code> <p>如果第二位放 <code>3</code>，那么第三位只能放 <code>1</code> 了，得到了第四个全排列 <code>[2,3,1]</code>。</p> <code>3</code> <code>1</code> <code>[2,3,1]</code> <p>回头来看，把 <code>3</code> 放在第一位，那么第二位只能放 <code>1</code> 或 <code>2</code> 了。</p> <code>3</code> <code>1</code> <code>2</code> <p>如果第二位放 <code>1</code>，那么第三位只能放 <code>2</code> 了，得到了第五个全排列 <code>[3,1,2]</code>。</p> <code>1</code> <code>2</code> <code>[3,1,2]</code> <p>如果第二位放 <code>2</code>，那么第三位只能放 <code>1</code> 了，得到了第六个全排列 <code>[3,2,1]</code>。</p> <code>2</code> <code>1</code> <code>[3,2,1]</code> <p>这样，就得到了 <code>[1,2,3]</code> 的所有全排列。</p> <code>[1,2,3]</code> <p>上面的的穷举过程，其实就可以抽象成一棵递归树，请你点开下面的这个可视化面板，按照我说的操作：</p> <div class=\"viz-template\"><!--[--><p>多次点击 <code type=\"click\">if (track.length === nums.length)</code> 这行代码，即可看到 <code>backtrack</code> 这个递归函数就好比一个从根节点出发的指针在递归树上游走，每当走到叶子节点，就得到了一个合法的全排列结果：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div> <p>多次点击 <code type=\"click\">if (track.length === nums.length)</code> 这行代码，即可看到 <code>backtrack</code> 这个递归函数就好比一个从根节点出发的指针在递归树上游走，每当走到叶子节点，就得到了一个合法的全排列结果：</p> <code type=\"click\">if (track.length === nums.length)</code> <code>backtrack</code> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <p>目前不需要你彻底理解代码，只需留意代码中的递归部分：</p> <div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-192-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-192-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-192-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div> <div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-192-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-4\" aria-selected=\"false\">javascript</button></div> <button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-192-0\" aria-selected=\"true\">java</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-1\" aria-selected=\"false\">cpp</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-2\" aria-selected=\"false\">python</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-3\" aria-selected=\"false\">go</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-192-4\" aria-selected=\"false\">javascript</button> <div class=\"vp-code-tab active\" id=\"codetab-192-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">java</div> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 记录「路径」</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 「路径」中的元素会被标记为 true，避免重复使用</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        boolean</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> boolean</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">boolean</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track));</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (used[i]) {</span> <div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div> <svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path> <div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div> <div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div> <img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-192-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">cpp</div> <div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;vector&gt;</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">#include</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\"> &lt;list&gt;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; res;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">permute</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::list&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; track;</span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 记录「路径」</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::vector&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"> // 「路径」中的元素会被标记为 true，避免重复使用</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">private:</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 路径：记录在 track 中</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 结束条件：nums 中的元素全都在 track 中出现</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">const</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">list</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">bool</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">&amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 触发结束条件</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()) {</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">begin</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(), </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">end</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">()));</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(); i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push_back</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i]);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track, used);</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop_back</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-192-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">python</div> <div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = []</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 主函数，输入一组不重复的数字，返回它们的全排列</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录「路径」</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        track = []</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 「路径」中的元素会被标记为 true，避免重复使用</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        used = [</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] * </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        </span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 路径：记录在 track 中</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 结束条件：nums 中的元素全都在 track 中出现</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 触发结束条件</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(track) == </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums):</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res.append(track.copy())</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> i </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">in</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> range</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums)):</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 排除不合法的选择</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span><div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> used[i]: </span> <div class=\"tooltip\" style=\"border-bottom:1px dotted white;\"><svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg><div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div></div> <svg width=\"16\" height=\"16\" viewbox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path></svg> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6708 8.65806C11.3319 8.9916 11.0716 9.36278 10.8886 9.77172C10.7105 10.1792 10.621 10.6219 10.621 11.1009V12.7012C10.621 12.8807 10.5872 13.0503 10.5189 13.2091C10.4513 13.3661 10.3586 13.5038 10.2407 13.6213C10.1228 13.7388 9.98464 13.8311 9.82723 13.8984C9.66806 13.9663 9.49806 14 9.31823 14H7.71205C7.53223 14 7.36223 13.9663 7.20306 13.8984C7.04564 13.8311 6.90753 13.7388 6.78961 13.6213C6.67168 13.5038 6.57895 13.3661 6.51141 13.2091C6.44311 13.0503 6.40927 12.8807 6.40927 12.7012V11.1009C6.40927 10.622 6.31772 10.1795 6.13553 9.77209C5.95683 9.36336 5.69832 8.99156 5.35953 8.65806C4.92468 8.22903 4.58896 7.75003 4.35361 7.22134C4.11756 6.69107 4 6.11672 4 5.49953C4 5.08664 4.05342 4.68802 4.16048 4.30397C4.26728 3.92089 4.41907 3.56286 4.61595 3.23018C4.81257 2.89377 5.04777 2.58911 5.32146 2.31641C5.59503 2.04383 5.89858 1.80953 6.23195 1.61364C6.56979 1.41764 6.93146 1.2662 7.31578 1.15983C7.70106 1.0532 8.10094 1 8.51514 1C8.92934 1 9.32923 1.0532 9.71451 1.15983C10.0988 1.2662 10.458 1.41739 10.7918 1.61351C11.1294 1.80938 11.4351 2.0437 11.7088 2.31641C11.9825 2.5891 12.2177 2.89376 12.4143 3.23016C12.6112 3.56285 12.763 3.92088 12.8698 4.30397C12.9769 4.68802 13.0303 5.08664 13.0303 5.49953C13.0303 6.11672 12.9127 6.69107 12.6767 7.22134C12.4413 7.75003 12.1056 8.22903 11.6708 8.65806ZM9.62162 10.5H7.40867V12.7012C7.40867 12.7823 7.4372 12.8512 7.49888 12.9127C7.56058 12.9741 7.63007 13.0028 7.71205 13.0028H9.31823C9.40022 13.0028 9.46971 12.9741 9.5314 12.9127C9.59309 12.8512 9.62162 12.7823 9.62162 12.7012V10.5Z\" fill=\"#FFCC00\"></path> <div class=\"tooltiptext\" style=\"background-color:white;color:black;bottom:100%;margin-left:-200px;\"><div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div></div> <div class=\"img-content\"><img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe></div> <img src=\"/algo/images/backtracking/6.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                # nums[i] 已经在 track 中，跳过</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.append(nums[i])</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">True</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 进入下一层决策树</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.backtrack(nums, track, used)</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            # 取消选择</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            track.pop()</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            used[i] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">False</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-192-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">go</div> <div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) [][]</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := [][]</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">{}</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 路径：记录在 track 中</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 结束条件：nums 中的元素全都在 track 中出现</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">bool</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *[][]</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 触发结束条件</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) == </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        temp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">make</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([]</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">))</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        copy</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">temp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">); </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++ {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 排除不合法的选择</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // nums[i] 已经在 track 中，跳过</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            continue</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">append</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">])</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 进入下一层决策树</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 取消选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[:</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">len</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)-</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-192-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">javascript</div> <div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> permute</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 主函数，输入一组不重复的数字，返回它们的全排列</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录「路径」</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = [];</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 「路径」中的元素会被标记为 true，避免重复使用</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">Array</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">).</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fill</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // @visualize status(track)</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    function</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 路径：记录在 track 中</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 选择列表：nums 中不存在于 track 的那些元素（used[i] 为 false）</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 结束条件：nums 中的元素全都在 track 中出现</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 触发结束条件</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">([...</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &lt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 排除不合法的选择</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">                // nums[i] 已经在 track 中，跳过</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">                continue</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize choose(nums[i])</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">push</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">true</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 进入下一层决策树</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">            backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // 取消选择</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">            // @visualize unchoose()</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">pop</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">] = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">false</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">used</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>抽出递归部分，应该能看出这个算法可以抽象成一棵多叉树：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 多叉树遍历函数</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> child</span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">children</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(child);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p><strong>你应该已经感觉到了，「树」结构是一个非常有效的数据结构。把问题抽象成树结构，然后用代码去遍历这棵树，就是递归的本质</strong>。</p> <strong>你应该已经感觉到了，「树」结构是一个非常有效的数据结构。把问题抽象成树结构，然后用代码去遍历这棵树，就是递归的本质</strong> <h2 id=\"编写递归的两种思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BC%96%E5%86%99%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>编写递归的两种思维模式</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%BC%96%E5%86%99%E9%80%92%E5%BD%92%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>编写递归的两种思维模式</span></a> <span>编写递归的两种思维模式</span> <p>现在你已经知道了一切递归算法都要抽象成树结构来理解，接下来要更进一步：如果你想用递归算法来求解一个问题，应该怎么写代码呢？</p> <p>其实很简单，编写递归算法只可能有两种思维模式，都尝试套用一下，必然有一种能写出来：</p> <p>一种是「遍历」的思维模式，另一种是「分解问题」的思维模式。</p> <p>上面讲的两道例题中，它们虽然都抽象成了一棵递归树，但斐波那契数列使用的是「分解问题」的思维模式求解，全排列使用的是「遍历」的思维模式求解。</p> <h3 id=\"分解问题的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%86%E8%A7%A3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>分解问题的思维模式</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%88%86%E8%A7%A3%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>分解问题的思维模式</span></a> <span>分解问题的思维模式</span> <p>你看斐波那契数列问题，递归树上的每个节点，其实就是一个子问题的解。<code>fib(5)</code> 是怎么算出来的？是根节点 <code>fib(5)</code> 去问左右子节点 <code>fib(4)</code> 和 <code>fib(3)</code> 的值，然后相加得到的：</p> <code>fib(5)</code> <code>fib(5)</code> <code>fib(4)</code> <code>fib(3)</code> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_mydata-fib\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_mydata-fib\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <p>这里面就存在一个分解问题的过程：把规模较大的问题 <code>fib(5)</code> 分解成规模较小的问题 <code>fib(4)</code> 和 <code>fib(3)</code>，然后通过子问题的解得到原问题的解，我们可以称这种思维模式为「分解问题」。</p> <code>fib(5)</code> <code>fib(4)</code> <code>fib(3)</code> <div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「分解问题」的思维模式来写递归算法，那么这个递归函数一定要有一个清晰的定义，说明这个函数参数的含义是什么，返回什么结果</strong>。</p><p>这样你才能利用这个定义来计算子问题，反推原问题的解。</p></div> <p class=\"hint-container-title\">划重点</p> <p><strong>如果你想用「分解问题」的思维模式来写递归算法，那么这个递归函数一定要有一个清晰的定义，说明这个函数参数的含义是什么，返回什么结果</strong>。</p> <strong>如果你想用「分解问题」的思维模式来写递归算法，那么这个递归函数一定要有一个清晰的定义，说明这个函数参数的含义是什么，返回什么结果</strong> <p>这样你才能利用这个定义来计算子问题，反推原问题的解。</p> <p>比如斐波那契数列的递归函数 <code>fib</code> 就有一个清晰的定义，且算法就在利用这个定义：</p> <code>fib</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个非负整数 n，返回斐波那契数列中的第 n 个数</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (n &lt; </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算前两个斐波那契数（子问题）</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> fib_n_2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">fib</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(n - </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 通过子问题的解，计算原问题的解</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> fib_n_1 + fib_n_2;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>再来一个简单的例题吧，比如计算二叉树的最大深度，力扣第 104 题「<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a>」：</p> <a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树的最大深度</a> <details class=\"hint-container details\" open><summary><strong>104. 二叉树的最大深度</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟢</summary><div><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p>\n\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n\n\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"></p>\n\n\n\n<pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\">力扣 104. 二叉树的最大深度</a>。</strong></details> <summary><strong>104. 二叉树的最大深度</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟢</summary> <strong>104. 二叉树的最大深度</strong> <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span> <a target=\"_blank\" href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> <span><a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> <a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> <div><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p>\n\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n\n\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"></p>\n\n\n\n<pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div> <p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p> <code>root</code> <p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p> <strong>最大深度</strong> <p><strong>示例 1：</strong></p> <strong>示例 1：</strong> <p><img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"></p> <img alt=\"\" src=\"/algo/images/lc/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\"> <pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre> <b>输入：</b> <b>输出：</b> <p><strong>示例 2：</strong></p> <strong>示例 2：</strong> <pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre> <b>输入：</b> <b>输出：</b> <p><strong>提示：</strong></p> <strong>提示：</strong> <ul>\n\t<li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul> <li>树中节点的数量在 <code>[0, 10<sup>4</sup>]</code> 区间内。</li> <code>[0, 10<sup>4</sup>]</code> <sup>4</sup> <li><code>-100 &lt;= Node.val &lt;= 100</code></li> <code>-100 &lt;= Node.val &lt;= 100</code> <strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\">力扣 104. 二叉树的最大深度</a>。</strong> <a href=\"https://leetcode.cn/problems/maximum-depth-of-binary-tree/\" target=\"_blank\">力扣 104. 二叉树的最大深度</a> <p>这道题可以用分解问题的思路求解：想计算整棵树的最大深度，可以先计算左右子树的最大深度，取两者的最大值加一，就是整棵树的最大深度。</p> <p>那么我们可以给 <code>maxDepth</code> 函数一个明确的定义：输入一棵二叉树的节点，函数返回以这个节点为根的二叉树的最大深度。</p> <code>maxDepth</code> <p>然后，就可以得到一个类似斐波那契的递归公式：</p> <p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p> <span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics></math> <semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation></semantics> <mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow></mrow> <mi>m</mi> <mi>a</mi> <mi>x</mi> <mi>D</mi> <mi>e</mi> <mi>p</mi> <mi>t</mi> <mi>h</mi> <mo stretchy=\"false\">(</mo> <mi>r</mi> <mi>o</mi> <mi>o</mi> <mi>t</mi> <mo stretchy=\"false\">)</mo> <mo>=</mo> <mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable></mrow> <mo fence=\"true\">{</mo> <mtable rowspacing=\"0.36em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr></mtable> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle> <mn>0</mn> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow></mstyle> <mrow><mtext>if </mtext><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow> <mtext>if </mtext> <mi>r</mi> <mi>o</mi> <mi>o</mi> <mi>t</mi> <mo>=</mo> <mi>n</mi> <mi>u</mi> <mi>l</mi> <mi>l</mi> <mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd></mtr> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow></mstyle> <mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>D</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow> <mi>m</mi> <mi>a</mi> <mi>x</mi> <mo stretchy=\"false\">(</mo> <mi>m</mi> <mi>a</mi> <mi>x</mi> <mi>D</mi> <mi>e</mi> <mi>p</mi> <mi>t</mi> <mi>h</mi> <mo stretchy=\"false\">(</mo> <mi>r</mi> <mi>o</mi> <mi>o</mi> <mi>t</mi> <mi mathvariant=\"normal\">.</mi> <mi>l</mi> <mi>e</mi> <mi>f</mi> <mi>t</mi> <mo stretchy=\"false\">)</mo> <mo separator=\"true\">,</mo> <mi>m</mi> <mi>a</mi> <mi>x</mi> <mi>D</mi> <mi>e</mi> <mi>p</mi> <mi>t</mi> <mi>h</mi> <mo stretchy=\"false\">(</mo> <mi>r</mi> <mi>o</mi> <mi>o</mi> <mi>t</mi> <mi mathvariant=\"normal\">.</mi> <mi>r</mi> <mi>i</mi> <mi>g</mi> <mi>h</mi> <mi>t</mi> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <mo>+</mo> <mn>1</mn> <mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle></mtd> <mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>otherwise</mtext></mstyle> <mtext>otherwise</mtext> <annotation encoding=\"application/x-tex\">maxDepth(root) = \\begin{cases} 0 &amp; \\text{if } root = null \\\\ max(maxDepth(root.left), maxDepth(root.right)) + 1 &amp; \\text{otherwise} \\end{cases} </annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\">ma</span> <span class=\"mord mathnormal\">x</span> <span class=\"mord mathnormal\">De</span> <span class=\"mord mathnormal\">pt</span> <span class=\"mord mathnormal\">h</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">roo</span> <span class=\"mord mathnormal\">t</span> <span class=\"mclose\">)</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"base\"><span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span> <span class=\"strut\" style=\"height:3em;vertical-align:-1.25em;\"></span> <span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span> <span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span> <span class=\"delimsizing size4\">{</span> <span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span> <span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span> <span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span></span> <span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord\">0</span></span> <span class=\"mord\">0</span> <span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">De</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span> <span class=\"mord mathnormal\">ma</span> <span class=\"mord mathnormal\">x</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">ma</span> <span class=\"mord mathnormal\">x</span> <span class=\"mord mathnormal\">De</span> <span class=\"mord mathnormal\">pt</span> <span class=\"mord mathnormal\">h</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">roo</span> <span class=\"mord mathnormal\">t</span> <span class=\"mord\">.</span> <span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span> <span class=\"mord mathnormal\">e</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span> <span class=\"mord mathnormal\">t</span> <span class=\"mclose\">)</span> <span class=\"mpunct\">,</span> <span class=\"mspace\" style=\"margin-right:0.1667em;\"></span> <span class=\"mord mathnormal\">ma</span> <span class=\"mord mathnormal\">x</span> <span class=\"mord mathnormal\">De</span> <span class=\"mord mathnormal\">pt</span> <span class=\"mord mathnormal\">h</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">roo</span> <span class=\"mord mathnormal\">t</span> <span class=\"mord\">.</span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span> <span class=\"mord mathnormal\">i</span> <span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span> <span class=\"mord mathnormal\">h</span> <span class=\"mord mathnormal\">t</span> <span class=\"mclose\">))</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mbin\">+</span> <span class=\"mspace\" style=\"margin-right:0.2222em;\"></span> <span class=\"mord\">1</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:1.19em;\"><span></span></span> <span></span> <span class=\"arraycolsep\" style=\"width:1em;\"></span> <span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span> <span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span><span class=\"vlist-s\">​</span></span> <span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span></span> <span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">if </span></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span> <span class=\"mord text\"><span class=\"mord\">if </span></span> <span class=\"mord\">if </span> <span class=\"mord mathnormal\">roo</span> <span class=\"mord mathnormal\">t</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mord mathnormal\">n</span> <span class=\"mord mathnormal\">u</span> <span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span> <span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span></span> <span class=\"pstrut\" style=\"height:3.008em;\"></span> <span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">otherwise</span></span></span> <span class=\"mord text\"><span class=\"mord\">otherwise</span></span> <span class=\"mord\">otherwise</span> <span class=\"vlist-s\">​</span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span> <span class=\"vlist\" style=\"height:1.19em;\"><span></span></span> <span></span> <span class=\"mclose nulldelimiter\"></span> <div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-267-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-267-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-267-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div> <div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-267-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-4\" aria-selected=\"false\">javascript</button></div> <button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-267-0\" aria-selected=\"true\">java</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-1\" aria-selected=\"false\">cpp</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-2\" aria-selected=\"false\">python</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-3\" aria-selected=\"false\">go</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-267-4\" aria-selected=\"false\">javascript</button> <div class=\"vp-code-tab active\" id=\"codetab-267-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">java</div> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">        int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-267-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">cpp</div> <div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 利用定义，计算左右子树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> leftMax = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> rightMax = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 根据左右子树的最大深度推出原二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 整棵树的最大深度等于左右子树的最大深度取最大值，</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 然后再加上根节点自己</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-267-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">python</div> <div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 分解问题的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 利用定义，计算左右子树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        leftMax = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.left)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        rightMax = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.maxDepth(root.right)</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 根据左右子树的最大深度推出原二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 整棵树的最大深度等于左右子树的最大深度取最大值，</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 然后再加上根节点自己</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(leftMax, rightMax)</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-267-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">go</div> <div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    leftMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    rightMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-267-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">javascript</div> <div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 分解问题的思路</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：输入一个节点，返回以该节点为根的二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 利用定义，计算左右子树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> leftMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> rightMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 根据左右子树的最大深度推出原二叉树的最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 整棵树的最大深度等于左右子树的最大深度取最大值，</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 然后再加上根节点自己</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\"> 1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">leftMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">rightMax</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构，其中父节点的值是左右子节点的较大值加一。</p> <div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>maxDepth</code> 的递归树，当函数返回时，递归树节点会显示递归函数的返回值，最终所有节点的值都计算出来了，根节点的值就是我们想要的答案：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-divide\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div> <p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>maxDepth</code> 的递归树，当函数返回时，递归树节点会显示递归函数的返回值，最终所有节点的值都计算出来了，根节点的值就是我们想要的答案：</p> <code type=\"click\">if (root === null)</code> <code>maxDepth</code> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-divide\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_maximum-depth-of-binary-tree-divide\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-divide\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <p>现在你应该理解了什么叫做「分解问题」的思路了，下面来看另一种编写递归算法的思路。</p> <h3 id=\"遍历的思维模式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%81%8D%E5%8E%86%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>遍历的思维模式</span></a></h3> <a class=\"header-anchor\" href=\"#%E9%81%8D%E5%8E%86%E7%9A%84%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F\"><span>遍历的思维模式</span></a> <span>遍历的思维模式</span> <p>再结合可视化面板看全排列问题：</p> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_permutations\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_permutations\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <p>递归树上的节点并没有一个明确的含义，只是记录了之前所做的一些选择。所有全排列，就是所有叶子节点上的结果。这种思维模式称为「遍历」。</p> <div class=\"hint-container important\"><p class=\"hint-container-title\">划重点</p><p><strong>如果你想用「遍历」的思维模式来写递归算法，那么你需要一个无返回值的遍历函数，在遍历的过程中收集结果</strong>。</p></div> <p class=\"hint-container-title\">划重点</p> <p><strong>如果你想用「遍历」的思维模式来写递归算法，那么你需要一个无返回值的遍历函数，在遍历的过程中收集结果</strong>。</p> <strong>如果你想用「遍历」的思维模式来写递归算法，那么你需要一个无返回值的遍历函数，在遍历的过程中收集结果</strong> <p>比如全排列问题，目前你不需要完全理解全排列的代码，只需注意 <code>backtrack</code> 函数没有返回值，也没有一个明确的定义，它就类似 for 循环一样，单纯起到遍历递归树，收集叶子节点上的结果的作用：</p> <code>backtrack</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全排列算法主要结构</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 全局变量，存储 backtrack 函数的遍历状态</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt;&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 递归树遍历函数</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;Integer&gt; track) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">size</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">() == </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 到达叶子节点，收集结果</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> LinkedList</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;(track));</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 做选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">add</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums[i]);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(nums, track);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 撤销选择</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        track</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">removeLast</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">();</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>有没有感觉出「遍历」和「分解问题」两种思维模式的区别？</p> <p>再来看力扣第 104 题「二叉树的最大深度」，我们也可以用「遍历」的思维模式来写解法，用标准的二叉树遍历函数 <code>traverse</code> 来遍历整棵树，在遍历的过程更新最大深度，这样当遍历完所有节点时，必然可以求出整棵树的最大深度：</p> <code>traverse</code> <div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-318-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-318-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-318-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div> <div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-318-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-4\" aria-selected=\"false\">javascript</button></div> <button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-318-0\" aria-selected=\"true\">java</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-1\" aria-selected=\"false\">cpp</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-2\" aria-selected=\"false\">python</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-3\" aria-selected=\"false\">go</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-318-4\" aria-selected=\"false\">javascript</button> <div class=\"vp-code-tab active\" id=\"codetab-318-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">java</div> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    public</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-318-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">cpp</div> <div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> depth = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">public:</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(root);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> res;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">*</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (root == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth++;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nullptr</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">            res = </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">std</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">::</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(res, depth);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">-&gt;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        depth--;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-318-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">python</div> <div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\"># 遍历的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> Solution</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> __init__</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">):</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录遍历到的节点的深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode) -&gt; </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root)</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    # 遍历二叉树</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: TreeNode):</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 前序遍历位置（进入节点）增加深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth += </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 遍历到叶子节点时记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.left </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> and</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> root.right </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">is</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\"> None</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">:</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">            self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.res, </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth)</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.left)</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.traverse(root.right)</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        # 后序遍历位置（离开节点）减少深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">        self</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.depth -= </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-318-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">go</div> <div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">    res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> := </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    </span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, &amp;</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历二叉树</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TreeNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> *</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 前序遍历位置（进入节点）增加深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历到叶子节点时记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> == </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">nil</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        *</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(*</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, *</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 后序遍历位置（离开节点）减少深度</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    *</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">a</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">b</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> a</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> b</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-318-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">javascript</div> <div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 遍历的思路</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> maxDepth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录遍历到的节点的深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    let</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 遍历二叉树</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">    var</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">            return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 前序遍历位置（进入节点）增加深度</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">++;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 遍历到叶子节点时记录最大深度</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> &amp;&amp; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> === </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">            res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">Math</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">max</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        }</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">node</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">right</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // 后序遍历位置（离开节点）减少深度</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">        depth</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">--;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    };</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    traverse</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    return</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> res</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>对于这道题，我也配了一个可视化面板来展现递归函数的执行过程，其中橙色的是真实二叉树结构，粉色的是抽象出来的递归树结构。其实 <code>traverse</code> 就是一个普通的二叉树遍历函数，只不过它会在遍历的过程中记录当前深度，并在遍历到叶子节点时更新最大深度。</p> <code>traverse</code> <div class=\"viz-template\"><!--[--><p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>traverse</code> 的递归过程：</p><!--]--><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-traverse\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div> <p>你可以多次点击 <code type=\"click\">if (root === null)</code> 这一行代码，观察 <code>traverse</code> 的递归过程：</p> <code type=\"click\">if (root === null)</code> <code>traverse</code> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_maximum-depth-of-binary-tree-traverse\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_maximum-depth-of-binary-tree-traverse\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_maximum-depth-of-binary-tree-traverse\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <h2 id=\"总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%80%BB%E7%BB%93\"><span>总结</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%80%BB%E7%BB%93\"><span>总结</span></a> <span>总结</span> <p>本文先用斐波那契数列和全排列问题的递归可视化，论证一定要从「树」的角度理解递归算法。</p> <p>然后总结编写递归算法的两种思维模式：「分解问题」的思路和「遍历」的思路。文中给出的斐波那契数列的解法是「分解问题」的思路，全排列的解法是「遍历」的思路。</p> <p>有些题目可以同时运用这两种思维模式，比如力扣第 104 题「二叉树的最大深度」，既可以用「分解问题」的思路，也可以用「遍历」的思路来求解，两种解法效率相同，但是代码看起来差异很大。</p> <p><strong>讲上面这些，最终目的还是希望你能够参考以下步骤，运用自如地写出递归算法</strong>：</p> <strong>讲上面这些，最终目的还是希望你能够参考以下步骤，运用自如地写出递归算法</strong> <p>1、首先，这个问题是否可以抽象成一棵树结构？如果可以，那么就要用递归算法了。</p> <p>2、如果要用递归算法，那么就思考「遍历」和「分解问题」这两种思维模式，看看哪种更适合这个问题。</p> <p>3、如果用「分解问题」的思维模式，那么一定要写清楚这个递归函数的定义是什么，然后利用这个定义来分解问题，利用子问题的答案推导原问题的答案；如果用「遍历」的思维模式，那么要用一个无返回值的递归函数，单纯起到遍历递归树，收集目标结果的作用。</p> <p>其实，「分解问题」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划算法</a> 和 <a class=\"route-link\" href=\"/algo/essential-technique/divide-and-conquer/\">分治算法</a>，「遍历」的思维模式就对应着后面要讲解的 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">DFS/回溯算法</a>。</p> <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划算法</a> <a class=\"route-link\" href=\"/algo/essential-technique/divide-and-conquer/\">分治算法</a> <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">DFS/回溯算法</a> <p>在 <a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树习题章节</a>，我专门把所有二叉树相关的题目都用这两种思维模式来解一遍。你只要把二叉树玩明白了，这些递归算法就都玩明白了，真的很简单。</p> <a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树习题章节</a> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/essential-technique/binary-tree-summary/\" aria-label=\"二叉树系列算法核心纲领\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->二叉树系列算法核心纲领</div></a><a class=\"route-link auto-link next\" href=\"/algo/essential-technique/dynamic-programming-framework/\" aria-label=\"动态规划解题套路框架\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">动态规划解题套路框架<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/essential-technique/binary-tree-summary/\" aria-label=\"二叉树系列算法核心纲领\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->二叉树系列算法核心纲领</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->二叉树系列算法核心纲领</div> <a class=\"route-link auto-link next\" href=\"/algo/essential-technique/dynamic-programming-framework/\" aria-label=\"动态规划解题套路框架\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">动态规划解题套路框架<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">动态规划解题套路框架<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}