{
    "url": "https://labuladong.online/algo/en/problem-set/binary-tree-divide-ii/",
    "title": "Exercise: Binary Tree Divide and Conquer II | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Exercise: Binary Tree Divide and Conquer II</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2967 words</span><meta property=\"wordCount\" content=\"2967\"></span></div><hr></div> <h1><!---->Exercise: Binary Tree Divide and Conquer II</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2967 words</span><meta property=\"wordCount\" content=\"2967\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2967 words</span><meta property=\"wordCount\" content=\"2967\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 2967 words</span> <meta property=\"wordCount\" content=\"2967\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 100. Same Tree https://leetcode.com/problems/same-tree </h3><h3 tabindex=\"-1\"> 101. Symmetric Tree https://leetcode.com/problems/symmetric-tree </h3><h3 tabindex=\"-1\"> 951. Flip Equivalent Binary Trees https://leetcode.com/problems/flip-equivalent-binary-trees </h3><h3 tabindex=\"-1\"> 124. Binary Tree Maximum Path Sum https://leetcode.com/problems/binary-tree-maximum-path-sum </h3></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a></li></ul></div><h2 id=\"technique-one\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-one\"><span>Technique One</span></a></h2><p>For problems like determining if a binary tree is a mirror image or inverting a binary tree, you can generally use the problem decomposition approach. This means breaking down the problem of the entire tree (the original problem) into problems involving its subtrees (subproblems).</p><h2 id=\"slug_same-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_same-tree\"><span>100. Same Tree</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer\"><span>Algo Visualizer</span></a></h3><h2 id=\"slug_symmetric-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_symmetric-tree\"><span>101. Symmetric Tree</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-1\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-1\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-1\"><span>Algo Visualizer</span></a></h3><h2 id=\"slug_flip-equivalent-binary-trees\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_flip-equivalent-binary-trees\"><span>951. Flip Equivalent Binary Trees</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-2\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-2\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-2\"><span>Algo Visualizer</span></a></h3><h2 class=\"hidden-for-toc\" id=\"technique-two\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-two\"><span>Technique Two</span></a></h2><h2 id=\"slug_binary-tree-maximum-path-sum\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_binary-tree-maximum-path-sum\"><span>124. Binary Tree Maximum Path Sum</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-3\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-3\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-3\"><span>Algo Visualizer</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 100. Same Tree https://leetcode.com/problems/same-tree </h3><h3 tabindex=\"-1\"> 101. Symmetric Tree https://leetcode.com/problems/symmetric-tree </h3><h3 tabindex=\"-1\"> 951. Flip Equivalent Binary Trees https://leetcode.com/problems/flip-equivalent-binary-trees </h3><h3 tabindex=\"-1\"> 124. Binary Tree Maximum Path Sum https://leetcode.com/problems/binary-tree-maximum-path-sum </h3></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a></li></ul></div><h2 id=\"technique-one\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-one\"><span>Technique One</span></a></h2><p>For problems like determining if a binary tree is a mirror image or inverting a binary tree, you can generally use the problem decomposition approach. This means breaking down the problem of the entire tree (the original problem) into problems involving its subtrees (subproblems).</p><h2 id=\"slug_same-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_same-tree\"><span>100. Same Tree</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer\"><span>Algo Visualizer</span></a></h3><h2 id=\"slug_symmetric-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_symmetric-tree\"><span>101. Symmetric Tree</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-1\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-1\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-1\"><span>Algo Visualizer</span></a></h3><h2 id=\"slug_flip-equivalent-binary-trees\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_flip-equivalent-binary-trees\"><span>951. Flip Equivalent Binary Trees</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-2\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-2\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-2\"><span>Algo Visualizer</span></a></h3><h2 class=\"hidden-for-toc\" id=\"technique-two\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-two\"><span>Technique Two</span></a></h2><h2 id=\"slug_binary-tree-maximum-path-sum\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_binary-tree-maximum-path-sum\"><span>124. Binary Tree Maximum Path Sum</span></a></h2><h3 class=\"hidden-for-toc\" id=\"thoughts-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-3\"><span>Thoughts</span></a></h3><h3 class=\"hidden-for-toc\" id=\"solution-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-3\"><span>Solution</span></a></h3><h3 class=\"hidden-for-toc\" id=\"algo-visualizer-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-3\"><span>Algo Visualizer</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 100. Same Tree https://leetcode.com/problems/same-tree </h3><h3 tabindex=\"-1\"> 101. Symmetric Tree https://leetcode.com/problems/symmetric-tree </h3><h3 tabindex=\"-1\"> 951. Flip Equivalent Binary Trees https://leetcode.com/problems/flip-equivalent-binary-trees </h3><h3 tabindex=\"-1\"> 124. Binary Tree Maximum Path Sum https://leetcode.com/problems/binary-tree-maximum-path-sum </h3></div> <h3 tabindex=\"-1\"> 100. Same Tree https://leetcode.com/problems/same-tree </h3> <h3 tabindex=\"-1\"> 101. Symmetric Tree https://leetcode.com/problems/symmetric-tree </h3> <h3 tabindex=\"-1\"> 951. Flip Equivalent Binary Trees https://leetcode.com/problems/flip-equivalent-binary-trees </h3> <h3 tabindex=\"-1\"> 124. Binary Tree Maximum Path Sum https://leetcode.com/problems/binary-tree-maximum-path-sum </h3> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-traverse-basic/\">Basics of Binary Tree Traversal</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure/binary-tree-part2/\">Binary Tree Principles (Construction)</a> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Principles (Summary)</a> <h2 id=\"technique-one\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-one\"><span>Technique One</span></a></h2> <a class=\"header-anchor\" href=\"#technique-one\"><span>Technique One</span></a> <span>Technique One</span> <p>For problems like determining if a binary tree is a mirror image or inverting a binary tree, you can generally use the problem decomposition approach. This means breaking down the problem of the entire tree (the original problem) into problems involving its subtrees (subproblems).</p> <h2 id=\"slug_same-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_same-tree\"><span>100. Same Tree</span></a></h2> <a class=\"header-anchor\" href=\"#slug_same-tree\"><span>100. Same Tree</span></a> <span>100. Same Tree</span> <h3 class=\"hidden-for-toc\" id=\"thoughts\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts\"><span>Thoughts</span></a></h3> <a class=\"header-anchor\" href=\"#thoughts\"><span>Thoughts</span></a> <span>Thoughts</span> <h3 class=\"hidden-for-toc\" id=\"solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution\"><span>Solution</span></a></h3> <a class=\"header-anchor\" href=\"#solution\"><span>Solution</span></a> <span>Solution</span> <h3 class=\"hidden-for-toc\" id=\"algo-visualizer\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer\"><span>Algo Visualizer</span></a></h3> <a class=\"header-anchor\" href=\"#algo-visualizer\"><span>Algo Visualizer</span></a> <span>Algo Visualizer</span> <h2 id=\"slug_symmetric-tree\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_symmetric-tree\"><span>101. Symmetric Tree</span></a></h2> <a class=\"header-anchor\" href=\"#slug_symmetric-tree\"><span>101. Symmetric Tree</span></a> <span>101. Symmetric Tree</span> <h3 class=\"hidden-for-toc\" id=\"thoughts-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-1\"><span>Thoughts</span></a></h3> <a class=\"header-anchor\" href=\"#thoughts-1\"><span>Thoughts</span></a> <span>Thoughts</span> <h3 class=\"hidden-for-toc\" id=\"solution-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-1\"><span>Solution</span></a></h3> <a class=\"header-anchor\" href=\"#solution-1\"><span>Solution</span></a> <span>Solution</span> <h3 class=\"hidden-for-toc\" id=\"algo-visualizer-1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-1\"><span>Algo Visualizer</span></a></h3> <a class=\"header-anchor\" href=\"#algo-visualizer-1\"><span>Algo Visualizer</span></a> <span>Algo Visualizer</span> <h2 id=\"slug_flip-equivalent-binary-trees\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_flip-equivalent-binary-trees\"><span>951. Flip Equivalent Binary Trees</span></a></h2> <a class=\"header-anchor\" href=\"#slug_flip-equivalent-binary-trees\"><span>951. Flip Equivalent Binary Trees</span></a> <span>951. Flip Equivalent Binary Trees</span> <h3 class=\"hidden-for-toc\" id=\"thoughts-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-2\"><span>Thoughts</span></a></h3> <a class=\"header-anchor\" href=\"#thoughts-2\"><span>Thoughts</span></a> <span>Thoughts</span> <h3 class=\"hidden-for-toc\" id=\"solution-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-2\"><span>Solution</span></a></h3> <a class=\"header-anchor\" href=\"#solution-2\"><span>Solution</span></a> <span>Solution</span> <h3 class=\"hidden-for-toc\" id=\"algo-visualizer-2\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-2\"><span>Algo Visualizer</span></a></h3> <a class=\"header-anchor\" href=\"#algo-visualizer-2\"><span>Algo Visualizer</span></a> <span>Algo Visualizer</span> <h2 class=\"hidden-for-toc\" id=\"technique-two\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#technique-two\"><span>Technique Two</span></a></h2> <a class=\"header-anchor\" href=\"#technique-two\"><span>Technique Two</span></a> <span>Technique Two</span> <h2 id=\"slug_binary-tree-maximum-path-sum\" class=\"hidden-for-toc\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#slug_binary-tree-maximum-path-sum\"><span>124. Binary Tree Maximum Path Sum</span></a></h2> <a class=\"header-anchor\" href=\"#slug_binary-tree-maximum-path-sum\"><span>124. Binary Tree Maximum Path Sum</span></a> <span>124. Binary Tree Maximum Path Sum</span> <h3 class=\"hidden-for-toc\" id=\"thoughts-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thoughts-3\"><span>Thoughts</span></a></h3> <a class=\"header-anchor\" href=\"#thoughts-3\"><span>Thoughts</span></a> <span>Thoughts</span> <h3 class=\"hidden-for-toc\" id=\"solution-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-3\"><span>Solution</span></a></h3> <a class=\"header-anchor\" href=\"#solution-3\"><span>Solution</span></a> <span>Solution</span> <h3 class=\"hidden-for-toc\" id=\"algo-visualizer-3\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algo-visualizer-3\"><span>Algo Visualizer</span></a></h3> <a class=\"header-anchor\" href=\"#algo-visualizer-3\"><span>Algo Visualizer</span></a> <span>Algo Visualizer</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/problem-set/binary-tree-divide-i/\" aria-label=\"Exercise: Binary Tree Divide and Conquer I\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Exercise: Binary Tree Divide and Conquer I</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/problem-set/binary-tree-combine-two-view/\" aria-label=\"Exercise: Binary Tree Combine Two Views\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Exercise: Binary Tree Combine Two Views<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/problem-set/binary-tree-divide-i/\" aria-label=\"Exercise: Binary Tree Divide and Conquer I\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Exercise: Binary Tree Divide and Conquer I</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Exercise: Binary Tree Divide and Conquer I</div> <a class=\"route-link auto-link next\" href=\"/algo/en/problem-set/binary-tree-combine-two-view/\" aria-label=\"Exercise: Binary Tree Combine Two Views\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Exercise: Binary Tree Combine Two Views<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Exercise: Binary Tree Combine Two Views<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}