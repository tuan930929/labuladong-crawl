{
    "url": "https://labuladong.online/algo/dynamic-programming/subsequence-problem/",
    "title": "动态规划之子序列问题解题模板 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->动态规划之子序列问题解题模板</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2863 字</span><meta property=\"wordCount\" content=\"2863\"></span></div><hr></div> <h1><!---->动态规划之子序列问题解题模板</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2863 字</span><meta property=\"wordCount\" content=\"2863\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2863 字</span><meta property=\"wordCount\" content=\"2863\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 2863 字</span> <meta property=\"wordCount\" content=\"2863\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1312. 让字符串成为回文串的最少插入次数 https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome </h3><h3 tabindex=\"-1\"> 516. 最长回文子序列 https://leetcode.cn/problems/longest-palindromic-subsequence </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a></li></ul></div><p>子序列问题是常见的算法问题，而且并不好解决。</p><p>首先，子序列问题本身就相对子串、子数组更困难一些，因为前者是不连续的序列，而后两者是连续的，就算穷举你都不一定会，更别说求解相关的算法问题了。</p><p>而且，子序列问题很可能涉及到两个字符串，比如前文 <a class=\"route-link\" href=\"/algo/dynamic-programming/longest-common-subsequence/\">最长公共子序列</a>，如果没有一定的处理经验，真的不容易想出来。所以本文就来扒一扒子序列问题的套路，其实就有两种模板，相关问题只要往这两种思路上想，十拿九稳。</p><p>一般来说，这类问题都是让你求一个<strong>最长子序列</strong>，因为最短子序列就是一个字符嘛，没啥可问的。一旦涉及到子序列和最值，那几乎可以肯定，<strong>考察的是动态规划技巧，时间复杂度一般都是 O(n^2)</strong>。</p><p>原因很简单，你想想一个字符串，它的子序列有多少种可能？起码是指数级的吧，这种情况下，不用动态规划技巧，还想怎么着？</p><p>既然要用动态规划，那就要定义 <code>dp</code> 数组，找状态转移关系。我们说的两种思路模板，就是 <code>dp</code> 数组的定义思路。不同的问题可能需要不同的 <code>dp</code> 数组定义来解决。</p><h2 id=\"一、两种思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E3%80%81%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF\"><span>一、两种思路</span></a></h2><h2 class=\"hidden-for-toc\" id=\"二、最长回文子序列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BA%8C%E3%80%81%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97\"><span>二、最长回文子序列</span></a></h2><h2 class=\"hidden-for-toc\" id=\"三、代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%89%E3%80%81%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>三、代码实现</span></a></h2><h2 class=\"hidden-for-toc\" id=\"四、拓展延伸\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9B%9B%E3%80%81%E6%8B%93%E5%B1%95%E5%BB%B6%E4%BC%B8\"><span>四、拓展延伸</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1312. 让字符串成为回文串的最少插入次数 https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome </h3><h3 tabindex=\"-1\"> 516. 最长回文子序列 https://leetcode.cn/problems/longest-palindromic-subsequence </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a></li></ul></div><p>子序列问题是常见的算法问题，而且并不好解决。</p><p>首先，子序列问题本身就相对子串、子数组更困难一些，因为前者是不连续的序列，而后两者是连续的，就算穷举你都不一定会，更别说求解相关的算法问题了。</p><p>而且，子序列问题很可能涉及到两个字符串，比如前文 <a class=\"route-link\" href=\"/algo/dynamic-programming/longest-common-subsequence/\">最长公共子序列</a>，如果没有一定的处理经验，真的不容易想出来。所以本文就来扒一扒子序列问题的套路，其实就有两种模板，相关问题只要往这两种思路上想，十拿九稳。</p><p>一般来说，这类问题都是让你求一个<strong>最长子序列</strong>，因为最短子序列就是一个字符嘛，没啥可问的。一旦涉及到子序列和最值，那几乎可以肯定，<strong>考察的是动态规划技巧，时间复杂度一般都是 O(n^2)</strong>。</p><p>原因很简单，你想想一个字符串，它的子序列有多少种可能？起码是指数级的吧，这种情况下，不用动态规划技巧，还想怎么着？</p><p>既然要用动态规划，那就要定义 <code>dp</code> 数组，找状态转移关系。我们说的两种思路模板，就是 <code>dp</code> 数组的定义思路。不同的问题可能需要不同的 <code>dp</code> 数组定义来解决。</p><h2 id=\"一、两种思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E3%80%81%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF\"><span>一、两种思路</span></a></h2><h2 class=\"hidden-for-toc\" id=\"二、最长回文子序列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BA%8C%E3%80%81%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97\"><span>二、最长回文子序列</span></a></h2><h2 class=\"hidden-for-toc\" id=\"三、代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%89%E3%80%81%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>三、代码实现</span></a></h2><h2 class=\"hidden-for-toc\" id=\"四、拓展延伸\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9B%9B%E3%80%81%E6%8B%93%E5%B1%95%E5%BB%B6%E4%BC%B8\"><span>四、拓展延伸</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 1312. 让字符串成为回文串的最少插入次数 https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome </h3><h3 tabindex=\"-1\"> 516. 最长回文子序列 https://leetcode.cn/problems/longest-palindromic-subsequence </h3></div> <h3 tabindex=\"-1\"> 1312. 让字符串成为回文串的最少插入次数 https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome </h3> <h3 tabindex=\"-1\"> 516. 最长回文子序列 https://leetcode.cn/problems/longest-palindromic-subsequence </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div> <p class=\"hint-container-title\">本文讲解的例题</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">力扣</th> <th style=\"text-align:center;\">难度</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td><td style=\"text-align:center;\">🔴</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a></td> <a href=\"https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. Minimum Insertion Steps to Make a String Palindrome</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a></td> <a href=\"https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/\" target=\"_blank\" rel=\"noopener noreferrer\">1312. 让字符串成为回文串的最少插入次数</a> <td style=\"text-align:center;\">🔴</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a></td> <a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. Longest Palindromic Subsequence</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a></td> <a href=\"https://leetcode.cn/problems/longest-palindromic-subsequence/\" target=\"_blank\" rel=\"noopener noreferrer\">516. 最长回文子序列</a> <td style=\"text-align:center;\">🟠</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a></li></ul> <li><a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a></li> <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> <p>子序列问题是常见的算法问题，而且并不好解决。</p> <p>首先，子序列问题本身就相对子串、子数组更困难一些，因为前者是不连续的序列，而后两者是连续的，就算穷举你都不一定会，更别说求解相关的算法问题了。</p> <p>而且，子序列问题很可能涉及到两个字符串，比如前文 <a class=\"route-link\" href=\"/algo/dynamic-programming/longest-common-subsequence/\">最长公共子序列</a>，如果没有一定的处理经验，真的不容易想出来。所以本文就来扒一扒子序列问题的套路，其实就有两种模板，相关问题只要往这两种思路上想，十拿九稳。</p> <a class=\"route-link\" href=\"/algo/dynamic-programming/longest-common-subsequence/\">最长公共子序列</a> <p>一般来说，这类问题都是让你求一个<strong>最长子序列</strong>，因为最短子序列就是一个字符嘛，没啥可问的。一旦涉及到子序列和最值，那几乎可以肯定，<strong>考察的是动态规划技巧，时间复杂度一般都是 O(n^2)</strong>。</p> <strong>最长子序列</strong> <strong>考察的是动态规划技巧，时间复杂度一般都是 O(n^2)</strong> <p>原因很简单，你想想一个字符串，它的子序列有多少种可能？起码是指数级的吧，这种情况下，不用动态规划技巧，还想怎么着？</p> <p>既然要用动态规划，那就要定义 <code>dp</code> 数组，找状态转移关系。我们说的两种思路模板，就是 <code>dp</code> 数组的定义思路。不同的问题可能需要不同的 <code>dp</code> 数组定义来解决。</p> <code>dp</code> <code>dp</code> <code>dp</code> <h2 id=\"一、两种思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E3%80%81%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF\"><span>一、两种思路</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%B8%80%E3%80%81%E4%B8%A4%E7%A7%8D%E6%80%9D%E8%B7%AF\"><span>一、两种思路</span></a> <span>一、两种思路</span> <h2 class=\"hidden-for-toc\" id=\"二、最长回文子序列\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BA%8C%E3%80%81%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97\"><span>二、最长回文子序列</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%BA%8C%E3%80%81%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97\"><span>二、最长回文子序列</span></a> <span>二、最长回文子序列</span> <h2 class=\"hidden-for-toc\" id=\"三、代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%89%E3%80%81%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>三、代码实现</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%B8%89%E3%80%81%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>三、代码实现</span></a> <span>三、代码实现</span> <h2 class=\"hidden-for-toc\" id=\"四、拓展延伸\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9B%9B%E3%80%81%E6%8B%93%E5%B1%95%E5%BB%B6%E4%BC%B8\"><span>四、拓展延伸</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%9B%9B%E3%80%81%E6%8B%93%E5%B1%95%E5%BB%B6%E4%BC%B8\"><span>四、拓展延伸</span></a> <span>四、拓展延伸</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/dynamic-programming/longest-common-subsequence/\" aria-label=\"经典动态规划：最长公共子序列\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->经典动态规划：最长公共子序列</div></a><a class=\"route-link auto-link next\" href=\"/algo/dynamic-programming/knapsack1/\" aria-label=\"经典动态规划：0-1 背包问题\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">经典动态规划：0-1 背包问题<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/dynamic-programming/longest-common-subsequence/\" aria-label=\"经典动态规划：最长公共子序列\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->经典动态规划：最长公共子序列</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->经典动态规划：最长公共子序列</div> <a class=\"route-link auto-link next\" href=\"/algo/dynamic-programming/knapsack1/\" aria-label=\"经典动态规划：0-1 背包问题\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">经典动态规划：0-1 背包问题<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">经典动态规划：0-1 背包问题<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}