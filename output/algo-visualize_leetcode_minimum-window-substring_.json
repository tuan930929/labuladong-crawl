{
    "url": "https://labuladong.online/algo-visualize/leetcode/minimum-window-substring/",
    "title": "最小覆盖子串 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var minWindow = function(s, t) {\n    // 把 s 转换为字符数组方便可视化\n    s = s.split('');\n\n    let need = new Map();\n    let window = new Map();\n    for (let c of t) {\n        need.set(c, (need.get(c) || 0) + 1);\n    }\n\n    let left = 0, right = 0;\n    // @visualize bind s[left] s[right]\n    let valid = 0;\n    // 记录最小覆盖子串的起始索引及长度\n    let start = 0, len = Number.MAX_VALUE;\n\n    while (right < s.length) {\n        // c 是将移入窗口的字符\n        // @visualize color *s[right] #bc4fa8\n        let c = s[right];\n        // 右移窗口\n        right++;\n        // 进行窗口内数据的一系列更新\n        if (need.has(c)) {\n            window.set(c, (window.get(c) || 0) + 1);\n            if (window.get(c) == need.get(c)) {\n                valid++;\n            }\n        }\n\n        // 判断左侧窗口是否要收缩\n        while (valid == need.size) {\n            // 在这里更新最小覆盖子串\n            if (right - left < len) {\n                start = left;\n                len = right - left;\n            }\n            // d 是将移出窗口的字符\n            let d = s[left];\n            // 左移窗口\n            // @visualize color *s[left] #unset\n            left++;\n            // 进行窗口内数据的一系列更新\n            if (need.has(d)) {\n                if (window.get(d) == need.get(d)) {\n                    valid--;\n                }\n                window.set(d, window.get(d) - 1);\n            }\n        }\n    }\n    // 返回最小覆盖子串\n    return len == Number.MAX_VALUE ? \"\" : s.slice(start, start + len).join('');\n};\n\nlet result = minWindow(\"ADOBECODEBANC\", \"ABC\");\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}