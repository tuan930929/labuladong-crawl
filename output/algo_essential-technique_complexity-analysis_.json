{
    "url": "https://labuladong.online/algo/essential-technique/complexity-analysis/",
    "title": "算法时空复杂度分析实用指南 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->算法时空复杂度分析实用指南</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 7581 字</span><meta property=\"wordCount\" content=\"7581\"></span></div><hr></div> <h1><!---->算法时空复杂度分析实用指南</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 7581 字</span><meta property=\"wordCount\" content=\"7581\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 7581 字</span><meta property=\"wordCount\" content=\"7581\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 7581 字</span> <meta property=\"wordCount\" content=\"7581\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><p>我以前的文章主要都是讲解算法的原理和解题的思维，对时间复杂度和空间复杂度的分析经常一笔带过，主要是基于以下两个原因：</p><p>1、对于偏小白的读者，我希望你集中精力理解算法原理。如果加入太多偏数学的内容，很容易把人劝退。</p><p>2、正确理解常用算法底层原理，是进行复杂度的分析的前提。尤其是递归相关的算法，只有你从树的角度进行思考和分析，才能正确分析其复杂度。</p><p>鉴于现在历史文章已经涵盖了所有常见算法的核心原理，所以我专门写一篇时空复杂度的分析指南，授人以鱼不如授人以渔，教给你一套通用的方法分析任何算法的时空复杂度。</p><p>本文会篇幅较长，会涵盖如下几点：</p><p>1、利用时间复杂度反推解题思路，减少试错时间。</p><p>2、时间都去哪儿了？哪些常见的编码失误会导致算法超时。</p><p>3、Big O 表示法的几个基本特点。</p><p>4、非递归算法中的时间复杂度分析。</p><p>5、数据结构 API 的效率衡量方法（摊还分析）。</p><p>6、递归算法的时间/空间复杂度的分析方法，这部分是重点，我会用动态规划和回溯算法举例。</p><p>在讲解复杂度的概念和具体计算方法之前，我先说一些实战中常见的技巧和容易踩的坑。</p><h2 id=\"借助复杂度反推解题思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%80%9F%E5%8A%A9%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span>借助复杂度反推解题思路</span></a></h2><div class=\"hint-container info\"><p class=\"hint-container-title\">留意数据规模</p><p>不要以为复杂度分析是专门用来难为你的，它其实是来帮你的，它是来偷偷告诉你解题思路的。</p><p><strong>你应该在开始写代码之前就留意题目给的数据规模</strong>，因为复杂度分析可以避免你在错误的思路上浪费时间，有时候它甚至可以直接告诉你这道题用什么算法。</p><p>为啥这样说呢，因为一般题目都会告诉我们测试用例的数据规模有多大，我们可以根据这个数据规模反推这道题能够允许的时间复杂度在什么范围，进一步反推我们应该要用什么算法。</p></div><p>举例来说吧，比如一个题目给你输入一个数组，其长度能够达到 <code>10^6</code> 这个量级，那么我们肯定可以知道这道题的时间复杂度大概要小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，得优化成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 才行。因为如果你写的算法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的，最大的复杂度会达到 <code>10^12</code> 这个量级，在大部分判题系统上都是跑不过去的。</p><p>为了把复杂度控制在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，我们的选择范围就缩小了，可能符合条件的做法是：对数组进行排序处理、前缀和、双指针、一维 dp 等等，从这些思路切入就比较靠谱。像嵌套 for 循环、二维 dp、回溯算法这些思路，基本可以直接排除掉了。</p><p>再举个更直接的例子，如果你发现题目给的数据规模很小，比如数组长度 <code>N</code> 不超过 <code>20</code> 这样的，那么我们可以断定这道题大概率要用暴力穷举算法。</p><p>因为判题平台肯定是尽可能扩大数据规模难为你，它一反常态给这么小的数据规模，肯定是因为最优解就是指数/阶乘级别的复杂度。你放心用 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法</a> 招呼它就行了，不用想别的算法了。</p><p><strong>所以说啊，很多读者看题都不看那个数据规模，上来就闷声写代码，这是不对滴</strong>。你先把题目给的所有信息都考虑进去，再写代码，这样才能少走弯路。</p><h2 id=\"由于编码失误导致复杂度异常\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%B1%E4%BA%8E%E7%BC%96%E7%A0%81%E5%A4%B1%E8%AF%AF%E5%AF%BC%E8%87%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BC%82%E5%B8%B8\"><span>由于编码失误导致复杂度异常</span></a></h2><p>这部分主要总结一下大家（尤其是初学者）在写代码时容易犯的一些编码层面的错误。这些错误会产生预期之外的时间消耗，拖慢你的算法运行，甚至导致超时。</p><h3 id=\"使用了标准输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span>使用了标准输出</span></a></h3><p>在写算法题时，我们可能会用到 <code>print/console.log</code> 函数来打印一些状态，以便调试算法。</p><p>但你准备提交代码时，记得把这些输出语句注释掉，因为标准输出属于 I/O 操作，会很大程度上拖慢你的算法代码运行。</p><h3 id=\"错误地「传值」而非「传引用」\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%94%99%E8%AF%AF%E5%9C%B0%E3%80%8C%E4%BC%A0%E5%80%BC%E3%80%8D%E8%80%8C%E9%9D%9E%E3%80%8C%E4%BC%A0%E5%BC%95%E7%94%A8%E3%80%8D\"><span>错误地「传值」而非「传引用」</span></a></h3><p>比如 C++ 里面，函数参数默认是传值的，比如你传入一个 <code>vector</code> 参数，那么这个数据结构会被完整地复制一份，导致额外的时间和空间消耗。尤其是当这个函数是个递归函数的时候，错误地传值几乎必然导致超时或超内存。</p><p>正确的做法是传引用，比如 <code>vector&lt;int&gt;&amp;</code>，这样就不会产生额外的复制开销。使用其他语言的读者可以自查是否存在类似的问题，一定要搞清楚你的编程语言的参数传递机制。</p><h3 id=\"接口对象的底层实现不明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%8D%E6%98%8E\"><span>接口对象的底层实现不明</span></a></h3><p>这应该算是一个比较刁钻的问题，一般在 Java 这种面向对象的语言出现，出现地比较少，但也必须引起注意。</p><p>Java 中 <code>List</code> 是一个接口，它有很多实现类，比如 <code>ArrayList</code>、<code>LinkedList</code> 等等。如果你学了基础知识章节的 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-implement/\">手把手带你实现动态数组</a> 和 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-implement/\">手把手带你实现双链表</a>，就知道 <code>ArrayList</code> 和 <code>LinkedList</code> 的很多方法复杂度不同，比如 <code>ArrayList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，而 <code>LinkedList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</p><p>那么如果函数参数给你传入一个 <code>List</code> 类型的参数，你敢不敢直接 <code>list.get(i)</code> 进行随机访问？不敢吧。</p><p>这种情况，一般需要自己创建一个 <code>ArrayList</code>，把传入的 <code>List</code> 的元素全部复制过去，再通过索引进行访问，这样比较保险。</p><p>主要就上面这几个吧，它们都是非算法思想层面的问题，大家留心注意一下应该没什么问题。下面开始正式讲解算法复杂度分析。</p><h2 id=\"big-o-表示法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#big-o-%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span>Big O 表示法</span></a></h2><div class=\"hint-container tip\"><p class=\"hint-container-title\">Big O 记号的数学定义：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> = { <code>f(n)</code>: 存在正常量 <code>c</code> 和 <code>n_0</code>，使得对所有 <code>n ≥ n_0</code>，有 <code>0 ≤ f(n) ≤ c*g(n)</code> }</p></div><p>我们常用的这个符号 <code>O</code>（大写字母 <code>o</code>，不是数字 0）其实代表一个函数的集合，比如 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 代表着一个由 <code>g(n) = n^2</code> 派生出来的一个函数集合；我们说一个算法的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，意思就是描述该算法的复杂度的函数属于这个函数集合之中。</p><p><strong>理论上，你看明白这个抽象的数学定义，就可以解答你关于 Big O 表示法的一切疑问了</strong>。</p><p>但考虑到大部分人看到数学定义就头晕，我给你列举两个复杂度分析中会用到的特性，记住这两个就够用了。</p><p><strong>1、只保留增长速率最快的项，其他的项可以省略</strong>。</p><p>首先，乘法和加法中的常数因子都可以忽略不计，比如下面的例子：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，不要见到常数就消，有的常数消不得，可能会用到我们中学学过的指数运算法则：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><p>除了常数因子，增长速率慢的项在增长速率快的项面前也可以忽略不计：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上列举的都是最简单常见的例子，这些例子都可以被 Big O 记号的定义正确解释。如果你遇到更复杂的复杂度场景，也可以根据定义来判断自己的复杂度表达式是否正确。</p><p><strong>2、Big O 记号表示复杂度的「上界」</strong>。</p><p>换句话说，只要你给出的是一个上界，用 Big O 记号表示就都是正确的。</p><p>比如如下代码：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果说这是一个算法，那么显然它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。<strong>但如果你非要说它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，理论上讲是可以的</strong>，因为 <code>O</code> 记号表示一个上界嘛，这个算法的时间复杂度确实不会超过 <code>N^2</code> 这个上界呀，虽然这个上界不够「紧」，但符合定义，所以理论上说也没毛病。</p><p>上述例子太简单，非要扩大它的时间复杂度上界显得没什么意义。但有些算法的复杂度会和算法的输入数据有关，没办法提前给出一个特别精确的时间复杂度，那么在这种情况下，用 Big O 记号扩大时间复杂度的上界就变得有意义了。</p><p>比如前文 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中讲到的凑零钱问题的暴力递归解法，核心代码框架如下：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当 <code>amount = 11, coins = [1,2,5]</code> 时，算法的递归树就长这样：</p><div class=\"img-content\"><img src=\"/algo/images/dynamic-programming/5.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>后文会具体讲递归算法的时间复杂度计算方法，现在我们先求一下这棵递归树上的节点个数吧。</p><p>假设金额 <code>amount</code> 的值为 <code>N</code>，<code>coins</code> 列表中元素个数为 <code>K</code>，那么这棵递归树就是一棵 <code>K</code> 叉树。但这棵树的生长和 <code>coins</code> 列表中的硬币面额有直接的关系，所以这棵树的形状会很不规则，导致我们很难精确地求出树上节点的总数。</p><p>对于这种情况，比较简单的处理方式就是按最坏情况做近似处理：</p><p>这棵树的高度有多高？不知道，那就按最坏情况来处理，假设全都是面额为 1 的硬币，这种情况下树高为 <code>N</code>。</p><p>这棵树的结构是什么样的？不知道，那就按最坏情况来处理，假设它是一棵满 <code>K</code> 叉树好了。</p><p>那么，这棵树上共有多少节点？都按最坏情况来处理，高度为 <code>N</code> 的一棵满 <code>K</code> 叉树，其节点总数为等比数列求和公式 <code>(K^N - 1)/(K - 1)</code>，用 Big O 表示就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p><p>当然，我们知道这棵树上的节点数其实没有这么多，但用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 表示一个粗略的上界是没问题的，也很容易看出来这是一个指数级的算法，需要想办法优化运行效率。</p><p><strong>所以，有时候你自己估算出来的时间复杂度和别人估算的复杂度不同，并不一定代表谁算错了，可能你俩都是对的，只是是估算的精度不同</strong>。</p><p>理论上，我们当然希望得到一个比较准确比较「紧」的上界，但想得到准确的上界对数学的功力有一定要求，我们针对面试刷题的话不妨退而求其次，只要数量级（线性/指数级/对数级/平方级等）能对上就没问题。</p><p>在算法领域，除了用 Big O 表示渐进上界，还有渐进下界、渐进紧确界等边界的表示方法，有兴趣的读者可以自行搜索。不过从实用的角度看，以上对 Big O 记号表示法的讲解就够用了。</p><h2 id=\"非递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>非递归算法分析</span></a></h2><p>非递归算法的空间复杂度一般很容易计算，你看它有没有申请数组之类的存储空间就行了，所以我主要说下时间复杂度的分析。</p><h2 class=\"hidden-for-toc\" id=\"数据结构分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span>数据结构分析</span></a></h2><h2 class=\"hidden-for-toc\" id=\"递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>递归算法分析</span></a></h2><h2 class=\"hidden-for-toc\" id=\"最后总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93\"><span>最后总结</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><p>我以前的文章主要都是讲解算法的原理和解题的思维，对时间复杂度和空间复杂度的分析经常一笔带过，主要是基于以下两个原因：</p><p>1、对于偏小白的读者，我希望你集中精力理解算法原理。如果加入太多偏数学的内容，很容易把人劝退。</p><p>2、正确理解常用算法底层原理，是进行复杂度的分析的前提。尤其是递归相关的算法，只有你从树的角度进行思考和分析，才能正确分析其复杂度。</p><p>鉴于现在历史文章已经涵盖了所有常见算法的核心原理，所以我专门写一篇时空复杂度的分析指南，授人以鱼不如授人以渔，教给你一套通用的方法分析任何算法的时空复杂度。</p><p>本文会篇幅较长，会涵盖如下几点：</p><p>1、利用时间复杂度反推解题思路，减少试错时间。</p><p>2、时间都去哪儿了？哪些常见的编码失误会导致算法超时。</p><p>3、Big O 表示法的几个基本特点。</p><p>4、非递归算法中的时间复杂度分析。</p><p>5、数据结构 API 的效率衡量方法（摊还分析）。</p><p>6、递归算法的时间/空间复杂度的分析方法，这部分是重点，我会用动态规划和回溯算法举例。</p><p>在讲解复杂度的概念和具体计算方法之前，我先说一些实战中常见的技巧和容易踩的坑。</p><h2 id=\"借助复杂度反推解题思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%80%9F%E5%8A%A9%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span>借助复杂度反推解题思路</span></a></h2><div class=\"hint-container info\"><p class=\"hint-container-title\">留意数据规模</p><p>不要以为复杂度分析是专门用来难为你的，它其实是来帮你的，它是来偷偷告诉你解题思路的。</p><p><strong>你应该在开始写代码之前就留意题目给的数据规模</strong>，因为复杂度分析可以避免你在错误的思路上浪费时间，有时候它甚至可以直接告诉你这道题用什么算法。</p><p>为啥这样说呢，因为一般题目都会告诉我们测试用例的数据规模有多大，我们可以根据这个数据规模反推这道题能够允许的时间复杂度在什么范围，进一步反推我们应该要用什么算法。</p></div><p>举例来说吧，比如一个题目给你输入一个数组，其长度能够达到 <code>10^6</code> 这个量级，那么我们肯定可以知道这道题的时间复杂度大概要小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，得优化成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 才行。因为如果你写的算法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的，最大的复杂度会达到 <code>10^12</code> 这个量级，在大部分判题系统上都是跑不过去的。</p><p>为了把复杂度控制在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，我们的选择范围就缩小了，可能符合条件的做法是：对数组进行排序处理、前缀和、双指针、一维 dp 等等，从这些思路切入就比较靠谱。像嵌套 for 循环、二维 dp、回溯算法这些思路，基本可以直接排除掉了。</p><p>再举个更直接的例子，如果你发现题目给的数据规模很小，比如数组长度 <code>N</code> 不超过 <code>20</code> 这样的，那么我们可以断定这道题大概率要用暴力穷举算法。</p><p>因为判题平台肯定是尽可能扩大数据规模难为你，它一反常态给这么小的数据规模，肯定是因为最优解就是指数/阶乘级别的复杂度。你放心用 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法</a> 招呼它就行了，不用想别的算法了。</p><p><strong>所以说啊，很多读者看题都不看那个数据规模，上来就闷声写代码，这是不对滴</strong>。你先把题目给的所有信息都考虑进去，再写代码，这样才能少走弯路。</p><h2 id=\"由于编码失误导致复杂度异常\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%B1%E4%BA%8E%E7%BC%96%E7%A0%81%E5%A4%B1%E8%AF%AF%E5%AF%BC%E8%87%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BC%82%E5%B8%B8\"><span>由于编码失误导致复杂度异常</span></a></h2><p>这部分主要总结一下大家（尤其是初学者）在写代码时容易犯的一些编码层面的错误。这些错误会产生预期之外的时间消耗，拖慢你的算法运行，甚至导致超时。</p><h3 id=\"使用了标准输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span>使用了标准输出</span></a></h3><p>在写算法题时，我们可能会用到 <code>print/console.log</code> 函数来打印一些状态，以便调试算法。</p><p>但你准备提交代码时，记得把这些输出语句注释掉，因为标准输出属于 I/O 操作，会很大程度上拖慢你的算法代码运行。</p><h3 id=\"错误地「传值」而非「传引用」\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%94%99%E8%AF%AF%E5%9C%B0%E3%80%8C%E4%BC%A0%E5%80%BC%E3%80%8D%E8%80%8C%E9%9D%9E%E3%80%8C%E4%BC%A0%E5%BC%95%E7%94%A8%E3%80%8D\"><span>错误地「传值」而非「传引用」</span></a></h3><p>比如 C++ 里面，函数参数默认是传值的，比如你传入一个 <code>vector</code> 参数，那么这个数据结构会被完整地复制一份，导致额外的时间和空间消耗。尤其是当这个函数是个递归函数的时候，错误地传值几乎必然导致超时或超内存。</p><p>正确的做法是传引用，比如 <code>vector&lt;int&gt;&amp;</code>，这样就不会产生额外的复制开销。使用其他语言的读者可以自查是否存在类似的问题，一定要搞清楚你的编程语言的参数传递机制。</p><h3 id=\"接口对象的底层实现不明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%8D%E6%98%8E\"><span>接口对象的底层实现不明</span></a></h3><p>这应该算是一个比较刁钻的问题，一般在 Java 这种面向对象的语言出现，出现地比较少，但也必须引起注意。</p><p>Java 中 <code>List</code> 是一个接口，它有很多实现类，比如 <code>ArrayList</code>、<code>LinkedList</code> 等等。如果你学了基础知识章节的 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-implement/\">手把手带你实现动态数组</a> 和 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-implement/\">手把手带你实现双链表</a>，就知道 <code>ArrayList</code> 和 <code>LinkedList</code> 的很多方法复杂度不同，比如 <code>ArrayList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，而 <code>LinkedList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</p><p>那么如果函数参数给你传入一个 <code>List</code> 类型的参数，你敢不敢直接 <code>list.get(i)</code> 进行随机访问？不敢吧。</p><p>这种情况，一般需要自己创建一个 <code>ArrayList</code>，把传入的 <code>List</code> 的元素全部复制过去，再通过索引进行访问，这样比较保险。</p><p>主要就上面这几个吧，它们都是非算法思想层面的问题，大家留心注意一下应该没什么问题。下面开始正式讲解算法复杂度分析。</p><h2 id=\"big-o-表示法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#big-o-%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span>Big O 表示法</span></a></h2><div class=\"hint-container tip\"><p class=\"hint-container-title\">Big O 记号的数学定义：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> = { <code>f(n)</code>: 存在正常量 <code>c</code> 和 <code>n_0</code>，使得对所有 <code>n ≥ n_0</code>，有 <code>0 ≤ f(n) ≤ c*g(n)</code> }</p></div><p>我们常用的这个符号 <code>O</code>（大写字母 <code>o</code>，不是数字 0）其实代表一个函数的集合，比如 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 代表着一个由 <code>g(n) = n^2</code> 派生出来的一个函数集合；我们说一个算法的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，意思就是描述该算法的复杂度的函数属于这个函数集合之中。</p><p><strong>理论上，你看明白这个抽象的数学定义，就可以解答你关于 Big O 表示法的一切疑问了</strong>。</p><p>但考虑到大部分人看到数学定义就头晕，我给你列举两个复杂度分析中会用到的特性，记住这两个就够用了。</p><p><strong>1、只保留增长速率最快的项，其他的项可以省略</strong>。</p><p>首先，乘法和加法中的常数因子都可以忽略不计，比如下面的例子：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当然，不要见到常数就消，有的常数消不得，可能会用到我们中学学过的指数运算法则：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><p>除了常数因子，增长速率慢的项在增长速率快的项面前也可以忽略不计：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以上列举的都是最简单常见的例子，这些例子都可以被 Big O 记号的定义正确解释。如果你遇到更复杂的复杂度场景，也可以根据定义来判断自己的复杂度表达式是否正确。</p><p><strong>2、Big O 记号表示复杂度的「上界」</strong>。</p><p>换句话说，只要你给出的是一个上界，用 Big O 记号表示就都是正确的。</p><p>比如如下代码：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果说这是一个算法，那么显然它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。<strong>但如果你非要说它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，理论上讲是可以的</strong>，因为 <code>O</code> 记号表示一个上界嘛，这个算法的时间复杂度确实不会超过 <code>N^2</code> 这个上界呀，虽然这个上界不够「紧」，但符合定义，所以理论上说也没毛病。</p><p>上述例子太简单，非要扩大它的时间复杂度上界显得没什么意义。但有些算法的复杂度会和算法的输入数据有关，没办法提前给出一个特别精确的时间复杂度，那么在这种情况下，用 Big O 记号扩大时间复杂度的上界就变得有意义了。</p><p>比如前文 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中讲到的凑零钱问题的暴力递归解法，核心代码框架如下：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当 <code>amount = 11, coins = [1,2,5]</code> 时，算法的递归树就长这样：</p><div class=\"img-content\"><img src=\"/algo/images/dynamic-programming/5.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>后文会具体讲递归算法的时间复杂度计算方法，现在我们先求一下这棵递归树上的节点个数吧。</p><p>假设金额 <code>amount</code> 的值为 <code>N</code>，<code>coins</code> 列表中元素个数为 <code>K</code>，那么这棵递归树就是一棵 <code>K</code> 叉树。但这棵树的生长和 <code>coins</code> 列表中的硬币面额有直接的关系，所以这棵树的形状会很不规则，导致我们很难精确地求出树上节点的总数。</p><p>对于这种情况，比较简单的处理方式就是按最坏情况做近似处理：</p><p>这棵树的高度有多高？不知道，那就按最坏情况来处理，假设全都是面额为 1 的硬币，这种情况下树高为 <code>N</code>。</p><p>这棵树的结构是什么样的？不知道，那就按最坏情况来处理，假设它是一棵满 <code>K</code> 叉树好了。</p><p>那么，这棵树上共有多少节点？都按最坏情况来处理，高度为 <code>N</code> 的一棵满 <code>K</code> 叉树，其节点总数为等比数列求和公式 <code>(K^N - 1)/(K - 1)</code>，用 Big O 表示就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p><p>当然，我们知道这棵树上的节点数其实没有这么多，但用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 表示一个粗略的上界是没问题的，也很容易看出来这是一个指数级的算法，需要想办法优化运行效率。</p><p><strong>所以，有时候你自己估算出来的时间复杂度和别人估算的复杂度不同，并不一定代表谁算错了，可能你俩都是对的，只是是估算的精度不同</strong>。</p><p>理论上，我们当然希望得到一个比较准确比较「紧」的上界，但想得到准确的上界对数学的功力有一定要求，我们针对面试刷题的话不妨退而求其次，只要数量级（线性/指数级/对数级/平方级等）能对上就没问题。</p><p>在算法领域，除了用 Big O 表示渐进上界，还有渐进下界、渐进紧确界等边界的表示方法，有兴趣的读者可以自行搜索。不过从实用的角度看，以上对 Big O 记号表示法的讲解就够用了。</p><h2 id=\"非递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>非递归算法分析</span></a></h2><p>非递归算法的空间复杂度一般很容易计算，你看它有没有申请数组之类的存储空间就行了，所以我主要说下时间复杂度的分析。</p><h2 class=\"hidden-for-toc\" id=\"数据结构分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span>数据结构分析</span></a></h2><h2 class=\"hidden-for-toc\" id=\"递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>递归算法分析</span></a></h2><h2 class=\"hidden-for-toc\" id=\"最后总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93\"><span>最后总结</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <p>我以前的文章主要都是讲解算法的原理和解题的思维，对时间复杂度和空间复杂度的分析经常一笔带过，主要是基于以下两个原因：</p> <p>1、对于偏小白的读者，我希望你集中精力理解算法原理。如果加入太多偏数学的内容，很容易把人劝退。</p> <p>2、正确理解常用算法底层原理，是进行复杂度的分析的前提。尤其是递归相关的算法，只有你从树的角度进行思考和分析，才能正确分析其复杂度。</p> <p>鉴于现在历史文章已经涵盖了所有常见算法的核心原理，所以我专门写一篇时空复杂度的分析指南，授人以鱼不如授人以渔，教给你一套通用的方法分析任何算法的时空复杂度。</p> <p>本文会篇幅较长，会涵盖如下几点：</p> <p>1、利用时间复杂度反推解题思路，减少试错时间。</p> <p>2、时间都去哪儿了？哪些常见的编码失误会导致算法超时。</p> <p>3、Big O 表示法的几个基本特点。</p> <p>4、非递归算法中的时间复杂度分析。</p> <p>5、数据结构 API 的效率衡量方法（摊还分析）。</p> <p>6、递归算法的时间/空间复杂度的分析方法，这部分是重点，我会用动态规划和回溯算法举例。</p> <p>在讲解复杂度的概念和具体计算方法之前，我先说一些实战中常见的技巧和容易踩的坑。</p> <h2 id=\"借助复杂度反推解题思路\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%80%9F%E5%8A%A9%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span>借助复杂度反推解题思路</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%80%9F%E5%8A%A9%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%8F%8D%E6%8E%A8%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF\"><span>借助复杂度反推解题思路</span></a> <span>借助复杂度反推解题思路</span> <div class=\"hint-container info\"><p class=\"hint-container-title\">留意数据规模</p><p>不要以为复杂度分析是专门用来难为你的，它其实是来帮你的，它是来偷偷告诉你解题思路的。</p><p><strong>你应该在开始写代码之前就留意题目给的数据规模</strong>，因为复杂度分析可以避免你在错误的思路上浪费时间，有时候它甚至可以直接告诉你这道题用什么算法。</p><p>为啥这样说呢，因为一般题目都会告诉我们测试用例的数据规模有多大，我们可以根据这个数据规模反推这道题能够允许的时间复杂度在什么范围，进一步反推我们应该要用什么算法。</p></div> <p class=\"hint-container-title\">留意数据规模</p> <p>不要以为复杂度分析是专门用来难为你的，它其实是来帮你的，它是来偷偷告诉你解题思路的。</p> <p><strong>你应该在开始写代码之前就留意题目给的数据规模</strong>，因为复杂度分析可以避免你在错误的思路上浪费时间，有时候它甚至可以直接告诉你这道题用什么算法。</p> <strong>你应该在开始写代码之前就留意题目给的数据规模</strong> <p>为啥这样说呢，因为一般题目都会告诉我们测试用例的数据规模有多大，我们可以根据这个数据规模反推这道题能够允许的时间复杂度在什么范围，进一步反推我们应该要用什么算法。</p> <p>举例来说吧，比如一个题目给你输入一个数组，其长度能够达到 <code>10^6</code> 这个量级，那么我们肯定可以知道这道题的时间复杂度大概要小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，得优化成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 才行。因为如果你写的算法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的，最大的复杂度会达到 <code>10^12</code> 这个量级，在大部分判题系统上都是跑不过去的。</p> <code>10^6</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>N</mi><mn>2</mn></msup> <mi>N</mi> <mn>2</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N^2)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span> <span class=\"mord mtight\">2</span> <span class=\"mclose\">)</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mi>l</mi> <mi>o</mi> <mi>g</mi> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(NlogN)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span> <span class=\"mord mathnormal\">o</span> <span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>N</mi><mn>2</mn></msup> <mi>N</mi> <mn>2</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N^2)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span> <span class=\"mord mtight\">2</span> <span class=\"mclose\">)</span> <code>10^12</code> <p>为了把复杂度控制在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，我们的选择范围就缩小了，可能符合条件的做法是：对数组进行排序处理、前缀和、双指针、一维 dp 等等，从这些思路切入就比较靠谱。像嵌套 for 循环、二维 dp、回溯算法这些思路，基本可以直接排除掉了。</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NlogN)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mi>l</mi> <mi>o</mi> <mi>g</mi> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(NlogN)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">Nl</span> <span class=\"mord mathnormal\">o</span> <span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <p>再举个更直接的例子，如果你发现题目给的数据规模很小，比如数组长度 <code>N</code> 不超过 <code>20</code> 这样的，那么我们可以断定这道题大概率要用暴力穷举算法。</p> <code>N</code> <code>20</code> <p>因为判题平台肯定是尽可能扩大数据规模难为你，它一反常态给这么小的数据规模，肯定是因为最优解就是指数/阶乘级别的复杂度。你放心用 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法</a> 招呼它就行了，不用想别的算法了。</p> <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法</a> <p><strong>所以说啊，很多读者看题都不看那个数据规模，上来就闷声写代码，这是不对滴</strong>。你先把题目给的所有信息都考虑进去，再写代码，这样才能少走弯路。</p> <strong>所以说啊，很多读者看题都不看那个数据规模，上来就闷声写代码，这是不对滴</strong> <h2 id=\"由于编码失误导致复杂度异常\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%B1%E4%BA%8E%E7%BC%96%E7%A0%81%E5%A4%B1%E8%AF%AF%E5%AF%BC%E8%87%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BC%82%E5%B8%B8\"><span>由于编码失误导致复杂度异常</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%94%B1%E4%BA%8E%E7%BC%96%E7%A0%81%E5%A4%B1%E8%AF%AF%E5%AF%BC%E8%87%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%BC%82%E5%B8%B8\"><span>由于编码失误导致复杂度异常</span></a> <span>由于编码失误导致复杂度异常</span> <p>这部分主要总结一下大家（尤其是初学者）在写代码时容易犯的一些编码层面的错误。这些错误会产生预期之外的时间消耗，拖慢你的算法运行，甚至导致超时。</p> <h3 id=\"使用了标准输出\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span>使用了标准输出</span></a></h3> <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA\"><span>使用了标准输出</span></a> <span>使用了标准输出</span> <p>在写算法题时，我们可能会用到 <code>print/console.log</code> 函数来打印一些状态，以便调试算法。</p> <code>print/console.log</code> <p>但你准备提交代码时，记得把这些输出语句注释掉，因为标准输出属于 I/O 操作，会很大程度上拖慢你的算法代码运行。</p> <h3 id=\"错误地「传值」而非「传引用」\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%94%99%E8%AF%AF%E5%9C%B0%E3%80%8C%E4%BC%A0%E5%80%BC%E3%80%8D%E8%80%8C%E9%9D%9E%E3%80%8C%E4%BC%A0%E5%BC%95%E7%94%A8%E3%80%8D\"><span>错误地「传值」而非「传引用」</span></a></h3> <a class=\"header-anchor\" href=\"#%E9%94%99%E8%AF%AF%E5%9C%B0%E3%80%8C%E4%BC%A0%E5%80%BC%E3%80%8D%E8%80%8C%E9%9D%9E%E3%80%8C%E4%BC%A0%E5%BC%95%E7%94%A8%E3%80%8D\"><span>错误地「传值」而非「传引用」</span></a> <span>错误地「传值」而非「传引用」</span> <p>比如 C++ 里面，函数参数默认是传值的，比如你传入一个 <code>vector</code> 参数，那么这个数据结构会被完整地复制一份，导致额外的时间和空间消耗。尤其是当这个函数是个递归函数的时候，错误地传值几乎必然导致超时或超内存。</p> <code>vector</code> <p>正确的做法是传引用，比如 <code>vector&lt;int&gt;&amp;</code>，这样就不会产生额外的复制开销。使用其他语言的读者可以自查是否存在类似的问题，一定要搞清楚你的编程语言的参数传递机制。</p> <code>vector&lt;int&gt;&amp;</code> <h3 id=\"接口对象的底层实现不明\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%8D%E6%98%8E\"><span>接口对象的底层实现不明</span></a></h3> <a class=\"header-anchor\" href=\"#%E6%8E%A5%E5%8F%A3%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%8D%E6%98%8E\"><span>接口对象的底层实现不明</span></a> <span>接口对象的底层实现不明</span> <p>这应该算是一个比较刁钻的问题，一般在 Java 这种面向对象的语言出现，出现地比较少，但也必须引起注意。</p> <p>Java 中 <code>List</code> 是一个接口，它有很多实现类，比如 <code>ArrayList</code>、<code>LinkedList</code> 等等。如果你学了基础知识章节的 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-implement/\">手把手带你实现动态数组</a> 和 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-implement/\">手把手带你实现双链表</a>，就知道 <code>ArrayList</code> 和 <code>LinkedList</code> 的很多方法复杂度不同，比如 <code>ArrayList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，而 <code>LinkedList</code> 的 <code>get</code> 方法是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。</p> <code>List</code> <code>ArrayList</code> <code>LinkedList</code> <a class=\"route-link\" href=\"/algo/data-structure-basic/array-implement/\">手把手带你实现动态数组</a> <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-implement/\">手把手带你实现双链表</a> <code>ArrayList</code> <code>LinkedList</code> <code>ArrayList</code> <code>get</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <code>LinkedList</code> <code>get</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <p>那么如果函数参数给你传入一个 <code>List</code> 类型的参数，你敢不敢直接 <code>list.get(i)</code> 进行随机访问？不敢吧。</p> <code>List</code> <code>list.get(i)</code> <p>这种情况，一般需要自己创建一个 <code>ArrayList</code>，把传入的 <code>List</code> 的元素全部复制过去，再通过索引进行访问，这样比较保险。</p> <code>ArrayList</code> <code>List</code> <p>主要就上面这几个吧，它们都是非算法思想层面的问题，大家留心注意一下应该没什么问题。下面开始正式讲解算法复杂度分析。</p> <h2 id=\"big-o-表示法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#big-o-%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span>Big O 表示法</span></a></h2> <a class=\"header-anchor\" href=\"#big-o-%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span>Big O 表示法</span></a> <span>Big O 表示法</span> <div class=\"hint-container tip\"><p class=\"hint-container-title\">Big O 记号的数学定义：</p><p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> = { <code>f(n)</code>: 存在正常量 <code>c</code> 和 <code>n_0</code>，使得对所有 <code>n ≥ n_0</code>，有 <code>0 ≤ f(n) ≤ c*g(n)</code> }</p></div> <p class=\"hint-container-title\">Big O 记号的数学定义：</p> <p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> = { <code>f(n)</code>: 存在正常量 <code>c</code> 和 <code>n_0</code>，使得对所有 <code>n ≥ n_0</code>，有 <code>0 ≤ f(n) ≤ c*g(n)</code> }</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g(n))</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>g</mi> <mo stretchy=\"false\">(</mo> <mi>n</mi> <mo stretchy=\"false\">)</mo> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(g(n))</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">))</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">n</span> <span class=\"mclose\">))</span> <code>f(n)</code> <code>c</code> <code>n_0</code> <code>n ≥ n_0</code> <code>0 ≤ f(n) ≤ c*g(n)</code> <p>我们常用的这个符号 <code>O</code>（大写字母 <code>o</code>，不是数字 0）其实代表一个函数的集合，比如 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 代表着一个由 <code>g(n) = n^2</code> 派生出来的一个函数集合；我们说一个算法的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，意思就是描述该算法的复杂度的函数属于这个函数集合之中。</p> <code>O</code> <code>o</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>n</mi><mn>2</mn></msup> <mi>n</mi> <mn>2</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(n^2)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\">n</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span> <span class=\"mord mtight\">2</span> <span class=\"mclose\">)</span> <code>g(n) = n^2</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>n</mi><mn>2</mn></msup> <mi>n</mi> <mn>2</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(n^2)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\">n</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span> <span class=\"mord mtight\">2</span> <span class=\"mclose\">)</span> <p><strong>理论上，你看明白这个抽象的数学定义，就可以解答你关于 Big O 表示法的一切疑问了</strong>。</p> <strong>理论上，你看明白这个抽象的数学定义，就可以解答你关于 Big O 表示法的一切疑问了</strong> <p>但考虑到大部分人看到数学定义就头晕，我给你列举两个复杂度分析中会用到的特性，记住这两个就够用了。</p> <p><strong>1、只保留增长速率最快的项，其他的项可以省略</strong>。</p> <strong>1、只保留增长速率最快的项，其他的项可以省略</strong> <p>首先，乘法和加法中的常数因子都可以忽略不计，比如下面的例子：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(2N + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">100</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N)</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(N+</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + 3N + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">99</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(M + N)</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>当然，不要见到常数就消，有的常数消不得，可能会用到我们中学学过的指数运算法则：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^(2N)) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <p>除了常数因子，增长速率慢的项在增长速率快的项面前也可以忽略不计：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N^</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">999</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> * N) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N^</span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">((N + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) * </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N + </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N) = </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">O</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(N * </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">^N)</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>以上列举的都是最简单常见的例子，这些例子都可以被 Big O 记号的定义正确解释。如果你遇到更复杂的复杂度场景，也可以根据定义来判断自己的复杂度表达式是否正确。</p> <p><strong>2、Big O 记号表示复杂度的「上界」</strong>。</p> <strong>2、Big O 记号表示复杂度的「上界」</strong> <p>换句话说，只要你给出的是一个上界，用 Big O 记号表示就都是正确的。</p> <p>比如如下代码：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">    print</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"hello world\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>如果说这是一个算法，那么显然它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>。<strong>但如果你非要说它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，理论上讲是可以的</strong>，因为 <code>O</code> 记号表示一个上界嘛，这个算法的时间复杂度确实不会超过 <code>N^2</code> 这个上界呀，虽然这个上界不够「紧」，但符合定义，所以理论上说也没毛病。</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <strong>但如果你非要说它的时间复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，理论上讲是可以的</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N^2)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>N</mi><mn>2</mn></msup> <mi>N</mi> <mn>2</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N^2)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span> <span class=\"mord mtight\">2</span> <span class=\"mclose\">)</span> <code>O</code> <code>N^2</code> <p>上述例子太简单，非要扩大它的时间复杂度上界显得没什么意义。但有些算法的复杂度会和算法的输入数据有关，没办法提前给出一个特别精确的时间复杂度，那么在这种情况下，用 Big O 记号扩大时间复杂度的上界就变得有意义了。</p> <p>比如前文 <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> 中讲到的凑零钱问题的暴力递归解法，核心代码框架如下：</p> <a class=\"route-link\" href=\"/algo/essential-technique/dynamic-programming-framework/\">动态规划核心框架</a> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> dp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] coins, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> amount) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // base case</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (amount &lt;= </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // 状态转移</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> coin</span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\"> :</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> coins) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        dp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(coins, amount - coin);</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>当 <code>amount = 11, coins = [1,2,5]</code> 时，算法的递归树就长这样：</p> <code>amount = 11, coins = [1,2,5]</code> <div class=\"img-content\"><img src=\"/algo/images/dynamic-programming/5.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/dynamic-programming/5.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>后文会具体讲递归算法的时间复杂度计算方法，现在我们先求一下这棵递归树上的节点个数吧。</p> <p>假设金额 <code>amount</code> 的值为 <code>N</code>，<code>coins</code> 列表中元素个数为 <code>K</code>，那么这棵递归树就是一棵 <code>K</code> 叉树。但这棵树的生长和 <code>coins</code> 列表中的硬币面额有直接的关系，所以这棵树的形状会很不规则，导致我们很难精确地求出树上节点的总数。</p> <code>amount</code> <code>N</code> <code>coins</code> <code>K</code> <code>K</code> <code>coins</code> <p>对于这种情况，比较简单的处理方式就是按最坏情况做近似处理：</p> <p>这棵树的高度有多高？不知道，那就按最坏情况来处理，假设全都是面额为 1 的硬币，这种情况下树高为 <code>N</code>。</p> <code>N</code> <p>这棵树的结构是什么样的？不知道，那就按最坏情况来处理，假设它是一棵满 <code>K</code> 叉树好了。</p> <code>K</code> <p>那么，这棵树上共有多少节点？都按最坏情况来处理，高度为 <code>N</code> 的一棵满 <code>K</code> 叉树，其节点总数为等比数列求和公式 <code>(K^N - 1)/(K - 1)</code>，用 Big O 表示就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p> <code>N</code> <code>K</code> <code>(K^N - 1)/(K - 1)</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>K</mi><mi>N</mi></msup> <mi>K</mi> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(K^N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span> <span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <p>当然，我们知道这棵树上的节点数其实没有这么多，但用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 表示一个粗略的上界是没问题的，也很容易看出来这是一个指数级的算法，需要想办法优化运行效率。</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(K^N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>K</mi><mi>N</mi></msup><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <msup><mi>K</mi><mi>N</mi></msup> <mi>K</mi> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(K^N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1.0913em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span></span> <span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8413em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span> <span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <p><strong>所以，有时候你自己估算出来的时间复杂度和别人估算的复杂度不同，并不一定代表谁算错了，可能你俩都是对的，只是是估算的精度不同</strong>。</p> <strong>所以，有时候你自己估算出来的时间复杂度和别人估算的复杂度不同，并不一定代表谁算错了，可能你俩都是对的，只是是估算的精度不同</strong> <p>理论上，我们当然希望得到一个比较准确比较「紧」的上界，但想得到准确的上界对数学的功力有一定要求，我们针对面试刷题的话不妨退而求其次，只要数量级（线性/指数级/对数级/平方级等）能对上就没问题。</p> <p>在算法领域，除了用 Big O 表示渐进上界，还有渐进下界、渐进紧确界等边界的表示方法，有兴趣的读者可以自行搜索。不过从实用的角度看，以上对 Big O 记号表示法的讲解就够用了。</p> <h2 id=\"非递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>非递归算法分析</span></a></h2> <a class=\"header-anchor\" href=\"#%E9%9D%9E%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>非递归算法分析</span></a> <span>非递归算法分析</span> <p>非递归算法的空间复杂度一般很容易计算，你看它有没有申请数组之类的存储空间就行了，所以我主要说下时间复杂度的分析。</p> <h2 class=\"hidden-for-toc\" id=\"数据结构分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span>数据结构分析</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span>数据结构分析</span></a> <span>数据结构分析</span> <h2 class=\"hidden-for-toc\" id=\"递归算法分析\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>递归算法分析</span></a></h2> <a class=\"header-anchor\" href=\"#%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span>递归算法分析</span></a> <span>递归算法分析</span> <h2 class=\"hidden-for-toc\" id=\"最后总结\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93\"><span>最后总结</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%9C%80%E5%90%8E%E6%80%BB%E7%BB%93\"><span>最后总结</span></a> <span>最后总结</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/essential-technique/divide-and-conquer/\" aria-label=\"分治算法解题套路框架\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->分治算法解题套路框架</div></a><a class=\"route-link auto-link next\" href=\"/algo/essential-technique/linked-list-skills-summary-2/\" aria-label=\"双指针技巧秒杀七道链表题目\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">双指针技巧秒杀七道链表题目<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/essential-technique/divide-and-conquer/\" aria-label=\"分治算法解题套路框架\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->分治算法解题套路框架</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->分治算法解题套路框架</div> <a class=\"route-link auto-link next\" href=\"/algo/essential-technique/linked-list-skills-summary-2/\" aria-label=\"双指针技巧秒杀七道链表题目\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">双指针技巧秒杀七道链表题目<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">双指针技巧秒杀七道链表题目<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}