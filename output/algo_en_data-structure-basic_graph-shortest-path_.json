{
    "url": "https://labuladong.online/algo/en/data-structure-basic/graph-shortest-path/",
    "title": "Graph Shortest Path Algorithms Overview | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Graph Shortest Path Algorithms Overview</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2420 words</span><meta property=\"wordCount\" content=\"2420\"></span></div><hr></div> <h1><!---->Graph Shortest Path Algorithms Overview</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2420 words</span><meta property=\"wordCount\" content=\"2420\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2420 words</span><meta property=\"wordCount\" content=\"2420\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 2420 words</span> <meta property=\"wordCount\" content=\"2420\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Dijkstra and A* algorithms are extensions of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. They can solve single-source shortest path problems without negative weights.</p><p>The SPFA algorithm (queue-based Bellman-Ford algorithm) is also an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. It can handle single-source shortest path problems with negative weights.</p><p>The Floyd algorithm is an application of <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming</a>. It can solve all-pairs (multi-source) shortest path problems.</p></div><div class=\"markmap-wrapper\"><svg class=\"markmap-svg\" id=\"markmap-28\"></svg><div style=\"display:flex;align-items:center;justify-content:center;height:360px;\" class=\"markmap-loading\"><span style=\"--loading-icon: url(&quot;data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E&quot;);--icon-size: 48px;display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)\"></span></div></div><p>Beginners do not need to think graph algorithms are hard. They are just extensions of simple algorithm ideas. Once you understand basic tree level-order traversal, you can come up with these algorithms yourself.</p><p>Since this is a basic knowledge chapter, I will not provide full code for each algorithm here. The detailed code will be shown in later chapters.</p><p>This article focuses on the main ideas, usage scenarios, and how these advanced algorithms connect with basic knowledge. It will help you get a complete understanding of shortest path algorithms on graphs.</p><h2 id=\"overview-of-shortest-path-problems\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#overview-of-shortest-path-problems\"><span>Overview of Shortest Path Problems</span></a></h2><p>Shortest path problems are used a lot in real life, for example, to find the minimum cost, shortest distance, or least time.</p><p>In algorithms, we usually model these problems as finding the smallest path weight in a <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">weighted graph</a>. In this article, <strong>\"shortest path\" and \"minimum path weight sum\" mean the same thing.</strong></p><p>There are two main types of shortest path problems: \"single-source shortest path\" and \"all-pairs shortest path\". Below are some classic algorithms.</p><h3 id=\"single-source-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#single-source-shortest-path\"><span>Single-source Shortest Path</span></a></h3><p>Single-source shortest path means finding the shortest path from one starting point to <strong>all other nodes</strong>.</p><p>For example, if a graph has <code>n</code> nodes labeled <code>0, 1, 2, ..., n-1</code>, and you are asked to find the shortest path from node <code>2</code> to every other node, this is a single-source shortest path problem.</p><p>The output of a single-source shortest path algorithm is usually a one-dimensional array <code>distTo</code>, where <code>distTo[i]</code> means the shortest path length from the start node to node <code>i</code>.</p><p>Common single-source shortest path algorithms are:</p><ol><li><p>Dijkstra algorithm. It is basically BFS plus a greedy idea. It is efficient, but cannot handle graphs with negative weights.</p></li><li><p>Queue-based Bellman-Ford algorithm. This is also based on BFS. It can handle negative weights, but is slower than Dijkstra.</p></li></ol><h3 id=\"point-to-point-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#point-to-point-shortest-path\"><span>Point-to-Point Shortest Path</span></a></h3><p>In many algorithm problems, we don't need to find the shortest paths from a start node to all other nodes. We only need to find the shortest path from a start node <code>src</code> to a target node <code>dst</code>. This kind of problem is called a point-to-point shortest path problem.</p><p><strong>Usually, the point-to-point shortest path problem can be seen as a special case of the single-source shortest path problem.</strong> You can run a single-source shortest path algorithm from <code>src</code>, and stop early when you reach <code>dst</code>.</p><p>But there is an algorithm designed just for point-to-point problems: the <strong>A* Algorithm</strong> (A Star Algorithm).</p><p>I often say that the core of algorithms is brute-force search. If you want to make brute-force more efficient, you should use as much information as possible. In point-to-point shortest path problems (where both the start and end are known), you have more information than in single-source shortest path problems (where only the start is known). So, you can use this extra information to make the algorithm faster.</p><p>For example, if you know the target is to the lower right of the start, you can guess that searching towards the lower right may reach the target faster.</p><p>This is the key idea of the A* algorithm: it makes full use of the known information and searches in a certain direction to find the target faster. This kind of algorithm is called a <strong>heuristic search algorithm</strong>.</p><p>But remember, this guess is only a rule of thumb and is not always correct. For example, the lower right may be a dead end, and you might need to go around to the upper left to reach the target.</p><p>So, heuristic algorithms need to set a reasonable heuristic function. You need to balance between the rule of thumb and the real situation to make sure the algorithm is still efficient even if the guess is wrong.</p><h3 id=\"all-pairs-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-pairs-shortest-path\"><span>All-Pairs Shortest Path</span></a></h3><p>The <strong>all-pairs shortest path</strong> problem asks you to find the shortest paths between any two nodes in a graph.</p><p>For example, if a graph has <code>n</code> nodes numbered from <code>0, 1, 2, ..., n-1</code>, you need to find the shortest path between every pair of nodes. This is called the all-pairs shortest path problem.</p><p>The final output of an all-pairs shortest path algorithm is a 2D array <code>dist</code>, where <code>dist[i][j]</code> means the shortest path length from node <code>i</code> to node <code>j</code>.</p><p>The most famous algorithm for this is the Floyd algorithm, which is actually a dynamic programming algorithm.</p><p>In theory, you can run a single-source shortest path algorithm for every node to solve this problem.</p><p>But in practice, you should choose the algorithm based on the graphâ€™s structure. Sometimes, using Floyd is more efficient. Other times, running Dijkstra multiple times is better. You will understand this when we talk about the complexity of these algorithms later.</p><h3 id=\"the-effect-of-negative-weight-edges\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-effect-of-negative-weight-edges\"><span>The Effect of Negative Weight Edges</span></a></h3><p>When finding the shortest path, you must pay attention to whether the graph has <strong>negative weight edges</strong>. If it does, you must check for <strong>negative weight cycles</strong>.</p><p>Why do negative weight edges matter? Because they make the problem more complicated. Hereâ€™s a simple example to help you understand:</p><p>Suppose you are at the starting node <code>s</code>. There are two neighbors: <code>a</code> and <code>b</code>. The edge <code>s-&gt;a</code> has weight 3, and <code>s-&gt;b</code> has weight 4.</p><p>If there are no negative weight edges, then it's clear that the shortest path from <code>s</code> to <code>a</code> is just <code>s-&gt;a</code>, with a total weight of 3. If you go from <code>s</code> to <code>b</code> first, and then to <code>a</code>, the total weight will be at least 4 or moreâ€”never less than 3.</p><p>But if there is a negative weight edge, things change. For example, if the edge <code>b-&gt;a</code> has weight -10, then the path <code>s-&gt;b-&gt;a</code> has a total weight of -6, which is much less than 3.</p><p>For algorithms like Dijkstra that use a greedy strategy, there is an important assumption: <strong>the total path weight always increases as you use more edges</strong>. Negative weight edges break this assumption, and the algorithm fails.</p><p>If the graph has a negative weight cycle, the shortest path problem has no meaning. For example, if there is a negative weight cycle on the path from <code>s</code> to <code>a</code>, you could keep going around the cycle forever, making the total path weight smaller and smaller.</p><p>Among common shortest path algorithms, Dijkstra and A* cannot handle negative weight edges. Floyd and Bellman-Ford can handle negative weights, and Bellman-Ford is often used to detect negative weight cycles.</p><p>Next, letâ€™s look at the core ideas of these algorithms.</p><h2 class=\"hidden-for-toc\" id=\"introduction-to-dijkstra-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-dijkstra-s-algorithm\"><span>Introduction to Dijkstra's Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-a-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-a-algorithm\"><span>Introduction to A* Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-bellman-ford-spfa-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-bellman-ford-spfa-algorithm\"><span>Introduction to Bellman-Ford/SPFA Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-floyd-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-floyd-s-algorithm\"><span>Introduction to Floyd's Algorithm</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Dijkstra and A* algorithms are extensions of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. They can solve single-source shortest path problems without negative weights.</p><p>The SPFA algorithm (queue-based Bellman-Ford algorithm) is also an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. It can handle single-source shortest path problems with negative weights.</p><p>The Floyd algorithm is an application of <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming</a>. It can solve all-pairs (multi-source) shortest path problems.</p></div><div class=\"markmap-wrapper\"><svg class=\"markmap-svg\" id=\"markmap-28\"></svg><div style=\"display:flex;align-items:center;justify-content:center;height:360px;\" class=\"markmap-loading\"><span style=\"--loading-icon: url(&quot;data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E&quot;);--icon-size: 48px;display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)\"></span></div></div><p>Beginners do not need to think graph algorithms are hard. They are just extensions of simple algorithm ideas. Once you understand basic tree level-order traversal, you can come up with these algorithms yourself.</p><p>Since this is a basic knowledge chapter, I will not provide full code for each algorithm here. The detailed code will be shown in later chapters.</p><p>This article focuses on the main ideas, usage scenarios, and how these advanced algorithms connect with basic knowledge. It will help you get a complete understanding of shortest path algorithms on graphs.</p><h2 id=\"overview-of-shortest-path-problems\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#overview-of-shortest-path-problems\"><span>Overview of Shortest Path Problems</span></a></h2><p>Shortest path problems are used a lot in real life, for example, to find the minimum cost, shortest distance, or least time.</p><p>In algorithms, we usually model these problems as finding the smallest path weight in a <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">weighted graph</a>. In this article, <strong>\"shortest path\" and \"minimum path weight sum\" mean the same thing.</strong></p><p>There are two main types of shortest path problems: \"single-source shortest path\" and \"all-pairs shortest path\". Below are some classic algorithms.</p><h3 id=\"single-source-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#single-source-shortest-path\"><span>Single-source Shortest Path</span></a></h3><p>Single-source shortest path means finding the shortest path from one starting point to <strong>all other nodes</strong>.</p><p>For example, if a graph has <code>n</code> nodes labeled <code>0, 1, 2, ..., n-1</code>, and you are asked to find the shortest path from node <code>2</code> to every other node, this is a single-source shortest path problem.</p><p>The output of a single-source shortest path algorithm is usually a one-dimensional array <code>distTo</code>, where <code>distTo[i]</code> means the shortest path length from the start node to node <code>i</code>.</p><p>Common single-source shortest path algorithms are:</p><ol><li><p>Dijkstra algorithm. It is basically BFS plus a greedy idea. It is efficient, but cannot handle graphs with negative weights.</p></li><li><p>Queue-based Bellman-Ford algorithm. This is also based on BFS. It can handle negative weights, but is slower than Dijkstra.</p></li></ol><h3 id=\"point-to-point-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#point-to-point-shortest-path\"><span>Point-to-Point Shortest Path</span></a></h3><p>In many algorithm problems, we don't need to find the shortest paths from a start node to all other nodes. We only need to find the shortest path from a start node <code>src</code> to a target node <code>dst</code>. This kind of problem is called a point-to-point shortest path problem.</p><p><strong>Usually, the point-to-point shortest path problem can be seen as a special case of the single-source shortest path problem.</strong> You can run a single-source shortest path algorithm from <code>src</code>, and stop early when you reach <code>dst</code>.</p><p>But there is an algorithm designed just for point-to-point problems: the <strong>A* Algorithm</strong> (A Star Algorithm).</p><p>I often say that the core of algorithms is brute-force search. If you want to make brute-force more efficient, you should use as much information as possible. In point-to-point shortest path problems (where both the start and end are known), you have more information than in single-source shortest path problems (where only the start is known). So, you can use this extra information to make the algorithm faster.</p><p>For example, if you know the target is to the lower right of the start, you can guess that searching towards the lower right may reach the target faster.</p><p>This is the key idea of the A* algorithm: it makes full use of the known information and searches in a certain direction to find the target faster. This kind of algorithm is called a <strong>heuristic search algorithm</strong>.</p><p>But remember, this guess is only a rule of thumb and is not always correct. For example, the lower right may be a dead end, and you might need to go around to the upper left to reach the target.</p><p>So, heuristic algorithms need to set a reasonable heuristic function. You need to balance between the rule of thumb and the real situation to make sure the algorithm is still efficient even if the guess is wrong.</p><h3 id=\"all-pairs-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-pairs-shortest-path\"><span>All-Pairs Shortest Path</span></a></h3><p>The <strong>all-pairs shortest path</strong> problem asks you to find the shortest paths between any two nodes in a graph.</p><p>For example, if a graph has <code>n</code> nodes numbered from <code>0, 1, 2, ..., n-1</code>, you need to find the shortest path between every pair of nodes. This is called the all-pairs shortest path problem.</p><p>The final output of an all-pairs shortest path algorithm is a 2D array <code>dist</code>, where <code>dist[i][j]</code> means the shortest path length from node <code>i</code> to node <code>j</code>.</p><p>The most famous algorithm for this is the Floyd algorithm, which is actually a dynamic programming algorithm.</p><p>In theory, you can run a single-source shortest path algorithm for every node to solve this problem.</p><p>But in practice, you should choose the algorithm based on the graphâ€™s structure. Sometimes, using Floyd is more efficient. Other times, running Dijkstra multiple times is better. You will understand this when we talk about the complexity of these algorithms later.</p><h3 id=\"the-effect-of-negative-weight-edges\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-effect-of-negative-weight-edges\"><span>The Effect of Negative Weight Edges</span></a></h3><p>When finding the shortest path, you must pay attention to whether the graph has <strong>negative weight edges</strong>. If it does, you must check for <strong>negative weight cycles</strong>.</p><p>Why do negative weight edges matter? Because they make the problem more complicated. Hereâ€™s a simple example to help you understand:</p><p>Suppose you are at the starting node <code>s</code>. There are two neighbors: <code>a</code> and <code>b</code>. The edge <code>s-&gt;a</code> has weight 3, and <code>s-&gt;b</code> has weight 4.</p><p>If there are no negative weight edges, then it's clear that the shortest path from <code>s</code> to <code>a</code> is just <code>s-&gt;a</code>, with a total weight of 3. If you go from <code>s</code> to <code>b</code> first, and then to <code>a</code>, the total weight will be at least 4 or moreâ€”never less than 3.</p><p>But if there is a negative weight edge, things change. For example, if the edge <code>b-&gt;a</code> has weight -10, then the path <code>s-&gt;b-&gt;a</code> has a total weight of -6, which is much less than 3.</p><p>For algorithms like Dijkstra that use a greedy strategy, there is an important assumption: <strong>the total path weight always increases as you use more edges</strong>. Negative weight edges break this assumption, and the algorithm fails.</p><p>If the graph has a negative weight cycle, the shortest path problem has no meaning. For example, if there is a negative weight cycle on the path from <code>s</code> to <code>a</code>, you could keep going around the cycle forever, making the total path weight smaller and smaller.</p><p>Among common shortest path algorithms, Dijkstra and A* cannot handle negative weight edges. Floyd and Bellman-Ford can handle negative weights, and Bellman-Ford is often used to detect negative weight cycles.</p><p>Next, letâ€™s look at the core ideas of these algorithms.</p><h2 class=\"hidden-for-toc\" id=\"introduction-to-dijkstra-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-dijkstra-s-algorithm\"><span>Introduction to Dijkstra's Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-a-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-a-algorithm\"><span>Introduction to A* Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-bellman-ford-spfa-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-bellman-ford-spfa-algorithm\"><span>Introduction to Bellman-Ford/SPFA Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"introduction-to-floyd-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-floyd-s-algorithm\"><span>Introduction to Floyd's Algorithm</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">Graph Basics and Common Code Implementations</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Dijkstra and A* algorithms are extensions of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. They can solve single-source shortest path problems without negative weights.</p><p>The SPFA algorithm (queue-based Bellman-Ford algorithm) is also an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. It can handle single-source shortest path problems with negative weights.</p><p>The Floyd algorithm is an application of <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming</a>. It can solve all-pairs (multi-source) shortest path problems.</p></div> <p class=\"hint-container-title\">In One Sentence</p> <p>Dijkstra and A* algorithms are extensions of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. They can solve single-source shortest path problems without negative weights.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a> <p>The SPFA algorithm (queue-based Bellman-Ford algorithm) is also an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a>. It can handle single-source shortest path problems with negative weights.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">BFS Traversal in Graphs</a> <p>The Floyd algorithm is an application of <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming</a>. It can solve all-pairs (multi-source) shortest path problems.</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming</a> <div class=\"markmap-wrapper\"><svg class=\"markmap-svg\" id=\"markmap-28\"></svg><div style=\"display:flex;align-items:center;justify-content:center;height:360px;\" class=\"markmap-loading\"><span style=\"--loading-icon: url(&quot;data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E&quot;);--icon-size: 48px;display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)\"></span></div></div> <svg class=\"markmap-svg\" id=\"markmap-28\"></svg> <div style=\"display:flex;align-items:center;justify-content:center;height:360px;\" class=\"markmap-loading\"><span style=\"--loading-icon: url(&quot;data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E&quot;);--icon-size: 48px;display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)\"></span></div> <span style=\"--loading-icon: url(&quot;data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='xMidYMid' viewBox='25 25 50 50'%3E%3CanimateTransform attributeName='transform' type='rotate' dur='2s' keyTimes='0;1' repeatCount='indefinite' values='0;360'%3E%3C/animateTransform%3E%3Ccircle cx='50' cy='50' r='20' fill='none' stroke='currentColor' stroke-width='4' stroke-linecap='round'%3E%3Canimate attributeName='stroke-dasharray' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='1,200;90,200;1,200'%3E%3C/animate%3E%3Canimate attributeName='stroke-dashoffset' dur='1.5s' keyTimes='0;0.5;1' repeatCount='indefinite' values='0;-35px;-125px'%3E%3C/animate%3E%3C/circle%3E%3C/svg%3E&quot;);--icon-size: 48px;display: inline-block;width: var(--icon-size);height: var(--icon-size);background-color: currentcolor;-webkit-mask-image: var(--loading-icon);mask-image: var(--loading-icon)\"></span> <p>Beginners do not need to think graph algorithms are hard. They are just extensions of simple algorithm ideas. Once you understand basic tree level-order traversal, you can come up with these algorithms yourself.</p> <p>Since this is a basic knowledge chapter, I will not provide full code for each algorithm here. The detailed code will be shown in later chapters.</p> <p>This article focuses on the main ideas, usage scenarios, and how these advanced algorithms connect with basic knowledge. It will help you get a complete understanding of shortest path algorithms on graphs.</p> <h2 id=\"overview-of-shortest-path-problems\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#overview-of-shortest-path-problems\"><span>Overview of Shortest Path Problems</span></a></h2> <a class=\"header-anchor\" href=\"#overview-of-shortest-path-problems\"><span>Overview of Shortest Path Problems</span></a> <span>Overview of Shortest Path Problems</span> <p>Shortest path problems are used a lot in real life, for example, to find the minimum cost, shortest distance, or least time.</p> <p>In algorithms, we usually model these problems as finding the smallest path weight in a <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">weighted graph</a>. In this article, <strong>\"shortest path\" and \"minimum path weight sum\" mean the same thing.</strong></p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">weighted graph</a> <strong>\"shortest path\" and \"minimum path weight sum\" mean the same thing.</strong> <p>There are two main types of shortest path problems: \"single-source shortest path\" and \"all-pairs shortest path\". Below are some classic algorithms.</p> <h3 id=\"single-source-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#single-source-shortest-path\"><span>Single-source Shortest Path</span></a></h3> <a class=\"header-anchor\" href=\"#single-source-shortest-path\"><span>Single-source Shortest Path</span></a> <span>Single-source Shortest Path</span> <p>Single-source shortest path means finding the shortest path from one starting point to <strong>all other nodes</strong>.</p> <strong>all other nodes</strong> <p>For example, if a graph has <code>n</code> nodes labeled <code>0, 1, 2, ..., n-1</code>, and you are asked to find the shortest path from node <code>2</code> to every other node, this is a single-source shortest path problem.</p> <code>n</code> <code>0, 1, 2, ..., n-1</code> <code>2</code> <p>The output of a single-source shortest path algorithm is usually a one-dimensional array <code>distTo</code>, where <code>distTo[i]</code> means the shortest path length from the start node to node <code>i</code>.</p> <code>distTo</code> <code>distTo[i]</code> <code>i</code> <p>Common single-source shortest path algorithms are:</p> <ol><li><p>Dijkstra algorithm. It is basically BFS plus a greedy idea. It is efficient, but cannot handle graphs with negative weights.</p></li><li><p>Queue-based Bellman-Ford algorithm. This is also based on BFS. It can handle negative weights, but is slower than Dijkstra.</p></li></ol> <li><p>Dijkstra algorithm. It is basically BFS plus a greedy idea. It is efficient, but cannot handle graphs with negative weights.</p></li> <p>Dijkstra algorithm. It is basically BFS plus a greedy idea. It is efficient, but cannot handle graphs with negative weights.</p> <li><p>Queue-based Bellman-Ford algorithm. This is also based on BFS. It can handle negative weights, but is slower than Dijkstra.</p></li> <p>Queue-based Bellman-Ford algorithm. This is also based on BFS. It can handle negative weights, but is slower than Dijkstra.</p> <h3 id=\"point-to-point-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#point-to-point-shortest-path\"><span>Point-to-Point Shortest Path</span></a></h3> <a class=\"header-anchor\" href=\"#point-to-point-shortest-path\"><span>Point-to-Point Shortest Path</span></a> <span>Point-to-Point Shortest Path</span> <p>In many algorithm problems, we don't need to find the shortest paths from a start node to all other nodes. We only need to find the shortest path from a start node <code>src</code> to a target node <code>dst</code>. This kind of problem is called a point-to-point shortest path problem.</p> <code>src</code> <code>dst</code> <p><strong>Usually, the point-to-point shortest path problem can be seen as a special case of the single-source shortest path problem.</strong> You can run a single-source shortest path algorithm from <code>src</code>, and stop early when you reach <code>dst</code>.</p> <strong>Usually, the point-to-point shortest path problem can be seen as a special case of the single-source shortest path problem.</strong> <code>src</code> <code>dst</code> <p>But there is an algorithm designed just for point-to-point problems: the <strong>A* Algorithm</strong> (A Star Algorithm).</p> <strong>A* Algorithm</strong> <p>I often say that the core of algorithms is brute-force search. If you want to make brute-force more efficient, you should use as much information as possible. In point-to-point shortest path problems (where both the start and end are known), you have more information than in single-source shortest path problems (where only the start is known). So, you can use this extra information to make the algorithm faster.</p> <p>For example, if you know the target is to the lower right of the start, you can guess that searching towards the lower right may reach the target faster.</p> <p>This is the key idea of the A* algorithm: it makes full use of the known information and searches in a certain direction to find the target faster. This kind of algorithm is called a <strong>heuristic search algorithm</strong>.</p> <strong>heuristic search algorithm</strong> <p>But remember, this guess is only a rule of thumb and is not always correct. For example, the lower right may be a dead end, and you might need to go around to the upper left to reach the target.</p> <p>So, heuristic algorithms need to set a reasonable heuristic function. You need to balance between the rule of thumb and the real situation to make sure the algorithm is still efficient even if the guess is wrong.</p> <h3 id=\"all-pairs-shortest-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-pairs-shortest-path\"><span>All-Pairs Shortest Path</span></a></h3> <a class=\"header-anchor\" href=\"#all-pairs-shortest-path\"><span>All-Pairs Shortest Path</span></a> <span>All-Pairs Shortest Path</span> <p>The <strong>all-pairs shortest path</strong> problem asks you to find the shortest paths between any two nodes in a graph.</p> <strong>all-pairs shortest path</strong> <p>For example, if a graph has <code>n</code> nodes numbered from <code>0, 1, 2, ..., n-1</code>, you need to find the shortest path between every pair of nodes. This is called the all-pairs shortest path problem.</p> <code>n</code> <code>0, 1, 2, ..., n-1</code> <p>The final output of an all-pairs shortest path algorithm is a 2D array <code>dist</code>, where <code>dist[i][j]</code> means the shortest path length from node <code>i</code> to node <code>j</code>.</p> <code>dist</code> <code>dist[i][j]</code> <code>i</code> <code>j</code> <p>The most famous algorithm for this is the Floyd algorithm, which is actually a dynamic programming algorithm.</p> <p>In theory, you can run a single-source shortest path algorithm for every node to solve this problem.</p> <p>But in practice, you should choose the algorithm based on the graphâ€™s structure. Sometimes, using Floyd is more efficient. Other times, running Dijkstra multiple times is better. You will understand this when we talk about the complexity of these algorithms later.</p> <h3 id=\"the-effect-of-negative-weight-edges\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-effect-of-negative-weight-edges\"><span>The Effect of Negative Weight Edges</span></a></h3> <a class=\"header-anchor\" href=\"#the-effect-of-negative-weight-edges\"><span>The Effect of Negative Weight Edges</span></a> <span>The Effect of Negative Weight Edges</span> <p>When finding the shortest path, you must pay attention to whether the graph has <strong>negative weight edges</strong>. If it does, you must check for <strong>negative weight cycles</strong>.</p> <strong>negative weight edges</strong> <strong>negative weight cycles</strong> <p>Why do negative weight edges matter? Because they make the problem more complicated. Hereâ€™s a simple example to help you understand:</p> <p>Suppose you are at the starting node <code>s</code>. There are two neighbors: <code>a</code> and <code>b</code>. The edge <code>s-&gt;a</code> has weight 3, and <code>s-&gt;b</code> has weight 4.</p> <code>s</code> <code>a</code> <code>b</code> <code>s-&gt;a</code> <code>s-&gt;b</code> <p>If there are no negative weight edges, then it's clear that the shortest path from <code>s</code> to <code>a</code> is just <code>s-&gt;a</code>, with a total weight of 3. If you go from <code>s</code> to <code>b</code> first, and then to <code>a</code>, the total weight will be at least 4 or moreâ€”never less than 3.</p> <code>s</code> <code>a</code> <code>s-&gt;a</code> <code>s</code> <code>b</code> <code>a</code> <p>But if there is a negative weight edge, things change. For example, if the edge <code>b-&gt;a</code> has weight -10, then the path <code>s-&gt;b-&gt;a</code> has a total weight of -6, which is much less than 3.</p> <code>b-&gt;a</code> <code>s-&gt;b-&gt;a</code> <p>For algorithms like Dijkstra that use a greedy strategy, there is an important assumption: <strong>the total path weight always increases as you use more edges</strong>. Negative weight edges break this assumption, and the algorithm fails.</p> <strong>the total path weight always increases as you use more edges</strong> <p>If the graph has a negative weight cycle, the shortest path problem has no meaning. For example, if there is a negative weight cycle on the path from <code>s</code> to <code>a</code>, you could keep going around the cycle forever, making the total path weight smaller and smaller.</p> <code>s</code> <code>a</code> <p>Among common shortest path algorithms, Dijkstra and A* cannot handle negative weight edges. Floyd and Bellman-Ford can handle negative weights, and Bellman-Ford is often used to detect negative weight cycles.</p> <p>Next, letâ€™s look at the core ideas of these algorithms.</p> <h2 class=\"hidden-for-toc\" id=\"introduction-to-dijkstra-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-dijkstra-s-algorithm\"><span>Introduction to Dijkstra's Algorithm</span></a></h2> <a class=\"header-anchor\" href=\"#introduction-to-dijkstra-s-algorithm\"><span>Introduction to Dijkstra's Algorithm</span></a> <span>Introduction to Dijkstra's Algorithm</span> <h2 class=\"hidden-for-toc\" id=\"introduction-to-a-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-a-algorithm\"><span>Introduction to A* Algorithm</span></a></h2> <a class=\"header-anchor\" href=\"#introduction-to-a-algorithm\"><span>Introduction to A* Algorithm</span></a> <span>Introduction to A* Algorithm</span> <h2 class=\"hidden-for-toc\" id=\"introduction-to-bellman-ford-spfa-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-bellman-ford-spfa-algorithm\"><span>Introduction to Bellman-Ford/SPFA Algorithm</span></a></h2> <a class=\"header-anchor\" href=\"#introduction-to-bellman-ford-spfa-algorithm\"><span>Introduction to Bellman-Ford/SPFA Algorithm</span></a> <span>Introduction to Bellman-Ford/SPFA Algorithm</span> <h2 class=\"hidden-for-toc\" id=\"introduction-to-floyd-s-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#introduction-to-floyd-s-algorithm\"><span>Introduction to Floyd's Algorithm</span></a></h2> <a class=\"header-anchor\" href=\"#introduction-to-floyd-s-algorithm\"><span>Introduction to Floyd's Algorithm</span></a> <span>Introduction to Floyd's Algorithm</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/eulerian-graph/\" aria-label=\"Eulerian Graph and One-Stroke Game\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Eulerian Graph and One-Stroke Game</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/graph-minimum-spanning-tree/\" aria-label=\"Minimum Spanning Tree Algorithms Overview\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Minimum Spanning Tree Algorithms Overview<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/eulerian-graph/\" aria-label=\"Eulerian Graph and One-Stroke Game\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Eulerian Graph and One-Stroke Game</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Eulerian Graph and One-Stroke Game</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/graph-minimum-spanning-tree/\" aria-label=\"Minimum Spanning Tree Algorithms Overview\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Minimum Spanning Tree Algorithms Overview<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Minimum Spanning Tree Algorithms Overview<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}