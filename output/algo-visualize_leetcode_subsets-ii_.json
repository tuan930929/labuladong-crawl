{
    "url": "https://labuladong.online/algo-visualize/leetcode/subsets-ii/",
    "title": "子集 II | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var subsetsWithDup = function(nums) {\n    // 定义结果数组和回溯时的路径数组\n    let res = [];\n    let track = [];\n\n    // 排序，以便于剪枝算法的实现\n    nums.sort((a, b) => a - b);\n\n    // 回溯算法\n    // @visualize status(track)\n    const backtrack = function(nums, start) {\n        // 前序位置，每个节点的值都是一个子集\n        // @visualize color *backtrack._vizNode #green\n        res.push([...track]);\n\n        // 遍历子集树枝\n        for (let i = start; i < nums.length; i++) {\n            // 剪枝逻辑，值相同的相邻树枝，只遍历第一条\n            if (i > start && nums[i] === nums[i - 1]) {\n                continue;\n            }\n            // 选择当前元素，加入路径数组\n            // @visualize choose(nums[i])\n            track.push(nums[i]);\n            // 向子节点递归\n            backtrack(nums, i + 1);\n            // 回溯，撤销选择\n            // @visualize unchoose()\n            track.pop();\n        }\n    }\n\n    backtrack(nums, 0);\n    return res;\n};\n\nlet result = subsetsWithDup([1, 2, 2]);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}