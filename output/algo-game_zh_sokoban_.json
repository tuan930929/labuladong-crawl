{
    "url": "https://labuladong.online/algo-game/zh/sokoban/",
    "title": "推箱子 | labuladong.online",
    "content": "<div class=\"content-container horizontal-layout\"><div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div></div> <div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div> <div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div> <div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div> <div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div> <template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template> <div>loading...</div> <div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div> <div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div> <div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div></div> <div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div></div> <div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div> <h4>题目</h4> <div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div> <a href=\"https://labuladong.online/algo/game/sokoban/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a> <div class=\"question-content\"><p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 提供以下方法：</p>\n<ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul>\n<h3>算法提示</h3>\n<ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul>\n<p>祝你好运！</p></div> <p>推箱子(Sokoban)是一个经典的益智游戏，你需要控制仓库管理员推动箱子到指定位置。</p> <h3>游戏规则</h3> <ul>\n<li>玩家控制一个仓库管理员，可以上下左右移动</li>\n<li>管理员可以推动箱子，但不能拉动箱子</li>\n<li>目标是将所有箱子推到目标位置上</li>\n<li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li>\n<li>箱子不能推出边界或推到墙壁上</li>\n</ul> <li>玩家控制一个仓库管理员，可以上下左右移动</li> <li>管理员可以推动箱子，但不能拉动箱子</li> <li>目标是将所有箱子推到目标位置上</li> <li>管理员不能推动多个箱子，也不能穿越墙壁或箱子</li> <li>箱子不能推出边界或推到墙壁上</li> <h3>你的任务</h3> <p>实现一个 <code>solvePushBox</code> 函数，通过操作 <code>gameController</code> 来自动解决推箱子问题。</p> <code>solvePushBox</code> <code>gameController</code> <h3>输入</h3> <p><code>gameController</code> 提供以下方法：</p> <code>gameController</code> <ul>\n<li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li>\n<li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li>\n<li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li>\n</ul> <li>\n<p><code>getBoard()</code>: 获取当前游戏板状态</p>\n<ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul>\n</li> <p><code>getBoard()</code>: 获取当前游戏板状态</p> <code>getBoard()</code> <ul>\n<li>返回二维数组，包含不同类型的格子：</li>\n<li>0: 空地</li>\n<li>1: 墙壁</li>\n<li>2: 目标位置</li>\n<li>3: 箱子</li>\n<li>4: 玩家</li>\n<li>5: 箱子在目标位置上</li>\n<li>6: 玩家在目标位置上</li>\n</ul> <li>返回二维数组，包含不同类型的格子：</li> <li>0: 空地</li> <li>1: 墙壁</li> <li>2: 目标位置</li> <li>3: 箱子</li> <li>4: 玩家</li> <li>5: 箱子在目标位置上</li> <li>6: 玩家在目标位置上</li> <li>\n<p><code>move(direction)</code>: 移动玩家</p>\n<ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul>\n</li> <p><code>move(direction)</code>: 移动玩家</p> <code>move(direction)</code> <ul>\n<li>direction: 'up', 'down', 'left', 'right'</li>\n<li>如果移动导致推动箱子，会自动处理箱子移动</li>\n<li>无效移动会被忽略</li>\n</ul> <li>direction: 'up', 'down', 'left', 'right'</li> <li>如果移动导致推动箱子，会自动处理箱子移动</li> <li>无效移动会被忽略</li> <li>\n<p><code>isCompleted()</code>: 检查是否完成游戏</p>\n<ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul>\n</li> <p><code>isCompleted()</code>: 检查是否完成游戏</p> <code>isCompleted()</code> <ul>\n<li>返回 true 表示所有箱子都在目标位置上</li>\n</ul> <li>返回 true 表示所有箱子都在目标位置上</li> <h3>算法提示</h3> <ul>\n<li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li>\n<li><strong>A*算法</strong>: 使用启发式函数优化搜索</li>\n<li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li>\n<li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li>\n</ul> <li><strong>广度优先搜索(BFS)</strong>: 寻找最短步数解</li> <strong>广度优先搜索(BFS)</strong> <li><strong>A*算法</strong>: 使用启发式函数优化搜索</li> <strong>A*算法</strong> <li><strong>状态压缩</strong>: 用字符串或哈希表记录访问过的状态</li> <strong>状态压缩</strong> <li><strong>回溯算法</strong>: 深度优先搜索所有可能的移动序列</li> <strong>回溯算法</strong> <h3>注意事项</h3> <ul>\n<li>需要避免重复访问相同的游戏状态</li>\n<li>可以使用曼哈顿距离作为启发式函数</li>\n<li>考虑死锁检测（箱子被推到无法移动的位置）</li>\n</ul> <li>需要避免重复访问相同的游戏状态</li> <li>可以使用曼哈顿距离作为启发式函数</li> <li>考虑死锁检测（箱子被推到无法移动的位置）</li> <p>祝你好运！</p> <div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div> <div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div> <div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div> <h3 class=\"editor-title\">编辑器</h3> <div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div> <button>提交</button> <button>恢复</button> <button>Console+</button> <div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div> <div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div> <div class=\"cm-theme code-mirror-wrapper\"></div> <div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div> <div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div> <div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div> <h3>控制台输出</h3> <div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div> <button>清空日志</button> <button class=\"close-button\" title=\"关闭\">×</button> <div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div> <p class=\"no-logs\">暂无日志输出</p>"
}