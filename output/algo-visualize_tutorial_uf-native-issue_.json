{
    "url": "https://labuladong.online/algo-visualize/tutorial/uf-native-issue/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } // 示例：未优化的 UF 算法可能产生性能问题\n\n// 创建一个未优化的并查集结构，包含 6 个节点\nlet uf = UF.createNaive(6)\n// 显示并查集的底层数组\nuf.showArray()\n\n\n// 未优化的 UF 算法不会考虑合并后的树的深度\n// 所以对于特定顺序的 union 操作，可能让森林退化成链表\n// 这样一来，union, connected, find 操作的时间复杂度就退化成了 O(n)\n// 下面就举一个例子\n\nuf.union(0, 1)\nuf.union(1, 2)\nuf.union(2, 3)\nuf.union(4, 5)\nuf.union(3, 4)\n\n// 测试节点 0 和节点 1 的连通性，打印 true\n// 此时 connected 方法相当于遍历单链表，时间复杂度为 O(n)\nconsole.log('0 <-> 1:', uf.connected(0, 1))\n\n// 返回当前并查集中连通分量的数量\nconsole.log('Connected components:', uf.count())\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}