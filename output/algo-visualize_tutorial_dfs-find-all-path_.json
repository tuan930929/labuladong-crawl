{
    "url": "https://labuladong.online/algo-visualize/tutorial/dfs-find-all-path/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } // 输入二叉树的根节点，返回所有从根节点到叶子节点的路径\nvar findAllPaths = function(root) {\n    // res 用来存放所有路径\n    const res = [];\n    // path 用来存放当前正在遍历的路径\n    const path = [];\n\n    const traverse = (root) => {\n        if (root === null) {\n            return;\n        }\n\n        // 前序位置进入节点时，把节点值加入 path\n        // @visualize color *root #7ed67e\n        path.push(root.val);\n\n        if (root.left === null && root.right === null) {\n            // 到达叶子节点，找到一条路径\n            // @visualize color *root #6ccff9\n            res.push([...path]);\n        }\n\n        traverse(root.left);\n        traverse(root.right);\n\n        // 后序位置离开节点时，把节点值从 path 中移除\n        // @visualize color *root #unset\n        path.pop();\n    };\n\n    traverse(root);\n\n    return res;\n};\n\nlet _allRoot = BTree.createRoot([10,5,-3,3,2,4,6,3,-2,null,1]);\nlet result = findAllPaths(_allRoot);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}