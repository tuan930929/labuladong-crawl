{
    "url": "https://labuladong.online/algo-visualize/leetcode/partition-list/",
    "title": "分隔链表 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } var partition = function(head, x) {\n    // 存放小于 x 的链表的虚拟头结点\n    let dummy1 = new ListNode(-1);\n    // @visualize color *dummy1 #4b4848\n    // 存放大于等于 x 的链表的虚拟头结点\n    let dummy2 = new ListNode(-1);\n    // @visualize color *dummy2 #4b4848\n    // p1, p2 指针负责生成结果链表\n    let p1 = dummy1, p2 = dummy2;\n    // p 负责遍历原链表，类似合并两个有序链表的逻辑\n    // 这里是将一个链表分解成两个链表\n    let p = head;\n    while (p !== null) {\n        if (p.val >= x) {\n            // @visualize color *p #4b93ae\n            p2.next = p;\n            p2 = p2.next;\n        } else {\n            // @visualize color *p #9f435d\n            p1.next = p;\n            p1 = p1.next;\n        }\n        // 断开原链表中的每个节点的 next 指针\n        let temp = p.next;\n        p.next = null;\n        p = temp;\n    }\n    // 链接两个链表\n    p1.next = dummy2.next;\n\n    return dummy1.next;\n};\n\nlet result = partition(LinkedList.createHead([1,4,3,2,5,2]), 3)\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}