{
    "url": "https://labuladong.online/algo/en/practice-in-action/sudoku-nqueue/",
    "title": "Backtracking in Action: Sudoku and N-Queens | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Backtracking in Action: Sudoku and N-Queens</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8145 words</span><meta property=\"wordCount\" content=\"8145\"></span></div><hr></div> <h1><!---->Backtracking in Action: Sudoku and N-Queens</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8145 words</span><meta property=\"wordCount\" content=\"8145\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8145 words</span><meta property=\"wordCount\" content=\"8145\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 8145 words</span> <meta property=\"wordCount\" content=\"8145\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 37. Sudoku Solver https://leetcode.com/problems/sudoku-solver </h3><h3 tabindex=\"-1\"> 51. N-Queens https://leetcode.com/problems/n-queens </h3><h3 tabindex=\"-1\"> 52. N-Queens II https://leetcode.com/problems/n-queens-ii </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div><p>If you have already learned the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Core Framework of Backtracking Algorithm</a>, this article will explore two classic algorithm problems: Sudoku and the N-Queens problem.</p><p>I chose these two problems because their solutions are very similar, and they are both interesting applications of backtracking in real life.</p><h2 id=\"game-introduction\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#game-introduction\"><span>Game Introduction</span></a></h2><h3 id=\"sudoku\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku\"><span>Sudoku</span></a></h3><p>You may have played Sudoku before. It gives you a 9x9 board, where some cells are filled with numbers. You need to fill the rest with numbers 1 to 9, so that no number repeats in any row, column, or 3x3 sub-box.</p><p>Here is an example of a Sudoku puzzle (from <a href=\"https://en.wikipedia.org/wiki/Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku2.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>When I was young, I tried to play Sudoku. If the puzzle was a bit hard, I could not solve it. Later, I found out there are some tricks to solve Sudoku. Some Sudoku apps can teach you these tricks, but I found them too complicated and lost interest.</p><p>Now, after learning backtracking, even hard Sudoku problems canâ€™t stop me. As long as there are rules, we can use brute-force to find a solution, right?</p><p>Here is an example of solving Sudoku with backtracking:</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku_slove.gif\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>I will explain the solution in detail later.</p><h3 id=\"n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#n-queens-problem\"><span>N-Queens Problem</span></a></h3><p>In chess, the queen can attack any unit in the same row, column, or diagonal. The N-Queens problem asks you to place N queens on an NÃ—N chessboard, so that no two queens attack each other.</p><p>In other words, put N queens on an NÃ—N board so that each row, column, and diagonal has only one queen.</p><p>Here is a solution to the 8-Queens problem (from <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/8queue.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>You can see, for any queen, there is no other queen in its row, column, or diagonals (top-left, top-right, bottom-left, bottom-right). So this is a valid solution.</p><p>Before talking about these problems, I want to show you a simple backtracking problem as a warm up. It will make it easier to understand how to solve Sudoku and N-Queens.</p><h2 id=\"all-possible-n-bit-binary-numbers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-possible-n-bit-binary-numbers\"><span>All Possible n-bit Binary Numbers</span></a></h2><p>Letâ€™s try a simple problem. Please write a function:</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-114-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-114-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>The function takes a positive integer <code>n</code> and returns all binary numbers (made of 0 and 1) of length <code>n</code>. You can return the answers in any order.</p><p>For example, if <code>n = 3</code>, you need to return the following <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> binary numbers as strings:</p><div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>000</span></span>\n<span class=\"line\"><span>001</span></span>\n<span class=\"line\"><span>010</span></span>\n<span class=\"line\"><span>011</span></span>\n<span class=\"line\"><span>100</span></span>\n<span class=\"line\"><span>101</span></span>\n<span class=\"line\"><span>110</span></span>\n<span class=\"line\"><span>111</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>You can think of this problem as a simpler version of Sudoku and N-Queens:</p><p>This problem asks you to brute-force every position in a 1D array of length <code>n</code>. Each position can be 0 or 1.</p><p>Sudoku asks you to brute-force every position in a 9x9 2D array. Each cell can be 1~9, and no repeats in any row, column, or 3x3 box.</p><p>N-Queens asks you to brute-force every position in an N x N 2D array. Each cell can be empty or have a queen (like 0 or 1). No two queens can be in the same row, column, or diagonal.</p><p>So, if you understand how to brute-force this simple problem, the other problems are similar, just with more rules.</p><h3 class=\"hidden-for-toc\" id=\"solution-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-analysis\"><span>Solution Analysis</span></a></h3><h2 class=\"hidden-for-toc\" id=\"sudoku-game-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku-game-solution\"><span>Sudoku Game Solution</span></a></h2><h2 class=\"hidden-for-toc\" id=\"solution-to-the-n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-to-the-n-queens-problem\"><span>Solution to the N-Queens Problem</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 37. Sudoku Solver https://leetcode.com/problems/sudoku-solver </h3><h3 tabindex=\"-1\"> 51. N-Queens https://leetcode.com/problems/n-queens </h3><h3 tabindex=\"-1\"> 52. N-Queens II https://leetcode.com/problems/n-queens-ii </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div><p>If you have already learned the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Core Framework of Backtracking Algorithm</a>, this article will explore two classic algorithm problems: Sudoku and the N-Queens problem.</p><p>I chose these two problems because their solutions are very similar, and they are both interesting applications of backtracking in real life.</p><h2 id=\"game-introduction\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#game-introduction\"><span>Game Introduction</span></a></h2><h3 id=\"sudoku\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku\"><span>Sudoku</span></a></h3><p>You may have played Sudoku before. It gives you a 9x9 board, where some cells are filled with numbers. You need to fill the rest with numbers 1 to 9, so that no number repeats in any row, column, or 3x3 sub-box.</p><p>Here is an example of a Sudoku puzzle (from <a href=\"https://en.wikipedia.org/wiki/Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku2.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>When I was young, I tried to play Sudoku. If the puzzle was a bit hard, I could not solve it. Later, I found out there are some tricks to solve Sudoku. Some Sudoku apps can teach you these tricks, but I found them too complicated and lost interest.</p><p>Now, after learning backtracking, even hard Sudoku problems canâ€™t stop me. As long as there are rules, we can use brute-force to find a solution, right?</p><p>Here is an example of solving Sudoku with backtracking:</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku_slove.gif\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>I will explain the solution in detail later.</p><h3 id=\"n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#n-queens-problem\"><span>N-Queens Problem</span></a></h3><p>In chess, the queen can attack any unit in the same row, column, or diagonal. The N-Queens problem asks you to place N queens on an NÃ—N chessboard, so that no two queens attack each other.</p><p>In other words, put N queens on an NÃ—N board so that each row, column, and diagonal has only one queen.</p><p>Here is a solution to the 8-Queens problem (from <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p><div class=\"img-content\"><img src=\"/algo/images/sudoku/8queue.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>You can see, for any queen, there is no other queen in its row, column, or diagonals (top-left, top-right, bottom-left, bottom-right). So this is a valid solution.</p><p>Before talking about these problems, I want to show you a simple backtracking problem as a warm up. It will make it easier to understand how to solve Sudoku and N-Queens.</p><h2 id=\"all-possible-n-bit-binary-numbers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-possible-n-bit-binary-numbers\"><span>All Possible n-bit Binary Numbers</span></a></h2><p>Letâ€™s try a simple problem. Please write a function:</p><div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-114-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-114-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div><p>The function takes a positive integer <code>n</code> and returns all binary numbers (made of 0 and 1) of length <code>n</code>. You can return the answers in any order.</p><p>For example, if <code>n = 3</code>, you need to return the following <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> binary numbers as strings:</p><div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>000</span></span>\n<span class=\"line\"><span>001</span></span>\n<span class=\"line\"><span>010</span></span>\n<span class=\"line\"><span>011</span></span>\n<span class=\"line\"><span>100</span></span>\n<span class=\"line\"><span>101</span></span>\n<span class=\"line\"><span>110</span></span>\n<span class=\"line\"><span>111</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>You can think of this problem as a simpler version of Sudoku and N-Queens:</p><p>This problem asks you to brute-force every position in a 1D array of length <code>n</code>. Each position can be 0 or 1.</p><p>Sudoku asks you to brute-force every position in a 9x9 2D array. Each cell can be 1~9, and no repeats in any row, column, or 3x3 box.</p><p>N-Queens asks you to brute-force every position in an N x N 2D array. Each cell can be empty or have a queen (like 0 or 1). No two queens can be in the same row, column, or diagonal.</p><p>So, if you understand how to brute-force this simple problem, the other problems are similar, just with more rules.</p><h3 class=\"hidden-for-toc\" id=\"solution-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-analysis\"><span>Solution Analysis</span></a></h3><h2 class=\"hidden-for-toc\" id=\"sudoku-game-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku-game-solution\"><span>Sudoku Game Solution</span></a></h2><h2 class=\"hidden-for-toc\" id=\"solution-to-the-n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-to-the-n-queens-problem\"><span>Solution to the N-Queens Problem</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 37. Sudoku Solver https://leetcode.com/problems/sudoku-solver </h3><h3 tabindex=\"-1\"> 51. N-Queens https://leetcode.com/problems/n-queens </h3><h3 tabindex=\"-1\"> 52. N-Queens II https://leetcode.com/problems/n-queens-ii </h3></div> <h3 tabindex=\"-1\"> 37. Sudoku Solver https://leetcode.com/problems/sudoku-solver </h3> <h3 tabindex=\"-1\"> 51. N-Queens https://leetcode.com/problems/n-queens </h3> <h3 tabindex=\"-1\"> 52. N-Queens II https://leetcode.com/problems/n-queens-ii </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div> <p class=\"hint-container-title\">This article will resolve</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">Difficulty</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a></td> <a href=\"https://leetcode.com/problems/sudoku-solver/\" target=\"_blank\" rel=\"noopener noreferrer\">37. Sudoku Solver</a> <td style=\"text-align:center;\">ðŸ”´</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a></td> <a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener noreferrer\">51. N-Queens</a> <td style=\"text-align:center;\">ðŸ”´</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a></td> <a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">52. N-Queens II</a> <td style=\"text-align:center;\">ðŸ”´</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you need to study:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a> <p>If you have already learned the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Core Framework of Backtracking Algorithm</a>, this article will explore two classic algorithm problems: Sudoku and the N-Queens problem.</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Core Framework of Backtracking Algorithm</a> <p>I chose these two problems because their solutions are very similar, and they are both interesting applications of backtracking in real life.</p> <h2 id=\"game-introduction\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#game-introduction\"><span>Game Introduction</span></a></h2> <a class=\"header-anchor\" href=\"#game-introduction\"><span>Game Introduction</span></a> <span>Game Introduction</span> <h3 id=\"sudoku\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku\"><span>Sudoku</span></a></h3> <a class=\"header-anchor\" href=\"#sudoku\"><span>Sudoku</span></a> <span>Sudoku</span> <p>You may have played Sudoku before. It gives you a 9x9 board, where some cells are filled with numbers. You need to fill the rest with numbers 1 to 9, so that no number repeats in any row, column, or 3x3 sub-box.</p> <p>Here is an example of a Sudoku puzzle (from <a href=\"https://en.wikipedia.org/wiki/Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p> <a href=\"https://en.wikipedia.org/wiki/Sudoku\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a> <div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku2.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/sudoku/sudoku2.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>When I was young, I tried to play Sudoku. If the puzzle was a bit hard, I could not solve it. Later, I found out there are some tricks to solve Sudoku. Some Sudoku apps can teach you these tricks, but I found them too complicated and lost interest.</p> <p>Now, after learning backtracking, even hard Sudoku problems canâ€™t stop me. As long as there are rules, we can use brute-force to find a solution, right?</p> <p>Here is an example of solving Sudoku with backtracking:</p> <div class=\"img-content\"><img src=\"/algo/images/sudoku/sudoku_slove.gif\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/sudoku/sudoku_slove.gif\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>I will explain the solution in detail later.</p> <h3 id=\"n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#n-queens-problem\"><span>N-Queens Problem</span></a></h3> <a class=\"header-anchor\" href=\"#n-queens-problem\"><span>N-Queens Problem</span></a> <span>N-Queens Problem</span> <p>In chess, the queen can attack any unit in the same row, column, or diagonal. The N-Queens problem asks you to place N queens on an NÃ—N chessboard, so that no two queens attack each other.</p> <p>In other words, put N queens on an NÃ—N board so that each row, column, and diagonal has only one queen.</p> <p>Here is a solution to the 8-Queens problem (from <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>):</p> <a href=\"https://en.wikipedia.org/wiki/Eight_queens_puzzle\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a> <div class=\"img-content\"><img src=\"/algo/images/sudoku/8queue.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/sudoku/8queue.jpg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>You can see, for any queen, there is no other queen in its row, column, or diagonals (top-left, top-right, bottom-left, bottom-right). So this is a valid solution.</p> <p>Before talking about these problems, I want to show you a simple backtracking problem as a warm up. It will make it easier to understand how to solve Sudoku and N-Queens.</p> <h2 id=\"all-possible-n-bit-binary-numbers\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#all-possible-n-bit-binary-numbers\"><span>All Possible n-bit Binary Numbers</span></a></h2> <a class=\"header-anchor\" href=\"#all-possible-n-bit-binary-numbers\"><span>All Possible n-bit Binary Numbers</span></a> <span>All Possible n-bit Binary Numbers</span> <p>Letâ€™s try a simple problem. Please write a function:</p> <div class=\"vp-code-tabs\"><div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-114-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-4\" aria-selected=\"false\">javascript</button></div><!--[--><div class=\"vp-code-tab active\" id=\"codetab-114-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><div class=\"vp-code-tab\" id=\"codetab-114-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div><!--]--></div> <div class=\"vp-code-tabs-nav\" role=\"tablist\"><button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-114-0\" aria-selected=\"true\">java</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-1\" aria-selected=\"false\">cpp</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-2\" aria-selected=\"false\">python</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-3\" aria-selected=\"false\">go</button><button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-4\" aria-selected=\"false\">javascript</button></div> <button type=\"button\" class=\"vp-code-tab-nav active\" role=\"tab\" aria-controls=\"codetab-114-0\" aria-selected=\"true\">java</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-1\" aria-selected=\"false\">cpp</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-2\" aria-selected=\"false\">python</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-3\" aria-selected=\"false\">go</button> <button type=\"button\" class=\"vp-code-tab-nav\" role=\"tab\" aria-controls=\"codetab-114-4\" aria-selected=\"false\">javascript</button> <div class=\"vp-code-tab active\" id=\"codetab-114-0\" role=\"tabpanel\" aria-expanded=\"true\"><div class=\"vp-code-tab-title\">java</div><!--[--><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">java</div> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">List</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;String&gt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> n);</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-114-1\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">cpp</div><!--[--><div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">cpp</div> <div class=\"language-cpp line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"cpp\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">vector</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">generateBinaryNumber</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> n</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-114-2\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">python</div><!--[--><div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">python</div> <div class=\"language-python line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"python\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">def</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">: </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) -&gt; List[</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">str</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">]:</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-114-3\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">go</div><!--[--><div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">go</div> <div class=\"language-go line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"go\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">func</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) []</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">string</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"vp-code-tab\" id=\"codetab-114-4\" role=\"tabpanel\" aria-expanded=\"false\"><div class=\"vp-code-tab-title\">javascript</div><!--[--><div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div><!--]--></div> <div class=\"vp-code-tab-title\">javascript</div> <div class=\"language-javascript line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"javascript\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">var</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> generateBinaryNumber</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">function</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">n</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">) {};</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <p>The function takes a positive integer <code>n</code> and returns all binary numbers (made of 0 and 1) of length <code>n</code>. You can return the answers in any order.</p> <code>n</code> <code>n</code> <p>For example, if <code>n = 3</code>, you need to return the following <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> binary numbers as strings:</p> <code>n = 3</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics></math> <semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow><annotation encoding=\"application/x-tex\">2^3=8</annotation></semantics> <mrow><msup><mn>2</mn><mn>3</mn></msup><mo>=</mo><mn>8</mn></mrow> <msup><mn>2</mn><mn>3</mn></msup> <mn>2</mn> <mn>3</mn> <mo>=</mo> <mn>8</mn> <annotation encoding=\"application/x-tex\">2^3=8</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span> <span class=\"strut\" style=\"height:0.8141em;\"></span> <span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span> <span class=\"mord\">2</span> <span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span> <span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span> <span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span> <span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span> <span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span> <span class=\"pstrut\" style=\"height:2.7em;\"></span> <span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span> <span class=\"mord mtight\">3</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"mrel\">=</span> <span class=\"mspace\" style=\"margin-right:0.2778em;\"></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span></span> <span class=\"strut\" style=\"height:0.6444em;\"></span> <span class=\"mord\">8</span> <div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>000</span></span>\n<span class=\"line\"><span>001</span></span>\n<span class=\"line\"><span>010</span></span>\n<span class=\"line\"><span>011</span></span>\n<span class=\"line\"><span>100</span></span>\n<span class=\"line\"><span>101</span></span>\n<span class=\"line\"><span>110</span></span>\n<span class=\"line\"><span>111</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>000</span></span>\n<span class=\"line\"><span>001</span></span>\n<span class=\"line\"><span>010</span></span>\n<span class=\"line\"><span>011</span></span>\n<span class=\"line\"><span>100</span></span>\n<span class=\"line\"><span>101</span></span>\n<span class=\"line\"><span>110</span></span>\n<span class=\"line\"><span>111</span></span></code></pre> <code><span class=\"line\"><span>000</span></span>\n<span class=\"line\"><span>001</span></span>\n<span class=\"line\"><span>010</span></span>\n<span class=\"line\"><span>011</span></span>\n<span class=\"line\"><span>100</span></span>\n<span class=\"line\"><span>101</span></span>\n<span class=\"line\"><span>110</span></span>\n<span class=\"line\"><span>111</span></span></code> <span class=\"line\"><span>000</span></span> <span>000</span> <span class=\"line\"><span>001</span></span> <span>001</span> <span class=\"line\"><span>010</span></span> <span>010</span> <span class=\"line\"><span>011</span></span> <span>011</span> <span class=\"line\"><span>100</span></span> <span>100</span> <span class=\"line\"><span>101</span></span> <span>101</span> <span class=\"line\"><span>110</span></span> <span>110</span> <span class=\"line\"><span>111</span></span> <span>111</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>You can think of this problem as a simpler version of Sudoku and N-Queens:</p> <p>This problem asks you to brute-force every position in a 1D array of length <code>n</code>. Each position can be 0 or 1.</p> <code>n</code> <p>Sudoku asks you to brute-force every position in a 9x9 2D array. Each cell can be 1~9, and no repeats in any row, column, or 3x3 box.</p> <p>N-Queens asks you to brute-force every position in an N x N 2D array. Each cell can be empty or have a queen (like 0 or 1). No two queens can be in the same row, column, or diagonal.</p> <p>So, if you understand how to brute-force this simple problem, the other problems are similar, just with more rules.</p> <h3 class=\"hidden-for-toc\" id=\"solution-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-analysis\"><span>Solution Analysis</span></a></h3> <a class=\"header-anchor\" href=\"#solution-analysis\"><span>Solution Analysis</span></a> <span>Solution Analysis</span> <h2 class=\"hidden-for-toc\" id=\"sudoku-game-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sudoku-game-solution\"><span>Sudoku Game Solution</span></a></h2> <a class=\"header-anchor\" href=\"#sudoku-game-solution\"><span>Sudoku Game Solution</span></a> <span>Sudoku Game Solution</span> <h2 class=\"hidden-for-toc\" id=\"solution-to-the-n-queens-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solution-to-the-n-queens-problem\"><span>Solution to the N-Queens Problem</span></a></h2> <a class=\"header-anchor\" href=\"#solution-to-the-n-queens-problem\"><span>Solution to the N-Queens Problem</span></a> <span>Solution to the N-Queens Problem</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/essential-technique/backtrack-framework-2/\" aria-label=\"Backtracking Algorithm Common Patterns and Code Template\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Backtracking Algorithm Common Patterns and Code Template</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/game/sudoku/\" aria-label=\"Implement Sudoku Cheat\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Implement Sudoku Cheat<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/essential-technique/backtrack-framework-2/\" aria-label=\"Backtracking Algorithm Common Patterns and Code Template\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Backtracking Algorithm Common Patterns and Code Template</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Backtracking Algorithm Common Patterns and Code Template</div> <a class=\"route-link auto-link next\" href=\"/algo/en/game/sudoku/\" aria-label=\"Implement Sudoku Cheat\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Implement Sudoku Cheat<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Implement Sudoku Cheat<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}