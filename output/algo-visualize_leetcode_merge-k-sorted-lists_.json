{
    "url": "https://labuladong.online/algo-visualize/leetcode/merge-k-sorted-lists/",
    "title": "合并K个升序链表 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var mergeKLists = function(lists) {\n    if (lists.length === 0) return null;\n    // 虚拟头结点\n    let dummy = new ListNode(-1);\n    // @visualize color *dummy #4b4848\n    let p = dummy;\n    // 优先级队列，最小堆\n    let pq = Heap.create([], (a, b) => a.val - b.val, (a) => a.val);\n    // 将 k 个链表的头结点加入最小堆\n    for (let head of lists) {\n        if (head !== null) {\n            pq.push(head);\n        }\n    }\n\n    while (pq.size() > 0) {\n        // 获取最小节点，接到结果链表中\n        let node = pq.pop();\n        p.next = node;\n        if (node.next !== null) {\n            pq.push(node.next);\n        }\n        // p 指针不断前进\n        p = p.next;\n        \n        // 这段代码为了方便可视化\n        // @visualize global\n        let _temp = p.next;\n        p.next = null;\n    }\n    return dummy.next;\n};\n\nlet _l1 = LinkedList.createHead([0,4,5],'#9f435d');\nlet _l2 = LinkedList.createHead([1,3,7], '#398ab9');\nlet _l3 = LinkedList.createHead([2,6], '#45af6c');\n// @visualize global _l1 _l2 _l3\nlet result = mergeKLists([_l1, _l2, _l3]);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}