{
    "url": "https://labuladong.online/algo-visualize/leetcode/rotate-image/",
    "title": "旋转图像 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } var rotate = function(matrix) {\n    let n = matrix.length;\n    // 先沿对角线反转二维矩阵\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            // @visualize color *matrix[i][j] #f4b541\n            // @visualize color *matrix[j][i] #9ed157\n            // swap(matrix[i][j], matrix[j][i]);\n            let temp = matrix[i][j];\n            matrix[i][j] = matrix[j][i];\n            matrix[j][i] = temp;\n        }\n    }\n    // 然后反转二维矩阵的每一行\n    for (let row of matrix) {\n        reverse(row);\n    }\n\n    // 反转一维数组\n    function reverse(arr) {\n        let i = 0, j = arr.length - 1;\n        while (j > i) {\n            // @visualize color *arr[i] *arr[j] #4177f4\n            // swap(arr[i], arr[j]);\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n    }\n};\n\nlet matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]];\nrotate(matrix);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}