{
    "url": "https://labuladong.online/algo/en/data-structure-basic/sort-basic/",
    "title": "Key Metrics of Sorting Algorithms | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Key Metrics of Sorting Algorithms</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 539 words</span><meta property=\"wordCount\" content=\"539\"></span></div><hr></div> <h1><!---->Key Metrics of Sorting Algorithms</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 539 words</span><meta property=\"wordCount\" content=\"539\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 539 words</span><meta property=\"wordCount\" content=\"539\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 539 words</span> <meta property=\"wordCount\" content=\"539\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a></li><li><a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a></li></ul></div><p>During coding practice or interviews, you typically won't be asked to manually write sorting algorithms from scratch. However, for the sake of completeness, I have included a section that explains the principles, characteristics, time complexity, and code implementation of several common sorting algorithms using the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a>.</p><p>This article will first introduce several key metrics of sorting algorithms. When discussing specific sorting algorithms later, we will analyze them based on these metrics.</p><h2 id=\"time-and-space-complexity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#time-and-space-complexity\"><span>Time and Space Complexity</span></a></h2><p>The primary indicators for evaluating an algorithm are time complexity and space complexity.</p><p>As mentioned in <a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a>, for any algorithm, the goal is to minimize both time and space complexity.</p><h2 id=\"sorting-stability\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sorting-stability\"><span>Sorting Stability</span></a></h2><p>Stability is an important property of sorting algorithms, which can be summarized as follows:</p><p><strong>A sorting algorithm is considered \"stable\" if identical elements maintain their relative positions after sorting; otherwise, it is \"unstable.\"</strong></p><p>Stability may not matter much when sorting an array of integers. However, when sorting more complex data structures, stable sorting can be advantageous.</p><p>For instance, consider you have several order records already sorted by transaction date, and you now want to further sort them by user ID. This way, orders with the same user ID will be grouped together for easier viewing. The difference between stable and unstable sorting becomes apparent here:</p><p><strong>If you use a stable sorting algorithm</strong>, the orders with the same user ID will remain sorted by transaction date after sorting:</p><div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>   Date    UserID</span></span>\n<span class=\"line\"><span>2020-02-01  1001</span></span>\n<span class=\"line\"><span>2020-02-02  1001</span></span>\n<span class=\"line\"><span>2020-02-03  1001</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>2020-01-01  1002</span></span>\n<span class=\"line\"><span>2020-01-02  1002</span></span>\n<span class=\"line\"><span>2020-01-03  1002</span></span>\n<span class=\"line\"><span>...</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Since the data has already been sorted by date, when you perform a stable sort on user IDs, the relative order of orders with the same user ID remains unchanged, thus maintaining the order by date.</p><p><strong>If you use an unstable sorting algorithm</strong>, the relative order of orders with the same user ID might change, resulting in a loss of order by transaction date. This means your previous date sorting effort becomes meaningless.</p><p>As you can see, stability is a very important property, so you should pay special attention when using sorting algorithms to avoid unexpected results.</p><h2 id=\"in-place-sorting\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#in-place-sorting\"><span>In-place Sorting</span></a></h2><p><strong>In-place sorting refers to sorting that does not require additional auxiliary space, only a constant amount of extra space, and directly sorts the original array.</strong></p><p>The key here is whether extra space is needed, not whether a new array is returned. Specifically, it is about differences like this:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It's easy to see that for sorting large data sets, in-place sorting algorithms have certain advantages.</p><p>Some key metrics for sorting algorithms are important to consider. Later, I will introduce several common sorting algorithms and analyze their strengths and weaknesses based on these metrics.</p></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a></li><li><a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a></li></ul></div><p>During coding practice or interviews, you typically won't be asked to manually write sorting algorithms from scratch. However, for the sake of completeness, I have included a section that explains the principles, characteristics, time complexity, and code implementation of several common sorting algorithms using the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a>.</p><p>This article will first introduce several key metrics of sorting algorithms. When discussing specific sorting algorithms later, we will analyze them based on these metrics.</p><h2 id=\"time-and-space-complexity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#time-and-space-complexity\"><span>Time and Space Complexity</span></a></h2><p>The primary indicators for evaluating an algorithm are time complexity and space complexity.</p><p>As mentioned in <a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a>, for any algorithm, the goal is to minimize both time and space complexity.</p><h2 id=\"sorting-stability\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sorting-stability\"><span>Sorting Stability</span></a></h2><p>Stability is an important property of sorting algorithms, which can be summarized as follows:</p><p><strong>A sorting algorithm is considered \"stable\" if identical elements maintain their relative positions after sorting; otherwise, it is \"unstable.\"</strong></p><p>Stability may not matter much when sorting an array of integers. However, when sorting more complex data structures, stable sorting can be advantageous.</p><p>For instance, consider you have several order records already sorted by transaction date, and you now want to further sort them by user ID. This way, orders with the same user ID will be grouped together for easier viewing. The difference between stable and unstable sorting becomes apparent here:</p><p><strong>If you use a stable sorting algorithm</strong>, the orders with the same user ID will remain sorted by transaction date after sorting:</p><div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>   Date    UserID</span></span>\n<span class=\"line\"><span>2020-02-01  1001</span></span>\n<span class=\"line\"><span>2020-02-02  1001</span></span>\n<span class=\"line\"><span>2020-02-03  1001</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>2020-01-01  1002</span></span>\n<span class=\"line\"><span>2020-01-02  1002</span></span>\n<span class=\"line\"><span>2020-01-03  1002</span></span>\n<span class=\"line\"><span>...</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Since the data has already been sorted by date, when you perform a stable sort on user IDs, the relative order of orders with the same user ID remains unchanged, thus maintaining the order by date.</p><p><strong>If you use an unstable sorting algorithm</strong>, the relative order of orders with the same user ID might change, resulting in a loss of order by transaction date. This means your previous date sorting effort becomes meaningless.</p><p>As you can see, stability is a very important property, so you should pay special attention when using sorting algorithms to avoid unexpected results.</p><h2 id=\"in-place-sorting\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#in-place-sorting\"><span>In-place Sorting</span></a></h2><p><strong>In-place sorting refers to sorting that does not require additional auxiliary space, only a constant amount of extra space, and directly sorts the original array.</strong></p><p>The key here is whether extra space is needed, not whether a new array is returned. Specifically, it is about differences like this:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>It's easy to see that for sorting large data sets, in-place sorting algorithms have certain advantages.</p><p>Some key metrics for sorting algorithms are important to consider. Later, I will introduce several common sorting algorithms and analyze their strengths and weaknesses based on these metrics.</p></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a></li><li><a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a></li></ul></div> <p class=\"hint-container-title\">Prerequisite Knowledge</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a></li><li><a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/array-basic/\">Basics of Arrays</a> <li><a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a></li> <a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a> <p>During coding practice or interviews, you typically won't be asked to manually write sorting algorithms from scratch. However, for the sake of completeness, I have included a section that explains the principles, characteristics, time complexity, and code implementation of several common sorting algorithms using the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a>.</p> <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> <p>This article will first introduce several key metrics of sorting algorithms. When discussing specific sorting algorithms later, we will analyze them based on these metrics.</p> <h2 id=\"time-and-space-complexity\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#time-and-space-complexity\"><span>Time and Space Complexity</span></a></h2> <a class=\"header-anchor\" href=\"#time-and-space-complexity\"><span>Time and Space Complexity</span></a> <span>Time and Space Complexity</span> <p>The primary indicators for evaluating an algorithm are time complexity and space complexity.</p> <p>As mentioned in <a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a>, for any algorithm, the goal is to minimize both time and space complexity.</p> <a class=\"route-link\" href=\"/algo/en/intro/complexity-basic/\">Introduction to Time and Space Complexity</a> <h2 id=\"sorting-stability\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#sorting-stability\"><span>Sorting Stability</span></a></h2> <a class=\"header-anchor\" href=\"#sorting-stability\"><span>Sorting Stability</span></a> <span>Sorting Stability</span> <p>Stability is an important property of sorting algorithms, which can be summarized as follows:</p> <p><strong>A sorting algorithm is considered \"stable\" if identical elements maintain their relative positions after sorting; otherwise, it is \"unstable.\"</strong></p> <strong>A sorting algorithm is considered \"stable\" if identical elements maintain their relative positions after sorting; otherwise, it is \"unstable.\"</strong> <p>Stability may not matter much when sorting an array of integers. However, when sorting more complex data structures, stable sorting can be advantageous.</p> <p>For instance, consider you have several order records already sorted by transaction date, and you now want to further sort them by user ID. This way, orders with the same user ID will be grouped together for easier viewing. The difference between stable and unstable sorting becomes apparent here:</p> <p><strong>If you use a stable sorting algorithm</strong>, the orders with the same user ID will remain sorted by transaction date after sorting:</p> <strong>If you use a stable sorting algorithm</strong> <div class=\"language-text line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"text\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>   Date    UserID</span></span>\n<span class=\"line\"><span>2020-02-01  1001</span></span>\n<span class=\"line\"><span>2020-02-02  1001</span></span>\n<span class=\"line\"><span>2020-02-03  1001</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>2020-01-01  1002</span></span>\n<span class=\"line\"><span>2020-01-02  1002</span></span>\n<span class=\"line\"><span>2020-01-03  1002</span></span>\n<span class=\"line\"><span>...</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span>   Date    UserID</span></span>\n<span class=\"line\"><span>2020-02-01  1001</span></span>\n<span class=\"line\"><span>2020-02-02  1001</span></span>\n<span class=\"line\"><span>2020-02-03  1001</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>2020-01-01  1002</span></span>\n<span class=\"line\"><span>2020-01-02  1002</span></span>\n<span class=\"line\"><span>2020-01-03  1002</span></span>\n<span class=\"line\"><span>...</span></span></code></pre> <code><span class=\"line\"><span>   Date    UserID</span></span>\n<span class=\"line\"><span>2020-02-01  1001</span></span>\n<span class=\"line\"><span>2020-02-02  1001</span></span>\n<span class=\"line\"><span>2020-02-03  1001</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>2020-01-01  1002</span></span>\n<span class=\"line\"><span>2020-01-02  1002</span></span>\n<span class=\"line\"><span>2020-01-03  1002</span></span>\n<span class=\"line\"><span>...</span></span></code> <span class=\"line\"><span>   Date    UserID</span></span> <span>   Date    UserID</span> <span class=\"line\"><span>2020-02-01  1001</span></span> <span>2020-02-01  1001</span> <span class=\"line\"><span>2020-02-02  1001</span></span> <span>2020-02-02  1001</span> <span class=\"line\"><span>2020-02-03  1001</span></span> <span>2020-02-03  1001</span> <span class=\"line\"><span></span></span> <span></span> <span class=\"line\"><span>2020-01-01  1002</span></span> <span>2020-01-01  1002</span> <span class=\"line\"><span>2020-01-02  1002</span></span> <span>2020-01-02  1002</span> <span class=\"line\"><span>2020-01-03  1002</span></span> <span>2020-01-03  1002</span> <span class=\"line\"><span>...</span></span> <span>...</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>Since the data has already been sorted by date, when you perform a stable sort on user IDs, the relative order of orders with the same user ID remains unchanged, thus maintaining the order by date.</p> <p><strong>If you use an unstable sorting algorithm</strong>, the relative order of orders with the same user ID might change, resulting in a loss of order by transaction date. This means your previous date sorting effort becomes meaningless.</p> <strong>If you use an unstable sorting algorithm</strong> <p>As you can see, stability is a very important property, so you should pay special attention when using sorting algorithms to avoid unexpected results.</p> <h2 id=\"in-place-sorting\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#in-place-sorting\"><span>In-place Sorting</span></a></h2> <a class=\"header-anchor\" href=\"#in-place-sorting\"><span>In-place Sorting</span></a> <span>In-place Sorting</span> <p><strong>In-place sorting refers to sorting that does not require additional auxiliary space, only a constant amount of extra space, and directly sorts the original array.</strong></p> <strong>In-place sorting refers to sorting that does not require additional auxiliary space, only a constant amount of extra space, and directly sorts the original array.</strong> <p>The key here is whether extra space is needed, not whether a new array is returned. Specifically, it is about differences like this:</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// non-in-place sorting</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // requires an additional auxiliary array during sorting, consuming O(N) space</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tmp</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">nums</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">length</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">];</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // sort the nums array</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// in-place sorting</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> sort</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] nums) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // directly operate on nums, no additional auxiliary array needed, consuming O(1) space</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>It's easy to see that for sorting large data sets, in-place sorting algorithms have certain advantages.</p> <p>Some key metrics for sorting algorithms are important to consider. Later, I will introduce several common sorting algorithms and analyze their strengths and weaknesses based on these metrics.</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/intro/sorting/\" aria-label=\"Chapter Introduction\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Chapter Introduction</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/select-sort/\" aria-label=\"Explore Selection Sort in Depth\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Explore Selection Sort in Depth<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/intro/sorting/\" aria-label=\"Chapter Introduction\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Chapter Introduction</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Chapter Introduction</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/select-sort/\" aria-label=\"Explore Selection Sort in Depth\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Explore Selection Sort in Depth<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Explore Selection Sort in Depth<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}