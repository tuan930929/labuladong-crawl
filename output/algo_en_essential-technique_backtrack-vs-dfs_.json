{
    "url": "https://labuladong.online/algo/en/essential-technique/backtrack-vs-dfs/",
    "title": "Some Questions About Backtracking and DFS Algorithms | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Some Questions About Backtracking and DFS Algorithms</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2362 words</span><meta property=\"wordCount\" content=\"2362\"></span></div><hr></div> <h1><!---->Some Questions About Backtracking and DFS Algorithms</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2362 words</span><meta property=\"wordCount\" content=\"2362\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2362 words</span><meta property=\"wordCount\" content=\"2362\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 2362 words</span> <meta property=\"wordCount\" content=\"2362\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div><p>In this article, we use simple examples to answer several common questions readers have about backtracking and DFS algorithms:</p><ol><li><p>What is the difference between backtracking and DFS algorithms?</p></li><li><p>In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says you make a choice before recursion and undo the choice after recursion. But why do some codes make the choice before the for loop and undo the choice after the for loop?</p></li><li><p>Can the <code>backtrack/dfs/traverse</code> functions have a return value?</p></li><li><p>Should base case and pruning be written before the recursive call or at the start of the function?</p></li></ol><h2 id=\"what-is-the-difference-between-backtracking-and-dfs-algorithms\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#what-is-the-difference-between-backtracking-and-dfs-algorithms\"><span>What is the difference between backtracking and DFS algorithms?</span></a></h2><p>Many readers ask me why the website only talks about backtracking, but not DFS algorithms.</p><p>Some readers are also confused. In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says the template is to make a choice before recursion and undo the choice after recursion, like this:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>But sometimes you see code that makes the choice before the for loop and undoes the choice after the for loop:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>What is the difference between these two ways of writing code?</p><h2 class=\"hidden-for-toc\" id=\"can-the-backtrack-dfs-traverse-function-have-a-return-value\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-the-backtrack-dfs-traverse-function-have-a-return-value\"><span>Can the <code>backtrack/dfs/traverse</code> Function Have a Return Value?</span></a></h2><h2 class=\"hidden-for-toc\" id=\"where-should-base-cases-and-pruning-be-written\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#where-should-base-cases-and-pruning-be-written\"><span>Where should base cases and pruning be written?</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div><p>In this article, we use simple examples to answer several common questions readers have about backtracking and DFS algorithms:</p><ol><li><p>What is the difference between backtracking and DFS algorithms?</p></li><li><p>In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says you make a choice before recursion and undo the choice after recursion. But why do some codes make the choice before the for loop and undo the choice after the for loop?</p></li><li><p>Can the <code>backtrack/dfs/traverse</code> functions have a return value?</p></li><li><p>Should base case and pruning be written before the recursive call or at the start of the function?</p></li></ol><h2 id=\"what-is-the-difference-between-backtracking-and-dfs-algorithms\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#what-is-the-difference-between-backtracking-and-dfs-algorithms\"><span>What is the difference between backtracking and DFS algorithms?</span></a></h2><p>Many readers ask me why the website only talks about backtracking, but not DFS algorithms.</p><p>Some readers are also confused. In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says the template is to make a choice before recursion and undo the choice after recursion, like this:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>But sometimes you see code that makes the choice before the for loop and undoes the choice after the for loop:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>What is the difference between these two ways of writing code?</p><h2 class=\"hidden-for-toc\" id=\"can-the-backtrack-dfs-traverse-function-have-a-return-value\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-the-backtrack-dfs-traverse-function-have-a-return-value\"><span>Can the <code>backtrack/dfs/traverse</code> Function Have a Return Value?</span></a></h2><h2 class=\"hidden-for-toc\" id=\"where-should-base-cases-and-pruning-be-written\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#where-should-base-cases-and-pruning-be-written\"><span>Where should base cases and pruning be written?</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you need to learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms (Overview)</a> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a> <p>In this article, we use simple examples to answer several common questions readers have about backtracking and DFS algorithms:</p> <ol><li><p>What is the difference between backtracking and DFS algorithms?</p></li><li><p>In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says you make a choice before recursion and undo the choice after recursion. But why do some codes make the choice before the for loop and undo the choice after the for loop?</p></li><li><p>Can the <code>backtrack/dfs/traverse</code> functions have a return value?</p></li><li><p>Should base case and pruning be written before the recursive call or at the start of the function?</p></li></ol> <li><p>What is the difference between backtracking and DFS algorithms?</p></li> <p>What is the difference between backtracking and DFS algorithms?</p> <li><p>In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says you make a choice before recursion and undo the choice after recursion. But why do some codes make the choice before the for loop and undo the choice after the for loop?</p></li> <p>In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says you make a choice before recursion and undo the choice after recursion. But why do some codes make the choice before the for loop and undo the choice after the for loop?</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a> <li><p>Can the <code>backtrack/dfs/traverse</code> functions have a return value?</p></li> <p>Can the <code>backtrack/dfs/traverse</code> functions have a return value?</p> <code>backtrack/dfs/traverse</code> <li><p>Should base case and pruning be written before the recursive call or at the start of the function?</p></li> <p>Should base case and pruning be written before the recursive call or at the start of the function?</p> <h2 id=\"what-is-the-difference-between-backtracking-and-dfs-algorithms\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#what-is-the-difference-between-backtracking-and-dfs-algorithms\"><span>What is the difference between backtracking and DFS algorithms?</span></a></h2> <a class=\"header-anchor\" href=\"#what-is-the-difference-between-backtracking-and-dfs-algorithms\"><span>What is the difference between backtracking and DFS algorithms?</span></a> <span>What is the difference between backtracking and DFS algorithms?</span> <p>Many readers ask me why the website only talks about backtracking, but not DFS algorithms.</p> <p>Some readers are also confused. In the <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a>, it says the template is to make a choice before recursion and undo the choice after recursion, like this:</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithm Core Framework</a> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // make a choice</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // undo the choice</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>But sometimes you see code that makes the choice before the for loop and undoes the choice after the for loop:</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">void</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\"> backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    if</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (reached the leaf node) {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">        // reached the leaf node, end recursion</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">        return</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // make a choice</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; n; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span></span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">        backtrack</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(...)</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // undo the choice</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>What is the difference between these two ways of writing code?</p> <h2 class=\"hidden-for-toc\" id=\"can-the-backtrack-dfs-traverse-function-have-a-return-value\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-the-backtrack-dfs-traverse-function-have-a-return-value\"><span>Can the <code>backtrack/dfs/traverse</code> Function Have a Return Value?</span></a></h2> <a class=\"header-anchor\" href=\"#can-the-backtrack-dfs-traverse-function-have-a-return-value\"><span>Can the <code>backtrack/dfs/traverse</code> Function Have a Return Value?</span></a> <span>Can the <code>backtrack/dfs/traverse</code> Function Have a Return Value?</span> <code>backtrack/dfs/traverse</code> <h2 class=\"hidden-for-toc\" id=\"where-should-base-cases-and-pruning-be-written\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#where-should-base-cases-and-pruning-be-written\"><span>Where should base cases and pruning be written?</span></a></h2> <a class=\"header-anchor\" href=\"#where-should-base-cases-and-pruning-be-written\"><span>Where should base cases and pruning be written?</span></a> <span>Where should base cases and pruning be written?</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/essential-technique/permutation-combination-subset-all-in-one-2/\" aria-label=\"Backtracking Algorithm to Solve All Permutation/Combination/Subset Problems\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Backtracking Algorithm to Solve All Permutation/Combination/Subset Problems</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/frequency-interview/island-dfs-summary/\" aria-label=\"Solve All Island Problems with DFS\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Solve All Island Problems with DFS<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/essential-technique/permutation-combination-subset-all-in-one-2/\" aria-label=\"Backtracking Algorithm to Solve All Permutation/Combination/Subset Problems\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Backtracking Algorithm to Solve All Permutation/Combination/Subset Problems</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Backtracking Algorithm to Solve All Permutation/Combination/Subset Problems</div> <a class=\"route-link auto-link next\" href=\"/algo/en/frequency-interview/island-dfs-summary/\" aria-label=\"Solve All Island Problems with DFS\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Solve All Island Problems with DFS<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Solve All Island Problems with DFS<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}