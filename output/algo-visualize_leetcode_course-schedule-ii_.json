{
    "url": "https://labuladong.online/algo-visualize/leetcode/course-schedule-ii/",
    "title": "课程表 II | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var findOrder = function(numCourses, prerequisites) {\n    // 记录后序遍历结果\n    let postorder = [];\n    // 记录是否存在环\n    let hasCycle = false;\n    let visited = new Array(numCourses);\n    let onPath = new Array(numCourses);\n\n    let graph = buildGraph(numCourses, prerequisites);\n\n    let traverse = function(graph, s) {\n        if (onPath[s]) {\n            // 发现环\n            hasCycle = true;\n        }\n        if (visited[s] || hasCycle) {\n            return;\n        }\n        // 前序遍历位置\n        // @visualize color *graph._v(s) #7ed67e\n        visited[s] = true;\n        // @visualize color *graph._v(s) #e77427\n        onPath[s] = true;\n        for (let t of graph.neighbors(s)) {\n            // @visualize color *graph._e(s,t) #e77427\n            traverse(graph, t);\n            // @visualize color *graph._e(s,t) #unset\n        }\n        // 后序遍历位置\n        // @visualize color *graph._v(s) #7ed67e\n        postorder.push(s);\n        onPath[s] = false;\n    }\n\n    for (let i = 0; i < numCourses; i++) {\n        // 遍历图\n        traverse(graph, i);\n\n        // 有环图无法进行拓扑排序\n        if (hasCycle) {\n            return [];\n        }\n    }\n    \n    // 逆后序遍历结果即为拓扑排序结果\n    postorder.reverse();\n    return postorder;\n}\n\n\n// 建图函数\nfunction buildGraph(numCourses, prerequisites) {\n    // 图中共有 numCourses 个节点\n    // @visualize skip\n    const adjList = Array.from({ length: numCourses }, () => []);\n    for (const edge of prerequisites) {\n        const from = edge[1], to = edge[0];\n        // 修完课程 from 才能修课程 to\n        // 在图中添加一条从 from 指向 to 的有向边\n        adjList[from].push(to);\n    }\n    return Graph.createDirectedGraphFromAdjList(adjList);\n}\n\nlet result = findOrder(7, [[6,1],[6,0],[3,1],[2,3],[6,4],[5,4],[3,5],[3,0]]);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}