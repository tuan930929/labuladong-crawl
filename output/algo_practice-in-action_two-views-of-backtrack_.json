{
    "url": "https://labuladong.online/algo/practice-in-action/two-views-of-backtrack/",
    "title": "球盒模型：回溯算法穷举的两种视角 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->球盒模型：回溯算法穷举的两种视角</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 6294 字</span><meta property=\"wordCount\" content=\"6294\"></span></div><hr></div> <h1><!---->球盒模型：回溯算法穷举的两种视角</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 6294 字</span><meta property=\"wordCount\" content=\"6294\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 6294 字</span><meta property=\"wordCount\" content=\"6294\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 6294 字</span> <meta property=\"wordCount\" content=\"6294\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 46. 全排列 https://leetcode.cn/problems/permutations </h3><h3 tabindex=\"-1\"> 78. 子集 https://leetcode.cn/problems/subsets </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a></li></ul></div><p>阅读本文之前，需要你熟悉 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a> 以及 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a>。</p><p>在上面这两篇文章中，有读者提出了不同的排列/组合/子集代码写法，比如通过 <code>swap</code> 元素实现全排列，还有没有 for 循环的子集解法代码。我之前不提这些不同的解法，是为了保持这些问题解法形式的一致性，如果在一开始就给大家太多选择，反而容易让人迷糊。</p><p>在这篇文章，我不仅会具体介绍之前没有讲到的回溯算法写法，还会告诉你为什么可以那样写，两种写法的本质区别是什么。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">先说结论</p><p>1、回溯算法穷举的本质思维模式是「球盒模型」，一切回溯算法，皆从此出，别无二法。</p><p>2、球盒模型，必然有两种穷举视角，分别为「球」的视角穷举和「盒」的视角穷举，对应的，就是两种不同的代码写法。</p><p>3、从理论上分析，两种穷举视角本质上是一样的。但是涉及到具体的代码实现，两种写法的复杂度可能有优劣之分。你需要选择效率更高的写法。</p><p>球盒模型这个词是我随口编的，因为下面我会用「球」和「盒」两种视角来解释，你理解就好。</p></div><h2 id=\"暴力穷举思维方法-球盒模型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9A%B4%E5%8A%9B%E7%A9%B7%E4%B8%BE%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95-%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span>暴力穷举思维方法：球盒模型</span></a></h2><p><strong>一切暴力穷举算法，都从球盒模型开始，没有例外</strong>。</p><p>你懂了这个，就可以随心所欲运用暴力穷举算法，下面的内容，请你仔细看，认真想。</p><p>首先，我们回顾一下以前学过的排列组合知识：</p><p>1、<code>P(n, k)</code>（也有很多书写成 <code>A(n, k)</code>）表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的排列（Permutation/Arrangement）总数；<code>C(n, k)</code> 表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的组合（Combination）总数。</p><p>2、「排列」和「组合」的主要区别在于是否考虑顺序的差异。</p><p>3、排列、组合总数的计算公式：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/math.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><h3 id=\"排列-p-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%92%E5%88%97-p-n-k\"><span>排列 <code>P(n, k)</code></span></a></h3><p>好，现在我问一个问题，这个排列公式 <code>P(n, k)</code> 是如何推导出来的？为了搞清楚这个问题，我需要讲一点组合数学的知识。</p><p>排列组合问题的各种变体都可以抽象成「球盒模型」，<code>P(n, k)</code> 就可以抽象成下面这个场景：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/7.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>即，将 <code>n</code> 个标记了不同序号的球（标号为了体现顺序的差异），放入 <code>k</code> 个标记了不同序号的盒子中（其中 <code>n &gt;= k</code>，每个盒子最终都装有恰好一个球），共有 <code>P(n, k)</code> 种不同的方法。</p><p>现在你来，往盒子里放球，你怎么放？其实有两种视角。</p><p><strong>首先，你可以站在盒子的视角</strong>，每个盒子必然要选择一个球。</p><p>这样，第一个盒子可以选择 <code>n</code> 个球中的任意一个，然后你需要让剩下 <code>k - 1</code> 个盒子在 <code>n - 1</code> 个球中选择（这就是子问题 <code>P(n - 1, k - 1)</code>）：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/8.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p><strong>另外，你也可以站在球的视角</strong>，因为并不是每个球都会被装进盒子，所以球的视角分两种情况：</p><p>1、第一个球可以不装进任何一个盒子，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k</code> 个盒子。</p><p>2、第一个球可以装进 <code>k</code> 个盒子中的任意一个，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k - 1</code> 个盒子。</p><p>结合上述两种情况，可以得到：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/9.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>你看，两种视角得到两个不同的递归式，但这两个递归式解开的结果都是我们熟知的阶乘形式：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/math1.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>至于如何解递归式，涉及数学的内容比较多，这里就不做深入探讨了，有兴趣的读者可以自行学习组合数学相关知识。</p><h3 class=\"hidden-for-toc\" id=\"组合-c-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%84%E5%90%88-c-n-k\"><span>组合 <code>C(n, k)</code></span></a></h3><h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解全排列问题</span></a></h2><h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解子集问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解子集问题</span></a></h2><h2 class=\"hidden-for-toc\" id=\"结论\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%93%E8%AE%BA\"><span>结论</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 46. 全排列 https://leetcode.cn/problems/permutations </h3><h3 tabindex=\"-1\"> 78. 子集 https://leetcode.cn/problems/subsets </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a></li></ul></div><p>阅读本文之前，需要你熟悉 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a> 以及 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a>。</p><p>在上面这两篇文章中，有读者提出了不同的排列/组合/子集代码写法，比如通过 <code>swap</code> 元素实现全排列，还有没有 for 循环的子集解法代码。我之前不提这些不同的解法，是为了保持这些问题解法形式的一致性，如果在一开始就给大家太多选择，反而容易让人迷糊。</p><p>在这篇文章，我不仅会具体介绍之前没有讲到的回溯算法写法，还会告诉你为什么可以那样写，两种写法的本质区别是什么。</p><div class=\"hint-container important\"><p class=\"hint-container-title\">先说结论</p><p>1、回溯算法穷举的本质思维模式是「球盒模型」，一切回溯算法，皆从此出，别无二法。</p><p>2、球盒模型，必然有两种穷举视角，分别为「球」的视角穷举和「盒」的视角穷举，对应的，就是两种不同的代码写法。</p><p>3、从理论上分析，两种穷举视角本质上是一样的。但是涉及到具体的代码实现，两种写法的复杂度可能有优劣之分。你需要选择效率更高的写法。</p><p>球盒模型这个词是我随口编的，因为下面我会用「球」和「盒」两种视角来解释，你理解就好。</p></div><h2 id=\"暴力穷举思维方法-球盒模型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9A%B4%E5%8A%9B%E7%A9%B7%E4%B8%BE%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95-%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span>暴力穷举思维方法：球盒模型</span></a></h2><p><strong>一切暴力穷举算法，都从球盒模型开始，没有例外</strong>。</p><p>你懂了这个，就可以随心所欲运用暴力穷举算法，下面的内容，请你仔细看，认真想。</p><p>首先，我们回顾一下以前学过的排列组合知识：</p><p>1、<code>P(n, k)</code>（也有很多书写成 <code>A(n, k)</code>）表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的排列（Permutation/Arrangement）总数；<code>C(n, k)</code> 表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的组合（Combination）总数。</p><p>2、「排列」和「组合」的主要区别在于是否考虑顺序的差异。</p><p>3、排列、组合总数的计算公式：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/math.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><h3 id=\"排列-p-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%92%E5%88%97-p-n-k\"><span>排列 <code>P(n, k)</code></span></a></h3><p>好，现在我问一个问题，这个排列公式 <code>P(n, k)</code> 是如何推导出来的？为了搞清楚这个问题，我需要讲一点组合数学的知识。</p><p>排列组合问题的各种变体都可以抽象成「球盒模型」，<code>P(n, k)</code> 就可以抽象成下面这个场景：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/7.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>即，将 <code>n</code> 个标记了不同序号的球（标号为了体现顺序的差异），放入 <code>k</code> 个标记了不同序号的盒子中（其中 <code>n &gt;= k</code>，每个盒子最终都装有恰好一个球），共有 <code>P(n, k)</code> 种不同的方法。</p><p>现在你来，往盒子里放球，你怎么放？其实有两种视角。</p><p><strong>首先，你可以站在盒子的视角</strong>，每个盒子必然要选择一个球。</p><p>这样，第一个盒子可以选择 <code>n</code> 个球中的任意一个，然后你需要让剩下 <code>k - 1</code> 个盒子在 <code>n - 1</code> 个球中选择（这就是子问题 <code>P(n - 1, k - 1)</code>）：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/8.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p><strong>另外，你也可以站在球的视角</strong>，因为并不是每个球都会被装进盒子，所以球的视角分两种情况：</p><p>1、第一个球可以不装进任何一个盒子，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k</code> 个盒子。</p><p>2、第一个球可以装进 <code>k</code> 个盒子中的任意一个，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k - 1</code> 个盒子。</p><p>结合上述两种情况，可以得到：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/9.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>你看，两种视角得到两个不同的递归式，但这两个递归式解开的结果都是我们熟知的阶乘形式：</p><div class=\"img-content\"><img src=\"/algo/images/set-split/math1.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>至于如何解递归式，涉及数学的内容比较多，这里就不做深入探讨了，有兴趣的读者可以自行学习组合数学相关知识。</p><h3 class=\"hidden-for-toc\" id=\"组合-c-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%84%E5%90%88-c-n-k\"><span>组合 <code>C(n, k)</code></span></a></h3><h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解全排列问题</span></a></h2><h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解子集问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解子集问题</span></a></h2><h2 class=\"hidden-for-toc\" id=\"结论\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%93%E8%AE%BA\"><span>结论</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 46. 全排列 https://leetcode.cn/problems/permutations </h3><h3 tabindex=\"-1\"> 78. 子集 https://leetcode.cn/problems/subsets </h3></div> <h3 tabindex=\"-1\"> 46. 全排列 https://leetcode.cn/problems/permutations </h3> <h3 tabindex=\"-1\"> 78. 子集 https://leetcode.cn/problems/subsets </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div> <p class=\"hint-container-title\">本文讲解的例题</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">力扣</th> <th style=\"text-align:center;\">难度</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a></td> <a href=\"https://leetcode.com/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. Permutations</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a></td> <a href=\"https://leetcode.cn/problems/permutations/\" target=\"_blank\" rel=\"noopener noreferrer\">46. 全排列</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a></td> <a href=\"https://leetcode.com/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. Subsets</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a></td> <a href=\"https://leetcode.cn/problems/subsets/\" target=\"_blank\" rel=\"noopener noreferrer\">78. 子集</a> <td style=\"text-align:center;\">🟠</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a></li><li><a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a></li></ul> <li><a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a></li> <a class=\"route-link\" href=\"/algo/essential-technique/binary-tree-summary/\">二叉树系列算法（纲领篇）</a> <li><a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a></li> <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a> <li><a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a></li> <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a> <p>阅读本文之前，需要你熟悉 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a> 以及 <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a>。</p> <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-framework/\">回溯算法核心框架</a> <a class=\"route-link\" href=\"/algo/essential-technique/permutation-combination-subset-all-in-one/\">回溯算法秒杀所有排列/组合/子集问题</a> <p>在上面这两篇文章中，有读者提出了不同的排列/组合/子集代码写法，比如通过 <code>swap</code> 元素实现全排列，还有没有 for 循环的子集解法代码。我之前不提这些不同的解法，是为了保持这些问题解法形式的一致性，如果在一开始就给大家太多选择，反而容易让人迷糊。</p> <code>swap</code> <p>在这篇文章，我不仅会具体介绍之前没有讲到的回溯算法写法，还会告诉你为什么可以那样写，两种写法的本质区别是什么。</p> <div class=\"hint-container important\"><p class=\"hint-container-title\">先说结论</p><p>1、回溯算法穷举的本质思维模式是「球盒模型」，一切回溯算法，皆从此出，别无二法。</p><p>2、球盒模型，必然有两种穷举视角，分别为「球」的视角穷举和「盒」的视角穷举，对应的，就是两种不同的代码写法。</p><p>3、从理论上分析，两种穷举视角本质上是一样的。但是涉及到具体的代码实现，两种写法的复杂度可能有优劣之分。你需要选择效率更高的写法。</p><p>球盒模型这个词是我随口编的，因为下面我会用「球」和「盒」两种视角来解释，你理解就好。</p></div> <p class=\"hint-container-title\">先说结论</p> <p>1、回溯算法穷举的本质思维模式是「球盒模型」，一切回溯算法，皆从此出，别无二法。</p> <p>2、球盒模型，必然有两种穷举视角，分别为「球」的视角穷举和「盒」的视角穷举，对应的，就是两种不同的代码写法。</p> <p>3、从理论上分析，两种穷举视角本质上是一样的。但是涉及到具体的代码实现，两种写法的复杂度可能有优劣之分。你需要选择效率更高的写法。</p> <p>球盒模型这个词是我随口编的，因为下面我会用「球」和「盒」两种视角来解释，你理解就好。</p> <h2 id=\"暴力穷举思维方法-球盒模型\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9A%B4%E5%8A%9B%E7%A9%B7%E4%B8%BE%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95-%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span>暴力穷举思维方法：球盒模型</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%9A%B4%E5%8A%9B%E7%A9%B7%E4%B8%BE%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95-%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B\"><span>暴力穷举思维方法：球盒模型</span></a> <span>暴力穷举思维方法：球盒模型</span> <p><strong>一切暴力穷举算法，都从球盒模型开始，没有例外</strong>。</p> <strong>一切暴力穷举算法，都从球盒模型开始，没有例外</strong> <p>你懂了这个，就可以随心所欲运用暴力穷举算法，下面的内容，请你仔细看，认真想。</p> <p>首先，我们回顾一下以前学过的排列组合知识：</p> <p>1、<code>P(n, k)</code>（也有很多书写成 <code>A(n, k)</code>）表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的排列（Permutation/Arrangement）总数；<code>C(n, k)</code> 表示从 <code>n</code> 个不同元素中拿出 <code>k</code> 个元素的组合（Combination）总数。</p> <code>P(n, k)</code> <code>A(n, k)</code> <code>n</code> <code>k</code> <code>C(n, k)</code> <code>n</code> <code>k</code> <p>2、「排列」和「组合」的主要区别在于是否考虑顺序的差异。</p> <p>3、排列、组合总数的计算公式：</p> <div class=\"img-content\"><img src=\"/algo/images/set-split/math.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/set-split/math.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <h3 id=\"排列-p-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8E%92%E5%88%97-p-n-k\"><span>排列 <code>P(n, k)</code></span></a></h3> <a class=\"header-anchor\" href=\"#%E6%8E%92%E5%88%97-p-n-k\"><span>排列 <code>P(n, k)</code></span></a> <span>排列 <code>P(n, k)</code></span> <code>P(n, k)</code> <p>好，现在我问一个问题，这个排列公式 <code>P(n, k)</code> 是如何推导出来的？为了搞清楚这个问题，我需要讲一点组合数学的知识。</p> <code>P(n, k)</code> <p>排列组合问题的各种变体都可以抽象成「球盒模型」，<code>P(n, k)</code> 就可以抽象成下面这个场景：</p> <code>P(n, k)</code> <div class=\"img-content\"><img src=\"/algo/images/set-split/7.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/set-split/7.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>即，将 <code>n</code> 个标记了不同序号的球（标号为了体现顺序的差异），放入 <code>k</code> 个标记了不同序号的盒子中（其中 <code>n &gt;= k</code>，每个盒子最终都装有恰好一个球），共有 <code>P(n, k)</code> 种不同的方法。</p> <code>n</code> <code>k</code> <code>n &gt;= k</code> <code>P(n, k)</code> <p>现在你来，往盒子里放球，你怎么放？其实有两种视角。</p> <p><strong>首先，你可以站在盒子的视角</strong>，每个盒子必然要选择一个球。</p> <strong>首先，你可以站在盒子的视角</strong> <p>这样，第一个盒子可以选择 <code>n</code> 个球中的任意一个，然后你需要让剩下 <code>k - 1</code> 个盒子在 <code>n - 1</code> 个球中选择（这就是子问题 <code>P(n - 1, k - 1)</code>）：</p> <code>n</code> <code>k - 1</code> <code>n - 1</code> <code>P(n - 1, k - 1)</code> <div class=\"img-content\"><img src=\"/algo/images/set-split/8.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/set-split/8.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p><strong>另外，你也可以站在球的视角</strong>，因为并不是每个球都会被装进盒子，所以球的视角分两种情况：</p> <strong>另外，你也可以站在球的视角</strong> <p>1、第一个球可以不装进任何一个盒子，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k</code> 个盒子。</p> <code>n - 1</code> <code>k</code> <p>2、第一个球可以装进 <code>k</code> 个盒子中的任意一个，这样的话你就需要将剩下 <code>n - 1</code> 个球放入 <code>k - 1</code> 个盒子。</p> <code>k</code> <code>n - 1</code> <code>k - 1</code> <p>结合上述两种情况，可以得到：</p> <div class=\"img-content\"><img src=\"/algo/images/set-split/9.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/set-split/9.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>你看，两种视角得到两个不同的递归式，但这两个递归式解开的结果都是我们熟知的阶乘形式：</p> <div class=\"img-content\"><img src=\"/algo/images/set-split/math1.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/set-split/math1.png\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>至于如何解递归式，涉及数学的内容比较多，这里就不做深入探讨了，有兴趣的读者可以自行学习组合数学相关知识。</p> <h3 class=\"hidden-for-toc\" id=\"组合-c-n-k\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%84%E5%90%88-c-n-k\"><span>组合 <code>C(n, k)</code></span></a></h3> <a class=\"header-anchor\" href=\"#%E7%BB%84%E5%90%88-c-n-k\"><span>组合 <code>C(n, k)</code></span></a> <span>组合 <code>C(n, k)</code></span> <code>C(n, k)</code> <h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解全排列问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解全排列问题</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解全排列问题</span></a> <span>用球盒模型重新理解全排列问题</span> <h2 class=\"hidden-for-toc\" id=\"用球盒模型重新理解子集问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解子集问题</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%94%A8%E7%90%83%E7%9B%92%E6%A8%A1%E5%9E%8B%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98\"><span>用球盒模型重新理解子集问题</span></a> <span>用球盒模型重新理解子集问题</span> <h2 class=\"hidden-for-toc\" id=\"结论\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%BB%93%E8%AE%BA\"><span>结论</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%BB%93%E8%AE%BA\"><span>结论</span></a> <span>结论</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/game/minesweeper-ii/\" aria-label=\"【游戏】扫雷 II\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->【游戏】扫雷 II</div></a><a class=\"route-link auto-link next\" href=\"/algo/practice-in-action/generate-parentheses/\" aria-label=\"回溯算法实践：括号生成\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">回溯算法实践：括号生成<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/game/minesweeper-ii/\" aria-label=\"【游戏】扫雷 II\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->【游戏】扫雷 II</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->【游戏】扫雷 II</div> <a class=\"route-link auto-link next\" href=\"/algo/practice-in-action/generate-parentheses/\" aria-label=\"回溯算法实践：括号生成\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">回溯算法实践：括号生成<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">回溯算法实践：括号生成<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}