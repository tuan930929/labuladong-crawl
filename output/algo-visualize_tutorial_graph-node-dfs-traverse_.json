{
    "url": "https://labuladong.online/algo-visualize/tutorial/graph-node-dfs-traverse/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } // 遍历图的所有节点\n// @visualize status(s)\nvar traverse = function(graph, s, visited) {\n    // base case\n    if (s < 0 || s >= graph.size()) {\n        return;\n    }\n    if (visited[s]) {\n        // 防止死循环\n        return;\n    }\n    // 前序位置\n    visited[s] = true;\n    // @visualize color *graph._v(s) #7ed67e\n    console.log(\"visit \" + s);\n    for (var w of graph.neighbors(s)) {\n        // @visualize color *graph._e(s,w) #e77427\n        traverse(graph, w, visited);\n        // @visualize color *graph._e(s,w) #unset\n    }\n    // 后序位置\n};\n\nlet graph = Graph.createDirectedGraphFromEdges([\n    [0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6],\n    [3, 6], [6, 0], [3, 0]\n]);\nlet visited = new Array(graph.size()).fill(false);\ntraverse(graph, 0, visited);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}