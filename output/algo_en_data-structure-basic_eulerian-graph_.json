{
    "url": "https://labuladong.online/algo/en/data-structure-basic/eulerian-graph/",
    "title": "Eulerian Graph and One-Stroke Game | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Eulerian Graph and One-Stroke Game</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1816 words</span><meta property=\"wordCount\" content=\"1816\"></span></div><hr></div> <h1><!---->Eulerian Graph and One-Stroke Game</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1816 words</span><meta property=\"wordCount\" content=\"1816\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1816 words</span><meta property=\"wordCount\" content=\"1816\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 1816 words</span> <meta property=\"wordCount\" content=\"1816\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>The \"one-stroke drawing\" game is actually about finding Eulerian paths or Eulerian circuits. You can decide if there is an Eulerian path or circuit by checking the degree of each node.</p><p>The Hierholzer algorithm is a classic way to find Eulerian paths and circuits. It is an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS in graphs</a>.</p></div><p>Eulerian graphs are classic concepts in graph theory. They come from the famous Seven Bridges of KÃ¶nigsberg problem. This problem is important in math history and has many uses in computer science, such as path planning and circuit design.</p><p>Since this is a basic chapter, we wonâ€™t go deep into code. The exact algorithm code and exercises will be covered in the graph theory part of the data structures chapter.</p><p>This article will focus on the definition of Eulerian graphs, the classic seven bridges problem, what are Eulerian paths and circuits, and tips to find an Eulerian path. You can also try the \"one-stroke drawing\" game on our site to understand it better.</p><h2 id=\"one-stroke-drawing-game\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#one-stroke-drawing-game\"><span>One-Stroke Drawing Game</span></a></h2><p>When I was a child, I played the \"one-stroke drawing\" game. The rule is to draw through all the points and edges in one go. You can pass a point more than once, but each edge must be used exactly once and cannot be repeated.</p><p>This website has a game panel for this one-stroke drawing game:</p><!----><p>As a child, I just tried randomly, starting anywhere and seeing if I could finish. If not, I would start over.</p><p>Later, I found out this puzzle is a classic graph theory problem, and there is a method to solve it.</p><p>Here is the rule to solve the game:</p><ul><li>If every node has an even degree, you can start from any node and finish the one-stroke drawing. You will end up where you started.</li><li>If exactly two nodes have an odd degree, you must start from one of these two nodes to complete the drawing.</li><li>If neither of the above is true, you canâ€™t finish the game.</li></ul><p>In the game panel, you can see the <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">degree</a> of each node. Try to use these rules and see if they work ðŸ˜ƒ</p><p>Now, let's learn the graph theory behind this game: Eulerian graphs.</p><h2 id=\"the-seven-bridges-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-seven-bridges-problem\"><span>The Seven Bridges Problem</span></a></h2><p>The idea of Eulerian graphs comes from the famous Seven Bridges of KÃ¶nigsberg problem in the 18th century. The city of KÃ¶nigsberg (now Kaliningrad) had a river dividing it into north and south, with two islands in the river. There were seven bridges connecting the north, south, and the two islands.</p><p>The question is: Can you find a route that starts at any region, crosses each bridge exactly once, and ends at the starting point?</p><p>We can turn this into a graph problem:</p><!----><p>In this graph:</p><ul><li>Each area is a node</li><li>Each bridge is an edge</li><li>The question is: Is there a path that uses each edge exactly once and returns to the starting node?</li></ul><p>Euler finally proved that there is no solution to the seven bridges problem.</p><h2 id=\"terminology\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#terminology\"><span>Terminology</span></a></h2><p>Based on the seven bridges problem, here are a few graph theory terms:</p><h2 class=\"hidden-for-toc\" id=\"how-to-check-if-a-graph-is-eulerian\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#how-to-check-if-a-graph-is-eulerian\"><span>How to Check if a Graph is Eulerian</span></a></h2><h3 class=\"hidden-for-toc\" id=\"undirected-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#undirected-graph\"><span>Undirected Graph</span></a></h3><h3 class=\"hidden-for-toc\" id=\"directed-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#directed-graph\"><span>Directed Graph</span></a></h3><h2 class=\"hidden-for-toc\" id=\"algorithm-to-find-eulerian-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algorithm-to-find-eulerian-path\"><span>Algorithm to Find Eulerian Path</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>The \"one-stroke drawing\" game is actually about finding Eulerian paths or Eulerian circuits. You can decide if there is an Eulerian path or circuit by checking the degree of each node.</p><p>The Hierholzer algorithm is a classic way to find Eulerian paths and circuits. It is an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS in graphs</a>.</p></div><p>Eulerian graphs are classic concepts in graph theory. They come from the famous Seven Bridges of KÃ¶nigsberg problem. This problem is important in math history and has many uses in computer science, such as path planning and circuit design.</p><p>Since this is a basic chapter, we wonâ€™t go deep into code. The exact algorithm code and exercises will be covered in the graph theory part of the data structures chapter.</p><p>This article will focus on the definition of Eulerian graphs, the classic seven bridges problem, what are Eulerian paths and circuits, and tips to find an Eulerian path. You can also try the \"one-stroke drawing\" game on our site to understand it better.</p><h2 id=\"one-stroke-drawing-game\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#one-stroke-drawing-game\"><span>One-Stroke Drawing Game</span></a></h2><p>When I was a child, I played the \"one-stroke drawing\" game. The rule is to draw through all the points and edges in one go. You can pass a point more than once, but each edge must be used exactly once and cannot be repeated.</p><p>This website has a game panel for this one-stroke drawing game:</p><!----><p>As a child, I just tried randomly, starting anywhere and seeing if I could finish. If not, I would start over.</p><p>Later, I found out this puzzle is a classic graph theory problem, and there is a method to solve it.</p><p>Here is the rule to solve the game:</p><ul><li>If every node has an even degree, you can start from any node and finish the one-stroke drawing. You will end up where you started.</li><li>If exactly two nodes have an odd degree, you must start from one of these two nodes to complete the drawing.</li><li>If neither of the above is true, you canâ€™t finish the game.</li></ul><p>In the game panel, you can see the <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">degree</a> of each node. Try to use these rules and see if they work ðŸ˜ƒ</p><p>Now, let's learn the graph theory behind this game: Eulerian graphs.</p><h2 id=\"the-seven-bridges-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-seven-bridges-problem\"><span>The Seven Bridges Problem</span></a></h2><p>The idea of Eulerian graphs comes from the famous Seven Bridges of KÃ¶nigsberg problem in the 18th century. The city of KÃ¶nigsberg (now Kaliningrad) had a river dividing it into north and south, with two islands in the river. There were seven bridges connecting the north, south, and the two islands.</p><p>The question is: Can you find a route that starts at any region, crosses each bridge exactly once, and ends at the starting point?</p><p>We can turn this into a graph problem:</p><!----><p>In this graph:</p><ul><li>Each area is a node</li><li>Each bridge is an edge</li><li>The question is: Is there a path that uses each edge exactly once and returns to the starting node?</li></ul><p>Euler finally proved that there is no solution to the seven bridges problem.</p><h2 id=\"terminology\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#terminology\"><span>Terminology</span></a></h2><p>Based on the seven bridges problem, here are a few graph theory terms:</p><h2 class=\"hidden-for-toc\" id=\"how-to-check-if-a-graph-is-eulerian\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#how-to-check-if-a-graph-is-eulerian\"><span>How to Check if a Graph is Eulerian</span></a></h2><h3 class=\"hidden-for-toc\" id=\"undirected-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#undirected-graph\"><span>Undirected Graph</span></a></h3><h3 class=\"hidden-for-toc\" id=\"directed-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#directed-graph\"><span>Directed Graph</span></a></h3><h2 class=\"hidden-for-toc\" id=\"algorithm-to-find-eulerian-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algorithm-to-find-eulerian-path\"><span>Algorithm to Find Eulerian Path</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you need to learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">Graph Terminology</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graphs</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>The \"one-stroke drawing\" game is actually about finding Eulerian paths or Eulerian circuits. You can decide if there is an Eulerian path or circuit by checking the degree of each node.</p><p>The Hierholzer algorithm is a classic way to find Eulerian paths and circuits. It is an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS in graphs</a>.</p></div> <p class=\"hint-container-title\">In One Sentence</p> <p>The \"one-stroke drawing\" game is actually about finding Eulerian paths or Eulerian circuits. You can decide if there is an Eulerian path or circuit by checking the degree of each node.</p> <p>The Hierholzer algorithm is a classic way to find Eulerian paths and circuits. It is an extension of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS in graphs</a>.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS in graphs</a> <p>Eulerian graphs are classic concepts in graph theory. They come from the famous Seven Bridges of KÃ¶nigsberg problem. This problem is important in math history and has many uses in computer science, such as path planning and circuit design.</p> <p>Since this is a basic chapter, we wonâ€™t go deep into code. The exact algorithm code and exercises will be covered in the graph theory part of the data structures chapter.</p> <p>This article will focus on the definition of Eulerian graphs, the classic seven bridges problem, what are Eulerian paths and circuits, and tips to find an Eulerian path. You can also try the \"one-stroke drawing\" game on our site to understand it better.</p> <h2 id=\"one-stroke-drawing-game\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#one-stroke-drawing-game\"><span>One-Stroke Drawing Game</span></a></h2> <a class=\"header-anchor\" href=\"#one-stroke-drawing-game\"><span>One-Stroke Drawing Game</span></a> <span>One-Stroke Drawing Game</span> <p>When I was a child, I played the \"one-stroke drawing\" game. The rule is to draw through all the points and edges in one go. You can pass a point more than once, but each edge must be used exactly once and cannot be repeated.</p> <p>This website has a game panel for this one-stroke drawing game:</p> <p>As a child, I just tried randomly, starting anywhere and seeing if I could finish. If not, I would start over.</p> <p>Later, I found out this puzzle is a classic graph theory problem, and there is a method to solve it.</p> <p>Here is the rule to solve the game:</p> <ul><li>If every node has an even degree, you can start from any node and finish the one-stroke drawing. You will end up where you started.</li><li>If exactly two nodes have an odd degree, you must start from one of these two nodes to complete the drawing.</li><li>If neither of the above is true, you canâ€™t finish the game.</li></ul> <li>If every node has an even degree, you can start from any node and finish the one-stroke drawing. You will end up where you started.</li> <li>If exactly two nodes have an odd degree, you must start from one of these two nodes to complete the drawing.</li> <li>If neither of the above is true, you canâ€™t finish the game.</li> <p>In the game panel, you can see the <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">degree</a> of each node. Try to use these rules and see if they work ðŸ˜ƒ</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-terminology/\">degree</a> <p>Now, let's learn the graph theory behind this game: Eulerian graphs.</p> <h2 id=\"the-seven-bridges-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-seven-bridges-problem\"><span>The Seven Bridges Problem</span></a></h2> <a class=\"header-anchor\" href=\"#the-seven-bridges-problem\"><span>The Seven Bridges Problem</span></a> <span>The Seven Bridges Problem</span> <p>The idea of Eulerian graphs comes from the famous Seven Bridges of KÃ¶nigsberg problem in the 18th century. The city of KÃ¶nigsberg (now Kaliningrad) had a river dividing it into north and south, with two islands in the river. There were seven bridges connecting the north, south, and the two islands.</p> <p>The question is: Can you find a route that starts at any region, crosses each bridge exactly once, and ends at the starting point?</p> <p>We can turn this into a graph problem:</p> <p>In this graph:</p> <ul><li>Each area is a node</li><li>Each bridge is an edge</li><li>The question is: Is there a path that uses each edge exactly once and returns to the starting node?</li></ul> <li>Each area is a node</li> <li>Each bridge is an edge</li> <li>The question is: Is there a path that uses each edge exactly once and returns to the starting node?</li> <p>Euler finally proved that there is no solution to the seven bridges problem.</p> <h2 id=\"terminology\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#terminology\"><span>Terminology</span></a></h2> <a class=\"header-anchor\" href=\"#terminology\"><span>Terminology</span></a> <span>Terminology</span> <p>Based on the seven bridges problem, here are a few graph theory terms:</p> <h2 class=\"hidden-for-toc\" id=\"how-to-check-if-a-graph-is-eulerian\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#how-to-check-if-a-graph-is-eulerian\"><span>How to Check if a Graph is Eulerian</span></a></h2> <a class=\"header-anchor\" href=\"#how-to-check-if-a-graph-is-eulerian\"><span>How to Check if a Graph is Eulerian</span></a> <span>How to Check if a Graph is Eulerian</span> <h3 class=\"hidden-for-toc\" id=\"undirected-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#undirected-graph\"><span>Undirected Graph</span></a></h3> <a class=\"header-anchor\" href=\"#undirected-graph\"><span>Undirected Graph</span></a> <span>Undirected Graph</span> <h3 class=\"hidden-for-toc\" id=\"directed-graph\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#directed-graph\"><span>Directed Graph</span></a></h3> <a class=\"header-anchor\" href=\"#directed-graph\"><span>Directed Graph</span></a> <span>Directed Graph</span> <h2 class=\"hidden-for-toc\" id=\"algorithm-to-find-eulerian-path\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#algorithm-to-find-eulerian-path\"><span>Algorithm to Find Eulerian Path</span></a></h2> <a class=\"header-anchor\" href=\"#algorithm-to-find-eulerian-path\"><span>Algorithm to Find Eulerian Path</span></a> <span>Algorithm to Find Eulerian Path</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\" aria-label=\"Graph Structure DFS/BFS Traversal\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Graph Structure DFS/BFS Traversal</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/graph-shortest-path/\" aria-label=\"Graph Shortest Path Algorithms Overview\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Graph Shortest Path Algorithms Overview<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\" aria-label=\"Graph Structure DFS/BFS Traversal\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Graph Structure DFS/BFS Traversal</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Graph Structure DFS/BFS Traversal</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/graph-shortest-path/\" aria-label=\"Graph Shortest Path Algorithms Overview\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Graph Shortest Path Algorithms Overview<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Graph Shortest Path Algorithms Overview<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}