{
    "url": "https://labuladong.online/algo-visualize/tutorial/uf-weighted/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } // 示例：使用权重数组对并查集算法进行优化\n// 解决了未优化的并查集算法可能退化成单链表的问题\n\n// 创建一个加权优化的并查集结构，包含 6 个节点\nlet uf = UF.createWeighted(6)\n// 显示并查集的底层数组\n// 注意多了一个 _weights 权重数组\nuf.showArray()\n\n// 合并节点时，会根据节点的权重来决定合并的方向\n// 经过权重优化，树高保持在 log(n) 级别\n\nuf.union(0, 1)\nuf.union(1, 2)\nuf.union(2, 3)\nuf.union(4, 5)\nuf.union(3, 4)\n\n// 测试节点 0 和节点 1 的连通性，打印 true\n// 时间复杂度为 O(log(n))\nconsole.log('0 <-> 1:', uf.connected(0, 1))\n\n// 返回当前并查集中连通分量的数量\nconsole.log('Connected components:', uf.count())\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}