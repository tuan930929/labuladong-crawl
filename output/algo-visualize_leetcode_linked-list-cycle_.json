{
    "url": "https://labuladong.online/algo-visualize/leetcode/linked-list-cycle/",
    "title": "环形链表 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } var hasCycle = function(head) {\n    // 快慢指针初始化指向 head\n    let slow = head, fast = head;\n    // @visualize color slow #99CCFF\n    // @visualize color fast #99CC66\n    // 快指针走到末尾时停止\n    while (fast !== null && fast.next !== null) {\n        // 慢指针走一步，快指针走两步\n        slow = slow.next;\n        fast = fast.next.next;\n        // 快慢指针相遇，说明含有环\n        if (slow === fast) {\n            return true;\n        }\n    }\n    // 不包含环\n    return false;\n};\n\nlet head = LinkedList.createCyclicHead([1,3,5,7,2,4], 2)\nlet result = hasCycle(head)\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}