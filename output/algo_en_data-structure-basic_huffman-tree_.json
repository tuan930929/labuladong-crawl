{
    "url": "https://labuladong.online/algo/en/data-structure-basic/huffman-tree/",
    "title": "Data Compression and Huffman Tree | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Data Compression and Huffman Tree</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1796 words</span><meta property=\"wordCount\" content=\"1796\"></span></div><hr></div> <h1><!---->Data Compression and Huffman Tree</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1796 words</span><meta property=\"wordCount\" content=\"1796\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1796 words</span><meta property=\"wordCount\" content=\"1796\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 1796 words</span> <meta property=\"wordCount\" content=\"1796\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Huffman tree is a classic application of binary trees. It is an optimal prefix code tree and is often used for data compression.</p></div><p>This article will introduce the idea behind Huffman coding and compare it with some common data compression methods.</p><p>The actual code will be shown in the data structure design section. You will learn how to use Huffman coding to build a compression program.</p><h2 id=\"a-brief-talk-about-data-compression\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#a-brief-talk-about-data-compression\"><span>A Brief Talk About Data Compression</span></a></h2><p>We can divide data compression algorithms into two types: <strong>lossless compression</strong> and <strong>lossy compression</strong>.</p><p><strong>Lossless compression</strong> means the compressed data can be fully restored, with no information lost.</p><p>For example, when we pack some files into a zip file, the zip file takes less disk space, and when we unzip it, we can get back the original files without any loss. This is lossless compression.</p><p><strong>Lossy compression</strong> means some information is lost during compression, but the compression ratio is higher (the compressed data is smaller).</p><p>For example, when we compress images, some tools can greatly reduce image file size without obvious loss of quality. This is lossy compression.</p><p>Now, let's think about some questions:</p><ol><li>How can lossy compression keep the image quality while losing information?</li><li>Lossy compression loses information to save space, which is easy to understand. But how does lossless compression reduce data size while not losing any information?</li></ol><p>First, lossy compression will always reduce the image quality, but the loss is within what we can accept.</p><p>Take image compression for example. The human eye is more sensitive to \"brightness\" than \"color\". So, we can use lower-precision data to store \"color\". Even if we lose some \"color\" information, we can hardly tell the difference.</p><p>But lossless compression cannot do this, because it must allow the data to be fully restored. So, <strong>the essence of lossless compression is encoding and decoding</strong>.</p><p>For example, the string <code>hahahahahahaha</code> can be encoded as <code>ha*7</code>. When decoding, we just repeat <code>ha</code> 7 times to get the original string.</p><p><strong>The effect of lossless compression depends on how well the algorithm can find and use redundant information in the original data</strong>.</p><p>General-purpose compression algorithms can find less redundancy, so the compression rate is lower. Special-purpose algorithms can find more redundancy and achieve better compression.</p><p>For example, audio files have sound wave data. A special audio compression can find redundancy in sound waves and compress it well. But a general zip compressor just sees audio files as byte streams and cannot find sound wave redundancy, so the compression is not as good.</p><p>So, there is no perfect compression algorithm. We must make trade-offs between being general, compression rate, and performance.</p><p>Huffman coding, which we are going to discuss, is a general-purpose lossless compression algorithm. When you give your data to the Huffman algorithm, you will get compressed data and a code table. You need the code table to decode and restore the original data.</p><h2 id=\"fixed-length-encoding-vs-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#fixed-length-encoding-vs-variable-length-encoding\"><span>Fixed-Length Encoding vs Variable-Length Encoding</span></a></h2><p>Now, let's talk about fixed-length encoding and variable-length encoding.</p><p>ASCII is a fixed-length encoding. It uses 8 bits (1 byte) for each character.</p><p>UTF-8 is a variable-length encoding. It uses 1 to 4 bytes for each character.</p><p><strong>The biggest advantage of fixed-length encoding is random access</strong>. Because each character uses the same number of bits, you can easily find a character's position by its index.</p><p><strong>The advantage of variable-length encoding is high storage efficiency</strong>. For example, UTF-8 uses 1 byte for English letters and 3 bytes for Chinese characters. It is more flexible and saves space compared to ASCII. But because the length varies, you can't use the index for random access.</p><p>Think about this: modern text editors use UTF-8, and random access is a basic feature. If every access requires scanning from the start, it would be very slow. How do editors solve this?</p><p>Back to the compression example. Suppose we have the string <code>aaabacc</code>, which has 7 lowercase letters. Using ASCII, we need 7x8=56 bits. If we want to compress it further, what should we do?</p><p>Since we only have <code>a</code>, <code>b</code>, and <code>c</code>, we do not need 8 bits for each character. 2 bits are enough.</p><p>For example, we can encode as follows:</p><ul><li><code>a</code> as <code>00</code></li><li><code>b</code> as <code>01</code></li><li><code>c</code> as <code>10</code></li></ul><p>So <code>aaabacc</code> becomes <code>00000001001010</code> in binary, which is 14 bits.</p><p>This is called <strong>fixed-length encoding</strong> because each character uses 2 bits.</p><p>Fixed-length encoding is simple. As long as you know all possible characters, you can assign codes. But the compression is not great, because it does not use the frequency of each character.</p><p>For example, in <code>aaabacc</code>, <code>a</code> appears most, while <code>b</code> and <code>c</code> are rare. Can we use shorter codes for <code>a</code>, and longer codes for <code>b</code> and <code>c</code>?</p><p>Yes, this is called <strong>variable-length encoding</strong>. For example:</p><ul><li><code>a</code> as <code>0</code></li><li><code>b</code> as <code>10</code></li><li><code>c</code> as <code>11</code></li></ul><p>So <code>aaabacc</code> becomes <code>0001001111</code> in binary, which is 11 bits. This is better than fixed-length encoding.</p><h2 id=\"the-difficulties-of-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-difficulties-of-variable-length-encoding\"><span>The Difficulties of Variable-Length Encoding</span></a></h2><div class=\"hint-container important\"><p class=\"hint-container-title\">Two Main Difficulties</p><ol><li><p>How to design the encoding so that decoding is always unique?</p></li><li><p>How to keep the compression rate high (make the encoded data as short as possible)?</p></li><li><p>How to make decoding efficient?</p></li></ol></div><p>Let's look closely at the example <code>aaabacc</code> above.</p><p>This encoding scheme has no ambiguity:</p><ul><li><code>a</code> is encoded as <code>0</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul><p>But if you encode <code>a</code> as <code>1</code>, then there is ambiguity between the codes for <code>a</code> and <code>c</code>:</p><ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul><p>The string <code>aaabacc</code> would be encoded as binary <code>11111011111</code>, but now the codes for <code>a</code> and <code>c</code> are confusing. <code>11</code> could be decoded as <code>c</code> or as <code>aa</code>. So you cannot decode the original data correctly.</p><p>By comparing these two examples, you can see a rule: <strong>No code should be a prefix of another code</strong>.</p><p>For example, in the second case, <code>a</code> is <code>1</code>, but both <code>b</code> and <code>c</code> start with <code>1</code>, so the code has ambiguity.</p><p>Some readers might say, what about this encoding scheme:</p><ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>100</code></li></ul><p>Although the codes have the same prefix, you could add extra logic when decoding:</p><p>When you read a <code>1</code>, you look ahead two more bits to see if you can match <code>10</code> or <code>100</code>. Then you decide how to decode.</p><p>This can make decoding unique, <strong>but the compression rate is low, and decoding is slow</strong>. The look-ahead logic acts like a nested for loop:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Suppose the longest code length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, and the total encoded data length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, then the decoding time complexity is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span>.</p><p>If you make sure that no code is a prefix of another, you don't need to look ahead. Then, decoding time drops to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>.</p><p>In real encoding and decoding, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is usually large. Even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is small, decoding several times slower is still a big problem. So we want our algorithm's time complexity to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>, and the compression rate to be as high as possible.</p><h2 class=\"hidden-for-toc\" id=\"principle-of-huffman-coding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#principle-of-huffman-coding\"><span>Principle of Huffman Coding</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Huffman tree is a classic application of binary trees. It is an optimal prefix code tree and is often used for data compression.</p></div><p>This article will introduce the idea behind Huffman coding and compare it with some common data compression methods.</p><p>The actual code will be shown in the data structure design section. You will learn how to use Huffman coding to build a compression program.</p><h2 id=\"a-brief-talk-about-data-compression\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#a-brief-talk-about-data-compression\"><span>A Brief Talk About Data Compression</span></a></h2><p>We can divide data compression algorithms into two types: <strong>lossless compression</strong> and <strong>lossy compression</strong>.</p><p><strong>Lossless compression</strong> means the compressed data can be fully restored, with no information lost.</p><p>For example, when we pack some files into a zip file, the zip file takes less disk space, and when we unzip it, we can get back the original files without any loss. This is lossless compression.</p><p><strong>Lossy compression</strong> means some information is lost during compression, but the compression ratio is higher (the compressed data is smaller).</p><p>For example, when we compress images, some tools can greatly reduce image file size without obvious loss of quality. This is lossy compression.</p><p>Now, let's think about some questions:</p><ol><li>How can lossy compression keep the image quality while losing information?</li><li>Lossy compression loses information to save space, which is easy to understand. But how does lossless compression reduce data size while not losing any information?</li></ol><p>First, lossy compression will always reduce the image quality, but the loss is within what we can accept.</p><p>Take image compression for example. The human eye is more sensitive to \"brightness\" than \"color\". So, we can use lower-precision data to store \"color\". Even if we lose some \"color\" information, we can hardly tell the difference.</p><p>But lossless compression cannot do this, because it must allow the data to be fully restored. So, <strong>the essence of lossless compression is encoding and decoding</strong>.</p><p>For example, the string <code>hahahahahahaha</code> can be encoded as <code>ha*7</code>. When decoding, we just repeat <code>ha</code> 7 times to get the original string.</p><p><strong>The effect of lossless compression depends on how well the algorithm can find and use redundant information in the original data</strong>.</p><p>General-purpose compression algorithms can find less redundancy, so the compression rate is lower. Special-purpose algorithms can find more redundancy and achieve better compression.</p><p>For example, audio files have sound wave data. A special audio compression can find redundancy in sound waves and compress it well. But a general zip compressor just sees audio files as byte streams and cannot find sound wave redundancy, so the compression is not as good.</p><p>So, there is no perfect compression algorithm. We must make trade-offs between being general, compression rate, and performance.</p><p>Huffman coding, which we are going to discuss, is a general-purpose lossless compression algorithm. When you give your data to the Huffman algorithm, you will get compressed data and a code table. You need the code table to decode and restore the original data.</p><h2 id=\"fixed-length-encoding-vs-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#fixed-length-encoding-vs-variable-length-encoding\"><span>Fixed-Length Encoding vs Variable-Length Encoding</span></a></h2><p>Now, let's talk about fixed-length encoding and variable-length encoding.</p><p>ASCII is a fixed-length encoding. It uses 8 bits (1 byte) for each character.</p><p>UTF-8 is a variable-length encoding. It uses 1 to 4 bytes for each character.</p><p><strong>The biggest advantage of fixed-length encoding is random access</strong>. Because each character uses the same number of bits, you can easily find a character's position by its index.</p><p><strong>The advantage of variable-length encoding is high storage efficiency</strong>. For example, UTF-8 uses 1 byte for English letters and 3 bytes for Chinese characters. It is more flexible and saves space compared to ASCII. But because the length varies, you can't use the index for random access.</p><p>Think about this: modern text editors use UTF-8, and random access is a basic feature. If every access requires scanning from the start, it would be very slow. How do editors solve this?</p><p>Back to the compression example. Suppose we have the string <code>aaabacc</code>, which has 7 lowercase letters. Using ASCII, we need 7x8=56 bits. If we want to compress it further, what should we do?</p><p>Since we only have <code>a</code>, <code>b</code>, and <code>c</code>, we do not need 8 bits for each character. 2 bits are enough.</p><p>For example, we can encode as follows:</p><ul><li><code>a</code> as <code>00</code></li><li><code>b</code> as <code>01</code></li><li><code>c</code> as <code>10</code></li></ul><p>So <code>aaabacc</code> becomes <code>00000001001010</code> in binary, which is 14 bits.</p><p>This is called <strong>fixed-length encoding</strong> because each character uses 2 bits.</p><p>Fixed-length encoding is simple. As long as you know all possible characters, you can assign codes. But the compression is not great, because it does not use the frequency of each character.</p><p>For example, in <code>aaabacc</code>, <code>a</code> appears most, while <code>b</code> and <code>c</code> are rare. Can we use shorter codes for <code>a</code>, and longer codes for <code>b</code> and <code>c</code>?</p><p>Yes, this is called <strong>variable-length encoding</strong>. For example:</p><ul><li><code>a</code> as <code>0</code></li><li><code>b</code> as <code>10</code></li><li><code>c</code> as <code>11</code></li></ul><p>So <code>aaabacc</code> becomes <code>0001001111</code> in binary, which is 11 bits. This is better than fixed-length encoding.</p><h2 id=\"the-difficulties-of-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-difficulties-of-variable-length-encoding\"><span>The Difficulties of Variable-Length Encoding</span></a></h2><div class=\"hint-container important\"><p class=\"hint-container-title\">Two Main Difficulties</p><ol><li><p>How to design the encoding so that decoding is always unique?</p></li><li><p>How to keep the compression rate high (make the encoded data as short as possible)?</p></li><li><p>How to make decoding efficient?</p></li></ol></div><p>Let's look closely at the example <code>aaabacc</code> above.</p><p>This encoding scheme has no ambiguity:</p><ul><li><code>a</code> is encoded as <code>0</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul><p>But if you encode <code>a</code> as <code>1</code>, then there is ambiguity between the codes for <code>a</code> and <code>c</code>:</p><ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul><p>The string <code>aaabacc</code> would be encoded as binary <code>11111011111</code>, but now the codes for <code>a</code> and <code>c</code> are confusing. <code>11</code> could be decoded as <code>c</code> or as <code>aa</code>. So you cannot decode the original data correctly.</p><p>By comparing these two examples, you can see a rule: <strong>No code should be a prefix of another code</strong>.</p><p>For example, in the second case, <code>a</code> is <code>1</code>, but both <code>b</code> and <code>c</code> start with <code>1</code>, so the code has ambiguity.</p><p>Some readers might say, what about this encoding scheme:</p><ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>100</code></li></ul><p>Although the codes have the same prefix, you could add extra logic when decoding:</p><p>When you read a <code>1</code>, you look ahead two more bits to see if you can match <code>10</code> or <code>100</code>. Then you decide how to decode.</p><p>This can make decoding unique, <strong>but the compression rate is low, and decoding is slow</strong>. The look-ahead logic acts like a nested for loop:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Suppose the longest code length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, and the total encoded data length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, then the decoding time complexity is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span>.</p><p>If you make sure that no code is a prefix of another, you don't need to look ahead. Then, decoding time drops to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>.</p><p>In real encoding and decoding, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is usually large. Even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is small, decoding several times slower is still a big problem. So we want our algorithm's time complexity to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>, and the compression rate to be as high as possible.</p><h2 class=\"hidden-for-toc\" id=\"principle-of-huffman-coding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#principle-of-huffman-coding\"><span>Principle of Huffman Coding</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a></li></ul></div> <p class=\"hint-container-title\">Prerequisite</p> <p>Before reading this article, you need to learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/binary-tree-basic/\">Basics and Common Types of Binary Trees</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">In One Sentence</p><p>Huffman tree is a classic application of binary trees. It is an optimal prefix code tree and is often used for data compression.</p></div> <p class=\"hint-container-title\">In One Sentence</p> <p>Huffman tree is a classic application of binary trees. It is an optimal prefix code tree and is often used for data compression.</p> <p>This article will introduce the idea behind Huffman coding and compare it with some common data compression methods.</p> <p>The actual code will be shown in the data structure design section. You will learn how to use Huffman coding to build a compression program.</p> <h2 id=\"a-brief-talk-about-data-compression\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#a-brief-talk-about-data-compression\"><span>A Brief Talk About Data Compression</span></a></h2> <a class=\"header-anchor\" href=\"#a-brief-talk-about-data-compression\"><span>A Brief Talk About Data Compression</span></a> <span>A Brief Talk About Data Compression</span> <p>We can divide data compression algorithms into two types: <strong>lossless compression</strong> and <strong>lossy compression</strong>.</p> <strong>lossless compression</strong> <strong>lossy compression</strong> <p><strong>Lossless compression</strong> means the compressed data can be fully restored, with no information lost.</p> <strong>Lossless compression</strong> <p>For example, when we pack some files into a zip file, the zip file takes less disk space, and when we unzip it, we can get back the original files without any loss. This is lossless compression.</p> <p><strong>Lossy compression</strong> means some information is lost during compression, but the compression ratio is higher (the compressed data is smaller).</p> <strong>Lossy compression</strong> <p>For example, when we compress images, some tools can greatly reduce image file size without obvious loss of quality. This is lossy compression.</p> <p>Now, let's think about some questions:</p> <ol><li>How can lossy compression keep the image quality while losing information?</li><li>Lossy compression loses information to save space, which is easy to understand. But how does lossless compression reduce data size while not losing any information?</li></ol> <li>How can lossy compression keep the image quality while losing information?</li> <li>Lossy compression loses information to save space, which is easy to understand. But how does lossless compression reduce data size while not losing any information?</li> <p>First, lossy compression will always reduce the image quality, but the loss is within what we can accept.</p> <p>Take image compression for example. The human eye is more sensitive to \"brightness\" than \"color\". So, we can use lower-precision data to store \"color\". Even if we lose some \"color\" information, we can hardly tell the difference.</p> <p>But lossless compression cannot do this, because it must allow the data to be fully restored. So, <strong>the essence of lossless compression is encoding and decoding</strong>.</p> <strong>the essence of lossless compression is encoding and decoding</strong> <p>For example, the string <code>hahahahahahaha</code> can be encoded as <code>ha*7</code>. When decoding, we just repeat <code>ha</code> 7 times to get the original string.</p> <code>hahahahahahaha</code> <code>ha*7</code> <code>ha</code> <p><strong>The effect of lossless compression depends on how well the algorithm can find and use redundant information in the original data</strong>.</p> <strong>The effect of lossless compression depends on how well the algorithm can find and use redundant information in the original data</strong> <p>General-purpose compression algorithms can find less redundancy, so the compression rate is lower. Special-purpose algorithms can find more redundancy and achieve better compression.</p> <p>For example, audio files have sound wave data. A special audio compression can find redundancy in sound waves and compress it well. But a general zip compressor just sees audio files as byte streams and cannot find sound wave redundancy, so the compression is not as good.</p> <p>So, there is no perfect compression algorithm. We must make trade-offs between being general, compression rate, and performance.</p> <p>Huffman coding, which we are going to discuss, is a general-purpose lossless compression algorithm. When you give your data to the Huffman algorithm, you will get compressed data and a code table. You need the code table to decode and restore the original data.</p> <h2 id=\"fixed-length-encoding-vs-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#fixed-length-encoding-vs-variable-length-encoding\"><span>Fixed-Length Encoding vs Variable-Length Encoding</span></a></h2> <a class=\"header-anchor\" href=\"#fixed-length-encoding-vs-variable-length-encoding\"><span>Fixed-Length Encoding vs Variable-Length Encoding</span></a> <span>Fixed-Length Encoding vs Variable-Length Encoding</span> <p>Now, let's talk about fixed-length encoding and variable-length encoding.</p> <p>ASCII is a fixed-length encoding. It uses 8 bits (1 byte) for each character.</p> <p>UTF-8 is a variable-length encoding. It uses 1 to 4 bytes for each character.</p> <p><strong>The biggest advantage of fixed-length encoding is random access</strong>. Because each character uses the same number of bits, you can easily find a character's position by its index.</p> <strong>The biggest advantage of fixed-length encoding is random access</strong> <p><strong>The advantage of variable-length encoding is high storage efficiency</strong>. For example, UTF-8 uses 1 byte for English letters and 3 bytes for Chinese characters. It is more flexible and saves space compared to ASCII. But because the length varies, you can't use the index for random access.</p> <strong>The advantage of variable-length encoding is high storage efficiency</strong> <p>Think about this: modern text editors use UTF-8, and random access is a basic feature. If every access requires scanning from the start, it would be very slow. How do editors solve this?</p> <p>Back to the compression example. Suppose we have the string <code>aaabacc</code>, which has 7 lowercase letters. Using ASCII, we need 7x8=56 bits. If we want to compress it further, what should we do?</p> <code>aaabacc</code> <p>Since we only have <code>a</code>, <code>b</code>, and <code>c</code>, we do not need 8 bits for each character. 2 bits are enough.</p> <code>a</code> <code>b</code> <code>c</code> <p>For example, we can encode as follows:</p> <ul><li><code>a</code> as <code>00</code></li><li><code>b</code> as <code>01</code></li><li><code>c</code> as <code>10</code></li></ul> <li><code>a</code> as <code>00</code></li> <code>a</code> <code>00</code> <li><code>b</code> as <code>01</code></li> <code>b</code> <code>01</code> <li><code>c</code> as <code>10</code></li> <code>c</code> <code>10</code> <p>So <code>aaabacc</code> becomes <code>00000001001010</code> in binary, which is 14 bits.</p> <code>aaabacc</code> <code>00000001001010</code> <p>This is called <strong>fixed-length encoding</strong> because each character uses 2 bits.</p> <strong>fixed-length encoding</strong> <p>Fixed-length encoding is simple. As long as you know all possible characters, you can assign codes. But the compression is not great, because it does not use the frequency of each character.</p> <p>For example, in <code>aaabacc</code>, <code>a</code> appears most, while <code>b</code> and <code>c</code> are rare. Can we use shorter codes for <code>a</code>, and longer codes for <code>b</code> and <code>c</code>?</p> <code>aaabacc</code> <code>a</code> <code>b</code> <code>c</code> <code>a</code> <code>b</code> <code>c</code> <p>Yes, this is called <strong>variable-length encoding</strong>. For example:</p> <strong>variable-length encoding</strong> <ul><li><code>a</code> as <code>0</code></li><li><code>b</code> as <code>10</code></li><li><code>c</code> as <code>11</code></li></ul> <li><code>a</code> as <code>0</code></li> <code>a</code> <code>0</code> <li><code>b</code> as <code>10</code></li> <code>b</code> <code>10</code> <li><code>c</code> as <code>11</code></li> <code>c</code> <code>11</code> <p>So <code>aaabacc</code> becomes <code>0001001111</code> in binary, which is 11 bits. This is better than fixed-length encoding.</p> <code>aaabacc</code> <code>0001001111</code> <h2 id=\"the-difficulties-of-variable-length-encoding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#the-difficulties-of-variable-length-encoding\"><span>The Difficulties of Variable-Length Encoding</span></a></h2> <a class=\"header-anchor\" href=\"#the-difficulties-of-variable-length-encoding\"><span>The Difficulties of Variable-Length Encoding</span></a> <span>The Difficulties of Variable-Length Encoding</span> <div class=\"hint-container important\"><p class=\"hint-container-title\">Two Main Difficulties</p><ol><li><p>How to design the encoding so that decoding is always unique?</p></li><li><p>How to keep the compression rate high (make the encoded data as short as possible)?</p></li><li><p>How to make decoding efficient?</p></li></ol></div> <p class=\"hint-container-title\">Two Main Difficulties</p> <ol><li><p>How to design the encoding so that decoding is always unique?</p></li><li><p>How to keep the compression rate high (make the encoded data as short as possible)?</p></li><li><p>How to make decoding efficient?</p></li></ol> <li><p>How to design the encoding so that decoding is always unique?</p></li> <p>How to design the encoding so that decoding is always unique?</p> <li><p>How to keep the compression rate high (make the encoded data as short as possible)?</p></li> <p>How to keep the compression rate high (make the encoded data as short as possible)?</p> <li><p>How to make decoding efficient?</p></li> <p>How to make decoding efficient?</p> <p>Let's look closely at the example <code>aaabacc</code> above.</p> <code>aaabacc</code> <p>This encoding scheme has no ambiguity:</p> <ul><li><code>a</code> is encoded as <code>0</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul> <li><code>a</code> is encoded as <code>0</code></li> <code>a</code> <code>0</code> <li><code>b</code> is encoded as <code>10</code></li> <code>b</code> <code>10</code> <li><code>c</code> is encoded as <code>11</code></li> <code>c</code> <code>11</code> <p>But if you encode <code>a</code> as <code>1</code>, then there is ambiguity between the codes for <code>a</code> and <code>c</code>:</p> <code>a</code> <code>1</code> <code>a</code> <code>c</code> <ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>11</code></li></ul> <li><code>a</code> is encoded as <code>1</code></li> <code>a</code> <code>1</code> <li><code>b</code> is encoded as <code>10</code></li> <code>b</code> <code>10</code> <li><code>c</code> is encoded as <code>11</code></li> <code>c</code> <code>11</code> <p>The string <code>aaabacc</code> would be encoded as binary <code>11111011111</code>, but now the codes for <code>a</code> and <code>c</code> are confusing. <code>11</code> could be decoded as <code>c</code> or as <code>aa</code>. So you cannot decode the original data correctly.</p> <code>aaabacc</code> <code>11111011111</code> <code>a</code> <code>c</code> <code>11</code> <code>c</code> <code>aa</code> <p>By comparing these two examples, you can see a rule: <strong>No code should be a prefix of another code</strong>.</p> <strong>No code should be a prefix of another code</strong> <p>For example, in the second case, <code>a</code> is <code>1</code>, but both <code>b</code> and <code>c</code> start with <code>1</code>, so the code has ambiguity.</p> <code>a</code> <code>1</code> <code>b</code> <code>c</code> <code>1</code> <p>Some readers might say, what about this encoding scheme:</p> <ul><li><code>a</code> is encoded as <code>1</code></li><li><code>b</code> is encoded as <code>10</code></li><li><code>c</code> is encoded as <code>100</code></li></ul> <li><code>a</code> is encoded as <code>1</code></li> <code>a</code> <code>1</code> <li><code>b</code> is encoded as <code>10</code></li> <code>b</code> <code>10</code> <li><code>c</code> is encoded as <code>100</code></li> <code>c</code> <code>100</code> <p>Although the codes have the same prefix, you could add extra logic when decoding:</p> <p>When you read a <code>1</code>, you look ahead two more bits to see if you can match <code>10</code> or <code>100</code>. Then you decide how to decode.</p> <code>1</code> <code>10</code> <code>100</code> <p>This can make decoding unique, <strong>but the compression rate is low, and decoding is slow</strong>. The look-ahead logic acts like a nested for loop:</p> <strong>but the compression rate is low, and decoding is slow</strong> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> i</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">0</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; i &lt; N; i++) {</span> <span class=\"line\"><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span></span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">    for</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> (</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> j</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">; j &lt;= K; j++) {</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">        ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">    }</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>Suppose the longest code length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, and the total encoded data length is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, then the decoding time complexity is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span>.</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math> <semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics> <mrow><mi>K</mi></mrow> <mi>K</mi> <annotation encoding=\"application/x-tex\">K</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span> <span class=\"strut\" style=\"height:0.6833em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math> <semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics> <mrow><mi>N</mi></mrow> <mi>N</mi> <annotation encoding=\"application/x-tex\">N</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span> <span class=\"strut\" style=\"height:0.6833em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(NK)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mi>K</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(NK)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span> <span class=\"mclose\">)</span> <p>If you make sure that no code is a prefix of another, you don't need to look ahead. Then, decoding time drops to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>.</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <p>In real encoding and decoding, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is usually large. Even if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is small, decoding several times slower is still a big problem. So we want our algorithm's time complexity to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>, and the compression rate to be as high as possible.</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math> <semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics> <mrow><mi>N</mi></mrow> <mi>N</mi> <annotation encoding=\"application/x-tex\">N</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span> <span class=\"strut\" style=\"height:0.6833em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math> <semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics> <mrow><mi>K</mi></mrow> <mi>K</mi> <annotation encoding=\"application/x-tex\">K</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span> <span class=\"strut\" style=\"height:0.6833em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(N)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(N)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <h2 class=\"hidden-for-toc\" id=\"principle-of-huffman-coding\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#principle-of-huffman-coding\"><span>Principle of Huffman Coding</span></a></h2> <a class=\"header-anchor\" href=\"#principle-of-huffman-coding\"><span>Principle of Huffman Coding</span></a> <span>Principle of Huffman Coding</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\" aria-label=\"Segment Tree Basics and Visualization\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Segment Tree Basics and Visualization</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/intro/updating/\" aria-label=\"Updating\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Updating<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\" aria-label=\"Segment Tree Basics and Visualization\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Segment Tree Basics and Visualization</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Segment Tree Basics and Visualization</div> <a class=\"route-link auto-link next\" href=\"/algo/en/intro/updating/\" aria-label=\"Updating\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Updating<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Updating<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}