{
    "url": "https://labuladong.online/algo/data-structure-basic/hashtable-chaining/",
    "title": "用拉链法实现哈希表 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->用拉链法实现哈希表</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3268 字</span><meta property=\"wordCount\" content=\"3268\"></span></div><hr></div> <h1><!---->用拉链法实现哈希表</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3268 字</span><meta property=\"wordCount\" content=\"3268\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3268 字</span><meta property=\"wordCount\" content=\"3268\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 3268 字</span> <meta property=\"wordCount\" content=\"3268\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a></li></ul></div><p>前文 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 中我介绍了哈希表的核心原理和几个关键概念，其中提到了解决哈希冲突的方法主要有两种，分别是拉链法和开放寻址法（也常叫做线性探查法）：</p><div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>本文就来具体介绍一下拉链法的实现原理和代码。</p><p><strong>首先，我会结合 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 用拉链法实现一个简化版的哈希表，带大家直观地理解拉链法是如何实现增删查改的 API 并解决哈希冲突的，最后再给出一个比较完善的 Java 代码实现</strong>。</p><h2 id=\"拉链法的简化版实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8B%89%E9%93%BE%E6%B3%95%E7%9A%84%E7%AE%80%E5%8C%96%E7%89%88%E5%AE%9E%E7%8E%B0\"><span>拉链法的简化版实现</span></a></h2><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 已经介绍过哈希函数和 <code>key</code> 的类型的关系，其中 <code>hash</code> 函数的作用是在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间把 <code>key</code> 转化成数组的索引，而 <code>key</code> 可以是任意不可变的类型。</p><p>但是这里为了方便诸位理解，我先做如下简化：</p><p>1、我们实现的哈希表只支持 <code>key</code> 类型为 <code>int</code>，<code>value</code> 类型为 <code>int</code> 的情况，如果 <code>key</code> 不存在，就返回 <code>-1</code>。</p><p>2、我们实现的 <code>hash</code> 函数就是简单地取模，即 <code>hash(key) = key % table.length</code>。这样也方便模拟出哈希冲突的情况，比如当 <code>table.length = 10</code> 时，<code>hash(1)</code> 和 <code>hash(11)</code> 的值都是 1。</p><p>3、底层的 <code>table</code> 数组的大小在创建哈希表时就固定，不考虑负载因子和动态扩缩容的问题。</p><p>这些简化能够帮助我们聚焦增删查改的核心逻辑，并且可以借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 辅助大家学习理解。</p><h3 class=\"hidden-for-toc\" id=\"简化版代码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%80%E5%8C%96%E7%89%88%E4%BB%A3%E7%A0%81\"><span>简化版代码</span></a></h3><h3 class=\"hidden-for-toc\" id=\"可视化面板展示增删查改过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF%E5%B1%95%E7%A4%BA%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E8%BF%87%E7%A8%8B\"><span>可视化面板展示增删查改过程</span></a></h3><h2 class=\"hidden-for-toc\" id=\"完整代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>完整代码实现</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a></li></ul></div><p>前文 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 中我介绍了哈希表的核心原理和几个关键概念，其中提到了解决哈希冲突的方法主要有两种，分别是拉链法和开放寻址法（也常叫做线性探查法）：</p><div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>本文就来具体介绍一下拉链法的实现原理和代码。</p><p><strong>首先，我会结合 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 用拉链法实现一个简化版的哈希表，带大家直观地理解拉链法是如何实现增删查改的 API 并解决哈希冲突的，最后再给出一个比较完善的 Java 代码实现</strong>。</p><h2 id=\"拉链法的简化版实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8B%89%E9%93%BE%E6%B3%95%E7%9A%84%E7%AE%80%E5%8C%96%E7%89%88%E5%AE%9E%E7%8E%B0\"><span>拉链法的简化版实现</span></a></h2><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 已经介绍过哈希函数和 <code>key</code> 的类型的关系，其中 <code>hash</code> 函数的作用是在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间把 <code>key</code> 转化成数组的索引，而 <code>key</code> 可以是任意不可变的类型。</p><p>但是这里为了方便诸位理解，我先做如下简化：</p><p>1、我们实现的哈希表只支持 <code>key</code> 类型为 <code>int</code>，<code>value</code> 类型为 <code>int</code> 的情况，如果 <code>key</code> 不存在，就返回 <code>-1</code>。</p><p>2、我们实现的 <code>hash</code> 函数就是简单地取模，即 <code>hash(key) = key % table.length</code>。这样也方便模拟出哈希冲突的情况，比如当 <code>table.length = 10</code> 时，<code>hash(1)</code> 和 <code>hash(11)</code> 的值都是 1。</p><p>3、底层的 <code>table</code> 数组的大小在创建哈希表时就固定，不考虑负载因子和动态扩缩容的问题。</p><p>这些简化能够帮助我们聚焦增删查改的核心逻辑，并且可以借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 辅助大家学习理解。</p><h3 class=\"hidden-for-toc\" id=\"简化版代码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%80%E5%8C%96%E7%89%88%E4%BB%A3%E7%A0%81\"><span>简化版代码</span></a></h3><h3 class=\"hidden-for-toc\" id=\"可视化面板展示增删查改过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF%E5%B1%95%E7%A4%BA%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E8%BF%87%E7%A8%8B\"><span>可视化面板展示增删查改过程</span></a></h3><h2 class=\"hidden-for-toc\" id=\"完整代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>完整代码实现</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">链表（链式存储）基础</a> <p>前文 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 中我介绍了哈希表的核心原理和几个关键概念，其中提到了解决哈希冲突的方法主要有两种，分别是拉链法和开放寻址法（也常叫做线性探查法）：</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> <div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/ds-basic/hash-collision.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>本文就来具体介绍一下拉链法的实现原理和代码。</p> <p><strong>首先，我会结合 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 用拉链法实现一个简化版的哈希表，带大家直观地理解拉链法是如何实现增删查改的 API 并解决哈希冲突的，最后再给出一个比较完善的 Java 代码实现</strong>。</p> <strong>首先，我会结合 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 用拉链法实现一个简化版的哈希表，带大家直观地理解拉链法是如何实现增删查改的 API 并解决哈希冲突的，最后再给出一个比较完善的 Java 代码实现</strong> <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> <h2 id=\"拉链法的简化版实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%8B%89%E9%93%BE%E6%B3%95%E7%9A%84%E7%AE%80%E5%8C%96%E7%89%88%E5%AE%9E%E7%8E%B0\"><span>拉链法的简化版实现</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%8B%89%E9%93%BE%E6%B3%95%E7%9A%84%E7%AE%80%E5%8C%96%E7%89%88%E5%AE%9E%E7%8E%B0\"><span>拉链法的简化版实现</span></a> <span>拉链法的简化版实现</span> <p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> 已经介绍过哈希函数和 <code>key</code> 的类型的关系，其中 <code>hash</code> 函数的作用是在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间把 <code>key</code> 转化成数组的索引，而 <code>key</code> 可以是任意不可变的类型。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表核心原理</a> <code>key</code> <code>hash</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <code>key</code> <code>key</code> <p>但是这里为了方便诸位理解，我先做如下简化：</p> <p>1、我们实现的哈希表只支持 <code>key</code> 类型为 <code>int</code>，<code>value</code> 类型为 <code>int</code> 的情况，如果 <code>key</code> 不存在，就返回 <code>-1</code>。</p> <code>key</code> <code>int</code> <code>value</code> <code>int</code> <code>key</code> <code>-1</code> <p>2、我们实现的 <code>hash</code> 函数就是简单地取模，即 <code>hash(key) = key % table.length</code>。这样也方便模拟出哈希冲突的情况，比如当 <code>table.length = 10</code> 时，<code>hash(1)</code> 和 <code>hash(11)</code> 的值都是 1。</p> <code>hash</code> <code>hash(key) = key % table.length</code> <code>table.length = 10</code> <code>hash(1)</code> <code>hash(11)</code> <p>3、底层的 <code>table</code> 数组的大小在创建哈希表时就固定，不考虑负载因子和动态扩缩容的问题。</p> <code>table</code> <p>这些简化能够帮助我们聚焦增删查改的核心逻辑，并且可以借助 <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> 辅助大家学习理解。</p> <a class=\"route-link\" href=\"/algo/intro/visualize/\">可视化面板</a> <h3 class=\"hidden-for-toc\" id=\"简化版代码\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%80%E5%8C%96%E7%89%88%E4%BB%A3%E7%A0%81\"><span>简化版代码</span></a></h3> <a class=\"header-anchor\" href=\"#%E7%AE%80%E5%8C%96%E7%89%88%E4%BB%A3%E7%A0%81\"><span>简化版代码</span></a> <span>简化版代码</span> <h3 class=\"hidden-for-toc\" id=\"可视化面板展示增删查改过程\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF%E5%B1%95%E7%A4%BA%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E8%BF%87%E7%A8%8B\"><span>可视化面板展示增删查改过程</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF%E5%B1%95%E7%A4%BA%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E8%BF%87%E7%A8%8B\"><span>可视化面板展示增删查改过程</span></a> <span>可视化面板展示增删查改过程</span> <h2 class=\"hidden-for-toc\" id=\"完整代码实现\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>完整代码实现</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span>完整代码实现</span></a> <span>完整代码实现</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/hashmap-basic/\" aria-label=\"哈希表核心原理\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->哈希表核心原理</div></a><a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/linear-probing-key-point/\" aria-label=\"线性探查法的两个难点\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">线性探查法的两个难点<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/hashmap-basic/\" aria-label=\"哈希表核心原理\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->哈希表核心原理</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->哈希表核心原理</div> <a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/linear-probing-key-point/\" aria-label=\"线性探查法的两个难点\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">线性探查法的两个难点<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">线性探查法的两个难点<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}