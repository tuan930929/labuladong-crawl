{
    "url": "https://labuladong.online/algo/data-structure-basic/eulerian-graph/",
    "title": "欧拉图和一笔画游戏 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->欧拉图和一笔画游戏</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2260 字</span><meta property=\"wordCount\" content=\"2260\"></span></div><hr></div> <h1><!---->欧拉图和一笔画游戏</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2260 字</span><meta property=\"wordCount\" content=\"2260\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 2260 字</span><meta property=\"wordCount\" content=\"2260\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 2260 字</span> <meta property=\"wordCount\" content=\"2260\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>「一笔画」游戏的本质是寻找欧拉路径/欧拉回路，可以通过节点的度数判断是否存在欧拉路径/欧拉回路。</p><p>Hierholzer 算法是用于计算欧拉路径/欧拉回路的经典算法，它是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构 DFS 算法</a> 的拓展。</p></div><p>欧拉图是图论中的经典概念，起源于著名的哥尼斯堡七桥问题。这个问题不仅在数学史上具有重要意义，在现代计算机科学中也有广泛应用，比如路径规划、电路设计等。</p><p>考虑到这是基础章节，所以不会详细讲解代码实现，具体的算法代码以及习题会安排在数据结构章节的图论部分讲解。</p><p>本文主要介绍欧拉图的定义、经典的七桥问题、欧拉路径和欧拉回路的概念，以及寻找欧拉路径的技巧，你可以在本站配套的一笔画小游戏中直观地感受到。</p><h2 id=\"一笔画游戏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E7%AC%94%E7%94%BB%E6%B8%B8%E6%88%8F\"><span>一笔画游戏</span></a></h2><p>我记得小时候玩过「一笔画」小游戏，规则就是要求你一笔连接所有的点和边，其中点可以重复经过，但每条边必须恰好经过一次，不能重复经过。</p><p>网站配套的游戏面板也收录了这个小游戏：</p><!----><p>小时候玩这种游戏就是全靠运气，随便选择起点开始乱走一通，能走完就走完，走不完就重新开始。</p><p>后来才知道这个益智小游戏其实是一个经典的图论算法，而且有套路可循。</p><p>现在就可以告诉你完成游戏的套路：</p><ul><li>如果所有节点的度数都是偶数，那么可以从任何节点开始，一定可以完成一笔画，且最终会回到起点。</li><li>如果只有两个节点的度数为奇数，那么必须从这两个奇数度节点中的任意一个开始，才能完成一笔画。</li><li>如果上面两种情况都不满足，那么无法完成一笔画。</li></ul><p>游戏面板中会显示每个节点的 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">度数</a>，你可以先试试看这个套路好不好用：）</p><p>下面我们来介绍这个小游戏背后的图论知识 - 欧拉图。</p><h2 id=\"七桥问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\"><span>七桥问题</span></a></h2><p>欧拉图的概念源于 18 世纪著名的哥尼斯堡七桥问题。当时的哥尼斯堡（现在的加里宁格勒）有一条河流将城市分为南北两岸，河中有东西两个小岛，有七座桥连接着北岸、南岸、东岛和西岛。</p><p>问题是：能否设计一条路线，从任意一个区域出发，经过每座桥恰好一次，最后回到起点？</p><p>我们可以将这个问题抽象成图论问题：</p><!----><p>在这幅图中：</p><ul><li>每个区域对应一个节点</li><li>每座桥对应一条边</li><li>问题转化为：是否存在一条路径，经过图中每条边恰好一次，且最终回到起点</li></ul><p>最终，欧拉通过数学证明七桥问题无解，从而解决了这个著名问题。</p><h2 id=\"术语定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%AF%E8%AF%AD%E5%AE%9A%E4%B9%89\"><span>术语定义</span></a></h2><p>基于七桥问题，我们引入几个图论术语：</p><h2 class=\"hidden-for-toc\" id=\"欧拉图的判定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%AC%A7%E6%8B%89%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A\"><span>欧拉图的判定</span></a></h2><h3 class=\"hidden-for-toc\" id=\"无向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%97%A0%E5%90%91%E5%9B%BE\"><span>无向图</span></a></h3><h3 class=\"hidden-for-toc\" id=\"有向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%89%E5%90%91%E5%9B%BE\"><span>有向图</span></a></h3><h2 class=\"hidden-for-toc\" id=\"寻找欧拉路径的算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AF%BB%E6%89%BE%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%E7%9A%84%E7%AE%97%E6%B3%95\"><span>寻找欧拉路径的算法</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>「一笔画」游戏的本质是寻找欧拉路径/欧拉回路，可以通过节点的度数判断是否存在欧拉路径/欧拉回路。</p><p>Hierholzer 算法是用于计算欧拉路径/欧拉回路的经典算法，它是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构 DFS 算法</a> 的拓展。</p></div><p>欧拉图是图论中的经典概念，起源于著名的哥尼斯堡七桥问题。这个问题不仅在数学史上具有重要意义，在现代计算机科学中也有广泛应用，比如路径规划、电路设计等。</p><p>考虑到这是基础章节，所以不会详细讲解代码实现，具体的算法代码以及习题会安排在数据结构章节的图论部分讲解。</p><p>本文主要介绍欧拉图的定义、经典的七桥问题、欧拉路径和欧拉回路的概念，以及寻找欧拉路径的技巧，你可以在本站配套的一笔画小游戏中直观地感受到。</p><h2 id=\"一笔画游戏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E7%AC%94%E7%94%BB%E6%B8%B8%E6%88%8F\"><span>一笔画游戏</span></a></h2><p>我记得小时候玩过「一笔画」小游戏，规则就是要求你一笔连接所有的点和边，其中点可以重复经过，但每条边必须恰好经过一次，不能重复经过。</p><p>网站配套的游戏面板也收录了这个小游戏：</p><!----><p>小时候玩这种游戏就是全靠运气，随便选择起点开始乱走一通，能走完就走完，走不完就重新开始。</p><p>后来才知道这个益智小游戏其实是一个经典的图论算法，而且有套路可循。</p><p>现在就可以告诉你完成游戏的套路：</p><ul><li>如果所有节点的度数都是偶数，那么可以从任何节点开始，一定可以完成一笔画，且最终会回到起点。</li><li>如果只有两个节点的度数为奇数，那么必须从这两个奇数度节点中的任意一个开始，才能完成一笔画。</li><li>如果上面两种情况都不满足，那么无法完成一笔画。</li></ul><p>游戏面板中会显示每个节点的 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">度数</a>，你可以先试试看这个套路好不好用：）</p><p>下面我们来介绍这个小游戏背后的图论知识 - 欧拉图。</p><h2 id=\"七桥问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\"><span>七桥问题</span></a></h2><p>欧拉图的概念源于 18 世纪著名的哥尼斯堡七桥问题。当时的哥尼斯堡（现在的加里宁格勒）有一条河流将城市分为南北两岸，河中有东西两个小岛，有七座桥连接着北岸、南岸、东岛和西岛。</p><p>问题是：能否设计一条路线，从任意一个区域出发，经过每座桥恰好一次，最后回到起点？</p><p>我们可以将这个问题抽象成图论问题：</p><!----><p>在这幅图中：</p><ul><li>每个区域对应一个节点</li><li>每座桥对应一条边</li><li>问题转化为：是否存在一条路径，经过图中每条边恰好一次，且最终回到起点</li></ul><p>最终，欧拉通过数学证明七桥问题无解，从而解决了这个著名问题。</p><h2 id=\"术语定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%AF%E8%AF%AD%E5%AE%9A%E4%B9%89\"><span>术语定义</span></a></h2><p>基于七桥问题，我们引入几个图论术语：</p><h2 class=\"hidden-for-toc\" id=\"欧拉图的判定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%AC%A7%E6%8B%89%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A\"><span>欧拉图的判定</span></a></h2><h3 class=\"hidden-for-toc\" id=\"无向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%97%A0%E5%90%91%E5%9B%BE\"><span>无向图</span></a></h3><h3 class=\"hidden-for-toc\" id=\"有向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%89%E5%90%91%E5%9B%BE\"><span>有向图</span></a></h3><h2 class=\"hidden-for-toc\" id=\"寻找欧拉路径的算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AF%BB%E6%89%BE%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%E7%9A%84%E7%AE%97%E6%B3%95\"><span>寻找欧拉路径的算法</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a></li><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">图结构术语</a> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构的 DFS/BFS 遍历</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>「一笔画」游戏的本质是寻找欧拉路径/欧拉回路，可以通过节点的度数判断是否存在欧拉路径/欧拉回路。</p><p>Hierholzer 算法是用于计算欧拉路径/欧拉回路的经典算法，它是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构 DFS 算法</a> 的拓展。</p></div> <p class=\"hint-container-title\">一句话总结</p> <p>「一笔画」游戏的本质是寻找欧拉路径/欧拉回路，可以通过节点的度数判断是否存在欧拉路径/欧拉回路。</p> <p>Hierholzer 算法是用于计算欧拉路径/欧拉回路的经典算法，它是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构 DFS 算法</a> 的拓展。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">图结构 DFS 算法</a> <p>欧拉图是图论中的经典概念，起源于著名的哥尼斯堡七桥问题。这个问题不仅在数学史上具有重要意义，在现代计算机科学中也有广泛应用，比如路径规划、电路设计等。</p> <p>考虑到这是基础章节，所以不会详细讲解代码实现，具体的算法代码以及习题会安排在数据结构章节的图论部分讲解。</p> <p>本文主要介绍欧拉图的定义、经典的七桥问题、欧拉路径和欧拉回路的概念，以及寻找欧拉路径的技巧，你可以在本站配套的一笔画小游戏中直观地感受到。</p> <h2 id=\"一笔画游戏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%80%E7%AC%94%E7%94%BB%E6%B8%B8%E6%88%8F\"><span>一笔画游戏</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%B8%80%E7%AC%94%E7%94%BB%E6%B8%B8%E6%88%8F\"><span>一笔画游戏</span></a> <span>一笔画游戏</span> <p>我记得小时候玩过「一笔画」小游戏，规则就是要求你一笔连接所有的点和边，其中点可以重复经过，但每条边必须恰好经过一次，不能重复经过。</p> <p>网站配套的游戏面板也收录了这个小游戏：</p> <p>小时候玩这种游戏就是全靠运气，随便选择起点开始乱走一通，能走完就走完，走不完就重新开始。</p> <p>后来才知道这个益智小游戏其实是一个经典的图论算法，而且有套路可循。</p> <p>现在就可以告诉你完成游戏的套路：</p> <ul><li>如果所有节点的度数都是偶数，那么可以从任何节点开始，一定可以完成一笔画，且最终会回到起点。</li><li>如果只有两个节点的度数为奇数，那么必须从这两个奇数度节点中的任意一个开始，才能完成一笔画。</li><li>如果上面两种情况都不满足，那么无法完成一笔画。</li></ul> <li>如果所有节点的度数都是偶数，那么可以从任何节点开始，一定可以完成一笔画，且最终会回到起点。</li> <li>如果只有两个节点的度数为奇数，那么必须从这两个奇数度节点中的任意一个开始，才能完成一笔画。</li> <li>如果上面两种情况都不满足，那么无法完成一笔画。</li> <p>游戏面板中会显示每个节点的 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">度数</a>，你可以先试试看这个套路好不好用：）</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-terminology/\">度数</a> <p>下面我们来介绍这个小游戏背后的图论知识 - 欧拉图。</p> <h2 id=\"七桥问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\"><span>七桥问题</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%B8%83%E6%A1%A5%E9%97%AE%E9%A2%98\"><span>七桥问题</span></a> <span>七桥问题</span> <p>欧拉图的概念源于 18 世纪著名的哥尼斯堡七桥问题。当时的哥尼斯堡（现在的加里宁格勒）有一条河流将城市分为南北两岸，河中有东西两个小岛，有七座桥连接着北岸、南岸、东岛和西岛。</p> <p>问题是：能否设计一条路线，从任意一个区域出发，经过每座桥恰好一次，最后回到起点？</p> <p>我们可以将这个问题抽象成图论问题：</p> <p>在这幅图中：</p> <ul><li>每个区域对应一个节点</li><li>每座桥对应一条边</li><li>问题转化为：是否存在一条路径，经过图中每条边恰好一次，且最终回到起点</li></ul> <li>每个区域对应一个节点</li> <li>每座桥对应一条边</li> <li>问题转化为：是否存在一条路径，经过图中每条边恰好一次，且最终回到起点</li> <p>最终，欧拉通过数学证明七桥问题无解，从而解决了这个著名问题。</p> <h2 id=\"术语定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%AF%E8%AF%AD%E5%AE%9A%E4%B9%89\"><span>术语定义</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%9C%AF%E8%AF%AD%E5%AE%9A%E4%B9%89\"><span>术语定义</span></a> <span>术语定义</span> <p>基于七桥问题，我们引入几个图论术语：</p> <h2 class=\"hidden-for-toc\" id=\"欧拉图的判定\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%AC%A7%E6%8B%89%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A\"><span>欧拉图的判定</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%AC%A7%E6%8B%89%E5%9B%BE%E7%9A%84%E5%88%A4%E5%AE%9A\"><span>欧拉图的判定</span></a> <span>欧拉图的判定</span> <h3 class=\"hidden-for-toc\" id=\"无向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%97%A0%E5%90%91%E5%9B%BE\"><span>无向图</span></a></h3> <a class=\"header-anchor\" href=\"#%E6%97%A0%E5%90%91%E5%9B%BE\"><span>无向图</span></a> <span>无向图</span> <h3 class=\"hidden-for-toc\" id=\"有向图\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%9C%89%E5%90%91%E5%9B%BE\"><span>有向图</span></a></h3> <a class=\"header-anchor\" href=\"#%E6%9C%89%E5%90%91%E5%9B%BE\"><span>有向图</span></a> <span>有向图</span> <h2 class=\"hidden-for-toc\" id=\"寻找欧拉路径的算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%AF%BB%E6%89%BE%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%E7%9A%84%E7%AE%97%E6%B3%95\"><span>寻找欧拉路径的算法</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%AF%BB%E6%89%BE%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84%E7%9A%84%E7%AE%97%E6%B3%95\"><span>寻找欧拉路径的算法</span></a> <span>寻找欧拉路径的算法</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/graph-traverse-basic/\" aria-label=\"图结构的 DFS/BFS 遍历\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->图结构的 DFS/BFS 遍历</div></a><a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/graph-shortest-path/\" aria-label=\"图结构最短路径算法概览\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">图结构最短路径算法概览<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/graph-traverse-basic/\" aria-label=\"图结构的 DFS/BFS 遍历\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->图结构的 DFS/BFS 遍历</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->图结构的 DFS/BFS 遍历</div> <a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/graph-shortest-path/\" aria-label=\"图结构最短路径算法概览\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">图结构最短路径算法概览<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">图结构最短路径算法概览<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}