{
    "url": "https://labuladong.online/algo-visualize/leetcode/merge-two-sorted-lists/",
    "title": "合并两个有序链表 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } var mergeTwoLists = function(l1, l2) {\n    // 虚拟头结点\n    let dummy = new ListNode(-1), p = dummy;\n    // @visualize color *dummy #4b4848\n    let p1 = l1, p2 = l2;\n\n    while (p1 != null && p2 != null) {\n        // 比较 p1 和 p2 两个指针\n        // 将值较小的的节点接到 p 指针\n        if (p1.val > p2.val) {\n            p.next = p2;\n            p2 = p2.next;\n        } else {\n            p.next = p1;\n            p1 = p1.next;\n        }\n        // p 指针不断前进\n        p = p.next;\n\n        // 把 p 和后面的节点分开，方便可视化\n        p.next = null;\n    }\n\n    if (p1 != null) {\n        p.next = p1;\n    }\n\n    if (p2 != null) {\n        p.next = p2;\n    }\n\n    return dummy.next;\n};\n\nlet l1 = LinkedList.createHead([1,3,5,6], '#9f435d')\nlet l2 = LinkedList.createHead([1,4,7,8], '#4b93ae')\nlet result = mergeTwoLists(l1, l2)\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}