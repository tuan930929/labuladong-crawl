{
    "url": "https://labuladong.online/algo/en/data-structure/eulerian-graph-hierholzer/",
    "title": "Hierholzer Algorithm to Find Eulerian Path | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Hierholzer Algorithm to Find Eulerian Path</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2544 words</span><meta property=\"wordCount\" content=\"2544\"></span></div><hr></div> <h1><!---->Hierholzer Algorithm to Find Eulerian Path</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2544 words</span><meta property=\"wordCount\" content=\"2544\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 2544 words</span><meta property=\"wordCount\" content=\"2544\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 2544 words</span> <meta property=\"wordCount\" content=\"2544\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">Summary in One Sentence</p><p>The Hierholzer algorithm is used to find Eulerian paths or Eulerian circuits. Its core idea is the <strong>reverse postorder</strong> result of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS traversal of <strong>all edges</strong> in a graph</a>.</p></div><p>In the article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a>, we learned the basic concepts of Eulerian graphs and discussed how to check if an Eulerian path or circuit exists.</p><p>The key is to look at the degree of nodes. Here is a simple summary. If you forget the reason, please review it first.</p><p>For undirected graphs:</p><ul><li><p>If every node has an even degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If there are exactly two nodes with odd degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start from any of the odd-degree nodes, visit all edges, and end at the other odd-degree node.</p></li></ul><p>For directed graphs:</p><ul><li><p>If every node's in-degree equals its out-degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If exactly two nodes have different in-degree and out-degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start at any node with in-degree not equal to out-degree, visit all edges, and end at the other such node.</p></li></ul><p>Now let's look at the code for the Hierholzer algorithm. It can find an Eulerian path or circuit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> time.</p><h2 class=\"hidden-for-toc\" id=\"hierholzer-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hierholzer-algorithm\"><span>Hierholzer Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"correctness-analysis-optional\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#correctness-analysis-optional\"><span>Correctness Analysis (Optional)</span></a></h2><h2 class=\"hidden-for-toc\" id=\"solving-the-one-stroke-puzzle\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solving-the-one-stroke-puzzle\"><span>Solving the One-Stroke Puzzle</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">Summary in One Sentence</p><p>The Hierholzer algorithm is used to find Eulerian paths or Eulerian circuits. Its core idea is the <strong>reverse postorder</strong> result of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS traversal of <strong>all edges</strong> in a graph</a>.</p></div><p>In the article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a>, we learned the basic concepts of Eulerian graphs and discussed how to check if an Eulerian path or circuit exists.</p><p>The key is to look at the degree of nodes. Here is a simple summary. If you forget the reason, please review it first.</p><p>For undirected graphs:</p><ul><li><p>If every node has an even degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If there are exactly two nodes with odd degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start from any of the odd-degree nodes, visit all edges, and end at the other odd-degree node.</p></li></ul><p>For directed graphs:</p><ul><li><p>If every node's in-degree equals its out-degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If exactly two nodes have different in-degree and out-degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start at any node with in-degree not equal to out-degree, visit all edges, and end at the other such node.</p></li></ul><p>Now let's look at the code for the Hierholzer algorithm. It can find an Eulerian path or circuit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> time.</p><h2 class=\"hidden-for-toc\" id=\"hierholzer-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hierholzer-algorithm\"><span>Hierholzer Algorithm</span></a></h2><h2 class=\"hidden-for-toc\" id=\"correctness-analysis-optional\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#correctness-analysis-optional\"><span>Correctness Analysis (Optional)</span></a></h2><h2 class=\"hidden-for-toc\" id=\"solving-the-one-stroke-puzzle\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solving-the-one-stroke-puzzle\"><span>Solving the One-Stroke Puzzle</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you should learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-basic/\">General Implementation of Graph Structure</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS/BFS Traversal of Graph</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">Summary in One Sentence</p><p>The Hierholzer algorithm is used to find Eulerian paths or Eulerian circuits. Its core idea is the <strong>reverse postorder</strong> result of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS traversal of <strong>all edges</strong> in a graph</a>.</p></div> <p class=\"hint-container-title\">Summary in One Sentence</p> <p>The Hierholzer algorithm is used to find Eulerian paths or Eulerian circuits. Its core idea is the <strong>reverse postorder</strong> result of <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS traversal of <strong>all edges</strong> in a graph</a>.</p> <strong>reverse postorder</strong> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/graph-traverse-basic/\">DFS traversal of <strong>all edges</strong> in a graph</a> <strong>all edges</strong> <p>In the article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a>, we learned the basic concepts of Eulerian graphs and discussed how to check if an Eulerian path or circuit exists.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/eulerian-graph/\">Eulerian Graph and One-Stroke Game</a> <p>The key is to look at the degree of nodes. Here is a simple summary. If you forget the reason, please review it first.</p> <p>For undirected graphs:</p> <ul><li><p>If every node has an even degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If there are exactly two nodes with odd degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start from any of the odd-degree nodes, visit all edges, and end at the other odd-degree node.</p></li></ul> <li><p>If every node has an even degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li> <p>If every node has an even degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p> <li><p>If there are exactly two nodes with odd degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start from any of the odd-degree nodes, visit all edges, and end at the other odd-degree node.</p></li> <p>If there are exactly two nodes with odd degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start from any of the odd-degree nodes, visit all edges, and end at the other odd-degree node.</p> <p>For directed graphs:</p> <ul><li><p>If every node's in-degree equals its out-degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li><li><p>If exactly two nodes have different in-degree and out-degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start at any node with in-degree not equal to out-degree, visit all edges, and end at the other such node.</p></li></ul> <li><p>If every node's in-degree equals its out-degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p></li> <p>If every node's in-degree equals its out-degree, the start and end nodes are the same. There is an Eulerian circuit. You can start at any node, visit all edges, and return to the starting point in the end.</p> <li><p>If exactly two nodes have different in-degree and out-degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start at any node with in-degree not equal to out-degree, visit all edges, and end at the other such node.</p></li> <p>If exactly two nodes have different in-degree and out-degree, the start and end nodes are these two nodes. There is an Eulerian path. You can start at any node with in-degree not equal to out-degree, visit all edges, and end at the other such node.</p> <p>Now let's look at the code for the Hierholzer algorithm. It can find an Eulerian path or circuit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> time.</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(E)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>E</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(E)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span> <span class=\"mclose\">)</span> <h2 class=\"hidden-for-toc\" id=\"hierholzer-algorithm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#hierholzer-algorithm\"><span>Hierholzer Algorithm</span></a></h2> <a class=\"header-anchor\" href=\"#hierholzer-algorithm\"><span>Hierholzer Algorithm</span></a> <span>Hierholzer Algorithm</span> <h2 class=\"hidden-for-toc\" id=\"correctness-analysis-optional\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#correctness-analysis-optional\"><span>Correctness Analysis (Optional)</span></a></h2> <a class=\"header-anchor\" href=\"#correctness-analysis-optional\"><span>Correctness Analysis (Optional)</span></a> <span>Correctness Analysis (Optional)</span> <h2 class=\"hidden-for-toc\" id=\"solving-the-one-stroke-puzzle\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#solving-the-one-stroke-puzzle\"><span>Solving the One-Stroke Puzzle</span></a></h2> <a class=\"header-anchor\" href=\"#solving-the-one-stroke-puzzle\"><span>Solving the One-Stroke Puzzle</span></a> <span>Solving the One-Stroke Puzzle</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure/bipartite-graph/\" aria-label=\"How to Determine a Bipartite Graph\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->How to Determine a Bipartite Graph</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/problem-set/eulerian-path/\" aria-label=\"Exercise: Eulerian Path\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Exercise: Eulerian Path<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure/bipartite-graph/\" aria-label=\"How to Determine a Bipartite Graph\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->How to Determine a Bipartite Graph</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->How to Determine a Bipartite Graph</div> <a class=\"route-link auto-link next\" href=\"/algo/en/problem-set/eulerian-path/\" aria-label=\"Exercise: Eulerian Path\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Exercise: Eulerian Path<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Exercise: Eulerian Path<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}