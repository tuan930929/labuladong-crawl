{
    "url": "https://labuladong.online/algo-visualize/tutorial/bubble-sort/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } // 未优化的冒泡排序算法代码\nfunction sort(nums) {\n    let n = nums.length;\n    let sortedIndex = 0;\n    // @visualize bind nums[sortedIndex]\n    while (sortedIndex < n) {\n        // 寻找 nums[sortedIndex..] 中的最小值\n        // 同时将这个最小值逐步移动到 nums[sortedIndex] 的位置\n        for (let i = n - 1; i > sortedIndex; i--) {\n            // @visualize color nums[i] #8ec7dd\n            if (nums[i] < nums[i - 1]) {\n                // swap(nums[i], nums[i - 1])\n                [nums[i], nums[i - 1]] = [nums\n                [i - 1], nums[i]];\n            }\n        }\n        // @visualize color *nums[sortedIndex] #7cd930\n        sortedIndex++;\n    }\n}\n\nlet nums = [3, 1, 4, 1, 5, 9, 2, 6];\n// @visualize shape nums rect\nsort(nums);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}