{
    "url": "https://labuladong.online/algo-visualize/leetcode/spiral-matrix-ii/",
    "title": "螺旋矩阵 II | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var generateMatrix = function(n) {\n    // 初始化一个大小为 n * n 的矩阵，全部填充为 0\n    let matrix = new Array(n).fill().map(() => new Array(n).fill(0));\n    let upper_bound = 0, lower_bound = n - 1;\n    let left_bound = 0, right_bound = n - 1;\n    // 需要填入矩阵的数字\n    let num = 1;\n    \n    while (num <= n * n) {\n        if (upper_bound <= lower_bound) {\n            // 在顶部从左向右遍历\n            for (let j = left_bound; j <= right_bound; j++) {\n                // @visualize color *matrix[upper_bound][j] #7cd930\n                matrix[upper_bound][j] = num++;\n            }\n            // 上边界下移\n            upper_bound++;\n        }\n        \n        if (left_bound <= right_bound) {\n            // 在右侧从上向下遍历\n            for (let i = upper_bound; i <= lower_bound; i++) {\n                // @visualize color *matrix[i][right_bound] #ccc53a\n                matrix[i][right_bound] = num++;\n            }\n            // 右边界左移\n            right_bound--;\n        }\n        \n        if (upper_bound <= lower_bound) {\n            // 在底部从右向左遍历\n            for (let j = right_bound; j >= left_bound; j--) {\n                // @visualize color *matrix[lower_bound][j] #30d9d1\n                matrix[lower_bound][j] = num++;\n            }\n            // 下边界上移\n            lower_bound--;\n        }\n        \n        if (left_bound <= right_bound) {\n            // 在左侧从下向上遍历\n            for (let i = lower_bound; i >= upper_bound; i--) {\n                // @visualize color *matrix[i][left_bound] #d130d9\n                matrix[i][left_bound] = num++;\n            }\n            // 左边界右移\n            left_bound++;\n        }\n    }\n    \n    return matrix;\n};\n\nlet result = generateMatrix(5);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}