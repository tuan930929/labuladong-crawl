{
    "url": "https://labuladong.online/algo/data-structure-basic/trie-map-basic/",
    "title": "Trie/字典树/前缀树原理及可视化 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Trie/字典树/前缀树原理及可视化</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3023 字</span><meta property=\"wordCount\" content=\"3023\"></span></div><hr></div> <h1><!---->Trie/字典树/前缀树原理及可视化</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3023 字</span><meta property=\"wordCount\" content=\"3023\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3023 字</span><meta property=\"wordCount\" content=\"3023\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 3023 字</span> <meta property=\"wordCount\" content=\"3023\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>Trie 树就是 <a class=\"route-link\" href=\"/algo/data-structure-basic/n-ary-tree-traverse-basic/\">多叉树结构</a> 的延伸，是一种针对字符串进行特殊优化的数据结构。</p><p>Trie 树在处理字符串相关操作时有诸多优势，比如节省公共字符串前缀的内存空间、方便处理前缀操作、支持通配符匹配等。</p><p>下面这个可视化面板展示了 Trie 树的结构和主要 API，你可以逐行点击代码，观察 console 输出和右侧的 Trie 树结构变化：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_trie\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>本文仅是 Trie 树（也叫做字典树、前缀树）的原理介绍，<a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">动手实现 TrieMap/TrieSet</a> 我放到了<a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树系列习题章节</a> 后面的数据结构设计章节。理由和上篇 <a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\">TreeMap/TreeSet 原理</a> 相同，在基础知识章节我不准备讲解这种复杂结构的具体实现，初学者也没必要在这个阶段理解 Trie 树的代码实现。</p><p>但是我依然把 Trie 树的原理讲解放在这里，有两个目的：</p><p>1、让你直观地感受到二叉树结构的种种幻化，你也许能理解我的教程特别强调二叉树结构的原因了。</p><p>2、在开头让你知道有这么一种数据结构，了解它的 API 以及适用的场景。未来你遇到相关的问题，也许就能想到用 Trie 树来解决，最起码有个思路，大不了回来复制代码模板嘛。这种数据结构的实现都是固定的，笔试面试也不会让你从头手搓 Trie 树，复制粘贴直接拿去用就可以了。</p><p>好了，废话不多说，让我们开始吧。</p><p>本站将会带你实现一个 <code>TrieMap</code> 和 <code>TrieSet</code>，先来梳理一下我们已经实现过的 Map/Set 类型：</p><ul><li><p>标准的 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a>，底层借助一个哈希函数把键值对存在 <code>table</code> 数组中，有两种解决哈希冲突的方法。它的特点是快，即基本的增删查改操作时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> 是 <code>HashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且可以让哈希表中的所有键保持「插入顺序」。<code>LinkedHashSet</code> 是 <code>LinkedHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且提供了一个额外的 <code>randomKey</code> 函数，可以在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间返回一个随机键。<code>ArrayHashSet</code> 是 <code>ArrayHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a>，底层是一棵二叉搜索树（编程语言标准库一般使用经过改良的自平衡 <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a>），基本增删查改操作复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，它的特点是可以动态维护键值对的大小关系，有很多额外的 API 操作键值对。<code>TreeSet</code> 集合是 <code>TreeMap</code> 映射的简单封装。</p></li></ul><p><code>TrieSet</code> 也是 <code>TrieMap</code> 的简单封装，所以下面我们聚焦 <code>TrieMap</code> 的实现原理即可。</p><h2 id=\"trie-树的主要应用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span>Trie 树的主要应用场景</span></a></h2><p><strong>Trie 树是一种针对字符串有特殊优化的数据结构</strong>，这也许它又被叫做字典树的原因。Trie 树针对字符串的处理有若干优势，下面一一列举。</p><h3 id=\"节约存储空间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4\"><span>节约存储空间</span></a></h3><p>用 <code>HashMap</code> 对比吧，比如说这样存储几个键值对：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>回想哈希表的实现原理，键值对会被存到 <code>table</code> 数组中，也就是说它真的创建 <code>\"apple\"</code>、<code>\"app\"</code>、<code>\"appl\"</code> 这三个字符串，占用了 12 个字符的内存空间。</p><p>但是注意，这三个字符串拥有共同的前缀，<code>\"app\"</code> 这个前缀被重复存储了三次，<code>\"l\"</code> 也被重复存储了两次。</p><p>如果换成 TrieMap 来存储：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Trie 树底层并不会重复存储公共前缀，所以只需要 <code>\"apple\"</code> 这 5 个字符的内存空间来存储键。</p><p>这个例子数据量很小，你感觉重复存储几次没啥大不了，但如果键非常多、非常长，且存在大量公共前缀（现实中确实经常有这种情况，比如证件号），那么 Trie 树就能节约大量的内存空间。</p><h3 id=\"方便处理前缀操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%B9%E4%BE%BF%E5%A4%84%E7%90%86%E5%89%8D%E7%BC%80%E6%93%8D%E4%BD%9C\"><span>方便处理前缀操作</span></a></h3><p>举个例子就明白了：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除了 <code>keysWithPrefix</code> 方法的复杂度取决于返回结果的长度，其他前缀操作的复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> 是前缀字符串长度。</p><p>你想想上面这几个操作，用 HashMap 或者 TreeMap 能做到吗？应该只能强行遍历所有键，然后一个个比较字符串前缀，复杂度非常高。</p><p>话说，这个 <code>keysWithPrefix</code> 方法，是不是很适合做自动补全功能呢？</p><h3 class=\"hidden-for-toc\" id=\"可以使用通配符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\"><span>可以使用通配符</span></a></h3><h3 class=\"hidden-for-toc\" id=\"可以按照字典序遍历键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E9%81%8D%E5%8E%86%E9%94%AE\"><span>可以按照字典序遍历键</span></a></h3><h2 class=\"hidden-for-toc\" id=\"trie-树的基本结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span>Trie 树的基本结构</span></a></h2><h2 class=\"hidden-for-toc\" id=\"triemap-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#triemap-api\"><span>TrieMap API</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a></li></ul></div><div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>Trie 树就是 <a class=\"route-link\" href=\"/algo/data-structure-basic/n-ary-tree-traverse-basic/\">多叉树结构</a> 的延伸，是一种针对字符串进行特殊优化的数据结构。</p><p>Trie 树在处理字符串相关操作时有诸多优势，比如节省公共字符串前缀的内存空间、方便处理前缀操作、支持通配符匹配等。</p><p>下面这个可视化面板展示了 Trie 树的结构和主要 API，你可以逐行点击代码，观察 console 输出和右侧的 Trie 树结构变化：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_trie\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div><p>本文仅是 Trie 树（也叫做字典树、前缀树）的原理介绍，<a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">动手实现 TrieMap/TrieSet</a> 我放到了<a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树系列习题章节</a> 后面的数据结构设计章节。理由和上篇 <a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\">TreeMap/TreeSet 原理</a> 相同，在基础知识章节我不准备讲解这种复杂结构的具体实现，初学者也没必要在这个阶段理解 Trie 树的代码实现。</p><p>但是我依然把 Trie 树的原理讲解放在这里，有两个目的：</p><p>1、让你直观地感受到二叉树结构的种种幻化，你也许能理解我的教程特别强调二叉树结构的原因了。</p><p>2、在开头让你知道有这么一种数据结构，了解它的 API 以及适用的场景。未来你遇到相关的问题，也许就能想到用 Trie 树来解决，最起码有个思路，大不了回来复制代码模板嘛。这种数据结构的实现都是固定的，笔试面试也不会让你从头手搓 Trie 树，复制粘贴直接拿去用就可以了。</p><p>好了，废话不多说，让我们开始吧。</p><p>本站将会带你实现一个 <code>TrieMap</code> 和 <code>TrieSet</code>，先来梳理一下我们已经实现过的 Map/Set 类型：</p><ul><li><p>标准的 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a>，底层借助一个哈希函数把键值对存在 <code>table</code> 数组中，有两种解决哈希冲突的方法。它的特点是快，即基本的增删查改操作时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> 是 <code>HashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且可以让哈希表中的所有键保持「插入顺序」。<code>LinkedHashSet</code> 是 <code>LinkedHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且提供了一个额外的 <code>randomKey</code> 函数，可以在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间返回一个随机键。<code>ArrayHashSet</code> 是 <code>ArrayHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a>，底层是一棵二叉搜索树（编程语言标准库一般使用经过改良的自平衡 <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a>），基本增删查改操作复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，它的特点是可以动态维护键值对的大小关系，有很多额外的 API 操作键值对。<code>TreeSet</code> 集合是 <code>TreeMap</code> 映射的简单封装。</p></li></ul><p><code>TrieSet</code> 也是 <code>TrieMap</code> 的简单封装，所以下面我们聚焦 <code>TrieMap</code> 的实现原理即可。</p><h2 id=\"trie-树的主要应用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span>Trie 树的主要应用场景</span></a></h2><p><strong>Trie 树是一种针对字符串有特殊优化的数据结构</strong>，这也许它又被叫做字典树的原因。Trie 树针对字符串的处理有若干优势，下面一一列举。</p><h3 id=\"节约存储空间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4\"><span>节约存储空间</span></a></h3><p>用 <code>HashMap</code> 对比吧，比如说这样存储几个键值对：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>回想哈希表的实现原理，键值对会被存到 <code>table</code> 数组中，也就是说它真的创建 <code>\"apple\"</code>、<code>\"app\"</code>、<code>\"appl\"</code> 这三个字符串，占用了 12 个字符的内存空间。</p><p>但是注意，这三个字符串拥有共同的前缀，<code>\"app\"</code> 这个前缀被重复存储了三次，<code>\"l\"</code> 也被重复存储了两次。</p><p>如果换成 TrieMap 来存储：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Trie 树底层并不会重复存储公共前缀，所以只需要 <code>\"apple\"</code> 这 5 个字符的内存空间来存储键。</p><p>这个例子数据量很小，你感觉重复存储几次没啥大不了，但如果键非常多、非常长，且存在大量公共前缀（现实中确实经常有这种情况，比如证件号），那么 Trie 树就能节约大量的内存空间。</p><h3 id=\"方便处理前缀操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%B9%E4%BE%BF%E5%A4%84%E7%90%86%E5%89%8D%E7%BC%80%E6%93%8D%E4%BD%9C\"><span>方便处理前缀操作</span></a></h3><p>举个例子就明白了：</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除了 <code>keysWithPrefix</code> 方法的复杂度取决于返回结果的长度，其他前缀操作的复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> 是前缀字符串长度。</p><p>你想想上面这几个操作，用 HashMap 或者 TreeMap 能做到吗？应该只能强行遍历所有键，然后一个个比较字符串前缀，复杂度非常高。</p><p>话说，这个 <code>keysWithPrefix</code> 方法，是不是很适合做自动补全功能呢？</p><h3 class=\"hidden-for-toc\" id=\"可以使用通配符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\"><span>可以使用通配符</span></a></h3><h3 class=\"hidden-for-toc\" id=\"可以按照字典序遍历键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E9%81%8D%E5%8E%86%E9%94%AE\"><span>可以按照字典序遍历键</span></a></h3><h2 class=\"hidden-for-toc\" id=\"trie-树的基本结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span>Trie 树的基本结构</span></a></h2><h2 class=\"hidden-for-toc\" id=\"triemap-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#triemap-api\"><span>TrieMap API</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/binary-tree-basic/\">二叉树基础及常见类型</a> <div class=\"hint-container important\"><p class=\"hint-container-title\">一句话总结</p><p>Trie 树就是 <a class=\"route-link\" href=\"/algo/data-structure-basic/n-ary-tree-traverse-basic/\">多叉树结构</a> 的延伸，是一种针对字符串进行特殊优化的数据结构。</p><p>Trie 树在处理字符串相关操作时有诸多优势，比如节省公共字符串前缀的内存空间、方便处理前缀操作、支持通配符匹配等。</p><p>下面这个可视化面板展示了 Trie 树的结构和主要 API，你可以逐行点击代码，观察 console 输出和右侧的 Trie 树结构变化：</p><div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_trie\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div></div> <p class=\"hint-container-title\">一句话总结</p> <p>Trie 树就是 <a class=\"route-link\" href=\"/algo/data-structure-basic/n-ary-tree-traverse-basic/\">多叉树结构</a> 的延伸，是一种针对字符串进行特殊优化的数据结构。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/n-ary-tree-traverse-basic/\">多叉树结构</a> <p>Trie 树在处理字符串相关操作时有诸多优势，比如节省公共字符串前缀的内存空间、方便处理前缀操作、支持通配符匹配等。</p> <p>下面这个可视化面板展示了 Trie 树的结构和主要 API，你可以逐行点击代码，观察 console 输出和右侧的 Trie 树结构变化：</p> <div data-v-ee1a9bd0><a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a><details id=\"div_trie\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details></div> <a style=\"display:none;\" href=\"\" data-v-ee1a9bd0> Algorithm visualize </a> <details id=\"div_trie\" class=\"hint-container details\" data-v-ee1a9bd0><summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary><div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div></details> <summary style=\"font-size:large;\" data-v-ee1a9bd0><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg>   <strong data-v-ee1a9bd0>算法可视化面板</strong><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg><span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span></summary> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path><path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"m4.415 18.167l7.17-7.17l1.414 1.414l-7.17 7.17z\" opacity=\"0.3\" data-v-ee1a9bd0></path> <path fill=\"currentColor\" d=\"m20 7l.94-2.06L23 4l-2.06-.94L20 1l-.94 2.06L17 4l2.06.94zM8.5 7l.94-2.06L11.5 4l-2.06-.94L8.5 1l-.94 2.06L5.5 4l2.06.94zM20 12.5l-.94 2.06l-2.06.94l2.06.94l.94 2.06l.94-2.06L23 15.5l-2.06-.94zm-2.29-3.38l-2.83-2.83c-.2-.19-.45-.29-.71-.29s-.51.1-.71.29L2.29 17.46a.996.996 0 0 0 0 1.41l2.83 2.83c.2.2.45.3.71.3s.51-.1.71-.29l11.17-11.17c.39-.39.39-1.03 0-1.42M5.83 19.59l-1.41-1.41L11.59 11L13 12.41zM14.41 11L13 9.59l1.17-1.17l1.41 1.41z\" data-v-ee1a9bd0></path> <strong data-v-ee1a9bd0>算法可视化面板</strong> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.9em\" height=\"0.9em\" viewbox=\"0 0 24 24\" style=\"margin-left:auto;margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M20 20v1h1v-1zm-4.293-5.707a1 1 0 0 0-1.414 1.414zM19 14v6h2v-6zm1 5h-6v2h6zm.707.293l-5-5l-1.414 1.414l5 5zM4 20H3v1h1zm5.707-4.293a1 1 0 0 0-1.414-1.414zM3 14v6h2v-6zm1 7h6v-2H4zm.707-.293l5-5l-1.414-1.414l-5 5zM20 4h1V3h-1zm-5.707 4.293a1 1 0 0 0 1.414 1.414zM21 10V4h-2v6zm-1-7h-6v2h6zm-.707.293l-5 5l1.414 1.414l5-5zM4 4V3H3v1zm4.293 5.707a1 1 0 0 0 1.414-1.414zM5 10V4H3v6zM4 5h6V3H4zm-.707-.293l5 5l1.414-1.414l-5-5z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" style=\"margin-right:10px;\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17.65 6.35a7.95 7.95 0 0 0-6.48-2.31c-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20a7.98 7.98 0 0 0 7.21-4.56c.32-.67-.16-1.44-.9-1.44c-.37 0-.72.2-.88.53a5.994 5.994 0 0 1-6.8 3.31c-2.22-.49-4.01-2.3-4.48-4.52A6.002 6.002 0 0 1 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71z\" data-v-ee1a9bd0></path> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewbox=\"0 0 24 24\" data-v-ee1a9bd0><path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path></svg> <path fill=\"currentColor\" d=\"M17 7h-4v2h4c1.65 0 3 1.35 3 3s-1.35 3-3 3h-4v2h4c2.76 0 5-2.24 5-5s-2.24-5-5-5m-6 8H7c-1.65 0-3-1.35-3-3s1.35-3 3-3h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4zm-3-4h8v2H8z\" data-v-ee1a9bd0></path> <span style=\"display:none;\" class=\"copy-feedback\" data-v-ee1a9bd0>Link copied!</span> <div class=\"resizable\" style=\"height:70vh;\" data-v-ee1a9bd0><iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe></div> <iframe title=\"algo-visualize panel\" allow=\"clipboard-write; fullscreen;\" id=\"iframe_trie\" src=\"\" width=\"100%\" height=\"100%\" loading=\"lazy\" scrolling=\"auto\" frameborder=\"0\" style=\"overflow:auto;\" data-v-ee1a9bd0></iframe> <p>本文仅是 Trie 树（也叫做字典树、前缀树）的原理介绍，<a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">动手实现 TrieMap/TrieSet</a> 我放到了<a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树系列习题章节</a> 后面的数据结构设计章节。理由和上篇 <a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\">TreeMap/TreeSet 原理</a> 相同，在基础知识章节我不准备讲解这种复杂结构的具体实现，初学者也没必要在这个阶段理解 Trie 树的代码实现。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">动手实现 TrieMap/TrieSet</a> <a class=\"route-link\" href=\"/algo/intro/binary-tree-practice/\">二叉树系列习题章节</a> <a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\">TreeMap/TreeSet 原理</a> <p>但是我依然把 Trie 树的原理讲解放在这里，有两个目的：</p> <p>1、让你直观地感受到二叉树结构的种种幻化，你也许能理解我的教程特别强调二叉树结构的原因了。</p> <p>2、在开头让你知道有这么一种数据结构，了解它的 API 以及适用的场景。未来你遇到相关的问题，也许就能想到用 Trie 树来解决，最起码有个思路，大不了回来复制代码模板嘛。这种数据结构的实现都是固定的，笔试面试也不会让你从头手搓 Trie 树，复制粘贴直接拿去用就可以了。</p> <p>好了，废话不多说，让我们开始吧。</p> <p>本站将会带你实现一个 <code>TrieMap</code> 和 <code>TrieSet</code>，先来梳理一下我们已经实现过的 Map/Set 类型：</p> <code>TrieMap</code> <code>TrieSet</code> <ul><li><p>标准的 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a>，底层借助一个哈希函数把键值对存在 <code>table</code> 数组中，有两种解决哈希冲突的方法。它的特点是快，即基本的增删查改操作时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> 是 <code>HashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且可以让哈希表中的所有键保持「插入顺序」。<code>LinkedHashSet</code> 是 <code>LinkedHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且提供了一个额外的 <code>randomKey</code> 函数，可以在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间返回一个随机键。<code>ArrayHashSet</code> 是 <code>ArrayHashMap</code> 的简单封装。</p></li><li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a>，底层是一棵二叉搜索树（编程语言标准库一般使用经过改良的自平衡 <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a>），基本增删查改操作复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，它的特点是可以动态维护键值对的大小关系，有很多额外的 API 操作键值对。<code>TreeSet</code> 集合是 <code>TreeMap</code> 映射的简单封装。</p></li></ul> <li><p>标准的 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a>，底层借助一个哈希函数把键值对存在 <code>table</code> 数组中，有两种解决哈希冲突的方法。它的特点是快，即基本的增删查改操作时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> 是 <code>HashMap</code> 的简单封装。</p></li> <p>标准的 <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a>，底层借助一个哈希函数把键值对存在 <code>table</code> 数组中，有两种解决哈希冲突的方法。它的特点是快，即基本的增删查改操作时间复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。<a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> 是 <code>HashMap</code> 的简单封装。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashmap-basic/\">哈希表 <code>HashMap</code></a> <code>HashMap</code> <code>table</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <a class=\"route-link\" href=\"/algo/data-structure-basic/hash-set/\">哈希集合 <code>HashSet</code></a> <code>HashSet</code> <code>HashMap</code> <li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且可以让哈希表中的所有键保持「插入顺序」。<code>LinkedHashSet</code> 是 <code>LinkedHashMap</code> 的简单封装。</p></li> <p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且可以让哈希表中的所有键保持「插入顺序」。<code>LinkedHashSet</code> 是 <code>LinkedHashMap</code> 的简单封装。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-linked-list/\">哈希链表 <code>LinkedHashMap</code></a> <code>LinkedHashMap</code> <a class=\"route-link\" href=\"/algo/data-structure-basic/linkedlist-basic/\">双链表结构</a> <code>LinkedHashSet</code> <code>LinkedHashMap</code> <li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且提供了一个额外的 <code>randomKey</code> 函数，可以在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间返回一个随机键。<code>ArrayHashSet</code> 是 <code>ArrayHashMap</code> 的简单封装。</p></li> <p><a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a>，是 <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> 对标准哈希表的加强。它继承了哈希表的操作复杂度，并且提供了一个额外的 <code>randomKey</code> 函数，可以在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间返回一个随机键。<code>ArrayHashSet</code> 是 <code>ArrayHashMap</code> 的简单封装。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/hashtable-with-array/\">哈希数组 <code>ArrayHashMap</code></a> <code>ArrayHashMap</code> <a class=\"route-link\" href=\"/algo/data-structure-basic/array-basic/\">数组结构</a> <code>randomKey</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <code>ArrayHashSet</code> <code>ArrayHashMap</code> <li><p><a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a>，底层是一棵二叉搜索树（编程语言标准库一般使用经过改良的自平衡 <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a>），基本增删查改操作复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，它的特点是可以动态维护键值对的大小关系，有很多额外的 API 操作键值对。<code>TreeSet</code> 集合是 <code>TreeMap</code> 映射的简单封装。</p></li> <p><a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a>，底层是一棵二叉搜索树（编程语言标准库一般使用经过改良的自平衡 <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a>），基本增删查改操作复杂度是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>，它的特点是可以动态维护键值对的大小关系，有很多额外的 API 操作键值对。<code>TreeSet</code> 集合是 <code>TreeMap</code> 映射的简单封装。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/tree-map-basic/\"><code>TreeMap</code> 映射</a> <code>TreeMap</code> <a class=\"route-link\" href=\"/algo/data-structure-basic/rbtree-basic/\">红黑树</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logN)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>l</mi> <mi>o</mi> <mi>g</mi> <mi>N</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(logN)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span> <span class=\"mord mathnormal\">o</span> <span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span> <span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span> <span class=\"mclose\">)</span> <code>TreeSet</code> <code>TreeMap</code> <p><code>TrieSet</code> 也是 <code>TrieMap</code> 的简单封装，所以下面我们聚焦 <code>TrieMap</code> 的实现原理即可。</p> <code>TrieSet</code> <code>TrieMap</code> <code>TrieMap</code> <h2 id=\"trie-树的主要应用场景\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span>Trie 树的主要应用场景</span></a></h2> <a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E4%B8%BB%E8%A6%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span>Trie 树的主要应用场景</span></a> <span>Trie 树的主要应用场景</span> <p><strong>Trie 树是一种针对字符串有特殊优化的数据结构</strong>，这也许它又被叫做字典树的原因。Trie 树针对字符串的处理有若干优势，下面一一列举。</p> <strong>Trie 树是一种针对字符串有特殊优化的数据结构</strong> <h3 id=\"节约存储空间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4\"><span>节约存储空间</span></a></h3> <a class=\"header-anchor\" href=\"#%E8%8A%82%E7%BA%A6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4\"><span>节约存储空间</span></a> <span>节约存储空间</span> <p>用 <code>HashMap</code> 对比吧，比如说这样存储几个键值对：</p> <code>HashMap</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">String</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> HashMap</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>回想哈希表的实现原理，键值对会被存到 <code>table</code> 数组中，也就是说它真的创建 <code>\"apple\"</code>、<code>\"app\"</code>、<code>\"appl\"</code> 这三个字符串，占用了 12 个字符的内存空间。</p> <code>table</code> <code>\"apple\"</code> <code>\"app\"</code> <code>\"appl\"</code> <p>但是注意，这三个字符串拥有共同的前缀，<code>\"app\"</code> 这个前缀被重复存储了三次，<code>\"l\"</code> 也被重复存储了两次。</p> <code>\"app\"</code> <code>\"l\"</code> <p>如果换成 TrieMap 来存储：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"app\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"appl\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>Trie 树底层并不会重复存储公共前缀，所以只需要 <code>\"apple\"</code> 这 5 个字符的内存空间来存储键。</p> <code>\"apple\"</code> <p>这个例子数据量很小，你感觉重复存储几次没啥大不了，但如果键非常多、非常长，且存在大量公共前缀（现实中确实经常有这种情况，比如证件号），那么 Trie 树就能节约大量的内存空间。</p> <h3 id=\"方便处理前缀操作\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%96%B9%E4%BE%BF%E5%A4%84%E7%90%86%E5%89%8D%E7%BC%80%E6%93%8D%E4%BD%9C\"><span>方便处理前缀操作</span></a></h3> <a class=\"header-anchor\" href=\"#%E6%96%B9%E4%BE%BF%E5%A4%84%E7%90%86%E5%89%8D%E7%BC%80%E6%93%8D%E4%BD%9C\"><span>方便处理前缀操作</span></a> <span>方便处理前缀操作</span> <p>举个例子就明白了：</p> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Trie 树的键类型固定为 String 类型，值类型可以是泛型</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">TrieMap</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">Integer</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&gt; </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#AF00DB;--shiki-dark:#C586C0;\">new</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> TrieMap</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">&lt;&gt;();</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"that\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">1</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"the\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">2</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"them\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">3</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">put</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"apple\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#098658;--shiki-dark:#B5CEA8;\">4</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">);</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\" 是 \"themxyz\" 的最短前缀</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">shortestPrefixOf</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"the\"</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\" 是 \"themxyz\" 的最长前缀</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">longestPrefixOf</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"themxyz\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"them\"</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"tha\" 是 \"that\" 的前缀</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"tha\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// true</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// 没有以 \"thz\" 为前缀的键</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">hasKeyWithPrefix</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"thz\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// false</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// \"that\", \"the\", \"them\" 都是 \"th\" 的前缀</span> <span class=\"line\"><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span><span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span><span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span></span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">System</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">out</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">println</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">map</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">.</span> <span style=\"--shiki-light:#795E26;--shiki-dark:#DCDCAA;\">keysWithPrefix</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">(</span> <span style=\"--shiki-light:#A31515;--shiki-dark:#CE9178;\">\"th\"</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">)); </span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// [\"that\", \"the\", \"them\"]</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>除了 <code>keysWithPrefix</code> 方法的复杂度取决于返回结果的长度，其他前缀操作的复杂度都是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> 是前缀字符串长度。</p> <code>keysWithPrefix</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(L)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>L</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>L</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(L)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord mathnormal\">L</span> <span class=\"mclose\">)</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math> <semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics> <mrow><mi>L</mi></mrow> <mi>L</mi> <annotation encoding=\"application/x-tex\">L</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span> <span class=\"strut\" style=\"height:0.6833em;\"></span> <span class=\"mord mathnormal\">L</span> <p>你想想上面这几个操作，用 HashMap 或者 TreeMap 能做到吗？应该只能强行遍历所有键，然后一个个比较字符串前缀，复杂度非常高。</p> <p>话说，这个 <code>keysWithPrefix</code> 方法，是不是很适合做自动补全功能呢？</p> <code>keysWithPrefix</code> <h3 class=\"hidden-for-toc\" id=\"可以使用通配符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\"><span>可以使用通配符</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6\"><span>可以使用通配符</span></a> <span>可以使用通配符</span> <h3 class=\"hidden-for-toc\" id=\"可以按照字典序遍历键\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E9%81%8D%E5%8E%86%E9%94%AE\"><span>可以按照字典序遍历键</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7%E5%AD%97%E5%85%B8%E5%BA%8F%E9%81%8D%E5%8E%86%E9%94%AE\"><span>可以按照字典序遍历键</span></a> <span>可以按照字典序遍历键</span> <h2 class=\"hidden-for-toc\" id=\"trie-树的基本结构\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span>Trie 树的基本结构</span></a></h2> <a class=\"header-anchor\" href=\"#trie-%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span>Trie 树的基本结构</span></a> <span>Trie 树的基本结构</span> <h2 class=\"hidden-for-toc\" id=\"triemap-api\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#triemap-api\"><span>TrieMap API</span></a></h2> <a class=\"header-anchor\" href=\"#triemap-api\"><span>TrieMap API</span></a> <span>TrieMap API</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/rbtree-basic/\" aria-label=\"红黑树的完美平衡及可视化\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->红黑树的完美平衡及可视化</div></a><a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/binary-heap-basic/\" aria-label=\"二叉堆核心原理及可视化\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">二叉堆核心原理及可视化<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/data-structure-basic/rbtree-basic/\" aria-label=\"红黑树的完美平衡及可视化\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->红黑树的完美平衡及可视化</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->红黑树的完美平衡及可视化</div> <a class=\"route-link auto-link next\" href=\"/algo/data-structure-basic/binary-heap-basic/\" aria-label=\"二叉堆核心原理及可视化\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">二叉堆核心原理及可视化<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">二叉堆核心原理及可视化<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}