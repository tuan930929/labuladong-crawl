{
    "url": "https://labuladong.online/algo/en/intro/data-structure-basic/",
    "title": "Chapter Introduction | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Chapter Introduction</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 336 words</span><meta property=\"wordCount\" content=\"336\"></span></div><hr></div> <h1><!---->Chapter Introduction</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 336 words</span><meta property=\"wordCount\" content=\"336\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 336 words</span><meta property=\"wordCount\" content=\"336\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 336 words</span> <meta property=\"wordCount\" content=\"336\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><h2 id=\"who-is-this-chapter-for\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#who-is-this-chapter-for\"><span>Who Is This Chapter For</span></a></h2><p>This chapter is recommended for readers who wish to systematically master data structures and algorithms.</p><p>For readers looking to quickly enhance their problem-solving skills for written tests, there is no need to study this chapter in full. Please refer to the <a class=\"route-link\" href=\"/algo/en/intro/quick-learning-plan/\">Quick Mastery Directory</a>.</p><h2 id=\"chapter-overview\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#chapter-overview\"><span>Chapter Overview</span></a></h2><p>This chapter focuses on data structures and sorting algorithms, covering all basic data structures, as well as some advanced data structures commonly used in algorithm problems. It concludes with an explanation of ten sorting algorithms.</p><p>Basic data structures include arrays, linked lists, queues, stacks, hash tables, and binary heaps. This chapter will explain their principles, code implementations, and common variants.</p><p>Advanced data structures include graphs, segment trees, Fenwick trees, tries, and union-find structures. As this is a foundational chapter, the focus will be on their principles and application scenarios, with specific code implementations arranged in later chapters on data structure design.</p><p><strong>Understanding the underlying principles and applicable scenarios of these data structures will enable you to fully utilize each data structure's features to solve algorithm problems and accurately comprehend the time complexity of code.</strong></p><p>In this chapter, the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">Algorithm Visualization Panel</a> will often be used to visualize operations on slightly complex data structures. The visualization code is written in JavaScript, but it is quite simple, so you should be able to understand it easily regardless of your familiarity with JavaScript.</p><div class=\"hint-container note\"><p class=\"hint-container-title\">Tip</p><p>The focus of this chapter is to help readers understand the implementation principles, advantages, disadvantages, and limitations of each data structure. The provided code implementations in Java/C++/Golang/Python/JavaScript ensure correctness and readability.</p><p>Extreme optimization and best practices at the programming language level are not within the scope of this site's teaching. If you seek a deeper understanding, you can refer to the standard libraries of the corresponding programming language.</p><p>Of course, the multi-language code I provide may inevitably contain minor errors. Feedback and corrections are welcome so that we can make progress together!</p></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><h2 id=\"who-is-this-chapter-for\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#who-is-this-chapter-for\"><span>Who Is This Chapter For</span></a></h2><p>This chapter is recommended for readers who wish to systematically master data structures and algorithms.</p><p>For readers looking to quickly enhance their problem-solving skills for written tests, there is no need to study this chapter in full. Please refer to the <a class=\"route-link\" href=\"/algo/en/intro/quick-learning-plan/\">Quick Mastery Directory</a>.</p><h2 id=\"chapter-overview\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#chapter-overview\"><span>Chapter Overview</span></a></h2><p>This chapter focuses on data structures and sorting algorithms, covering all basic data structures, as well as some advanced data structures commonly used in algorithm problems. It concludes with an explanation of ten sorting algorithms.</p><p>Basic data structures include arrays, linked lists, queues, stacks, hash tables, and binary heaps. This chapter will explain their principles, code implementations, and common variants.</p><p>Advanced data structures include graphs, segment trees, Fenwick trees, tries, and union-find structures. As this is a foundational chapter, the focus will be on their principles and application scenarios, with specific code implementations arranged in later chapters on data structure design.</p><p><strong>Understanding the underlying principles and applicable scenarios of these data structures will enable you to fully utilize each data structure's features to solve algorithm problems and accurately comprehend the time complexity of code.</strong></p><p>In this chapter, the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">Algorithm Visualization Panel</a> will often be used to visualize operations on slightly complex data structures. The visualization code is written in JavaScript, but it is quite simple, so you should be able to understand it easily regardless of your familiarity with JavaScript.</p><div class=\"hint-container note\"><p class=\"hint-container-title\">Tip</p><p>The focus of this chapter is to help readers understand the implementation principles, advantages, disadvantages, and limitations of each data structure. The provided code implementations in Java/C++/Golang/Python/JavaScript ensure correctness and readability.</p><p>Extreme optimization and best practices at the programming language level are not within the scope of this site's teaching. If you seek a deeper understanding, you can refer to the standard libraries of the corresponding programming language.</p><p>Of course, the multi-language code I provide may inevitably contain minor errors. Feedback and corrections are welcome so that we can make progress together!</p></div></div> <h2 id=\"who-is-this-chapter-for\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#who-is-this-chapter-for\"><span>Who Is This Chapter For</span></a></h2> <a class=\"header-anchor\" href=\"#who-is-this-chapter-for\"><span>Who Is This Chapter For</span></a> <span>Who Is This Chapter For</span> <p>This chapter is recommended for readers who wish to systematically master data structures and algorithms.</p> <p>For readers looking to quickly enhance their problem-solving skills for written tests, there is no need to study this chapter in full. Please refer to the <a class=\"route-link\" href=\"/algo/en/intro/quick-learning-plan/\">Quick Mastery Directory</a>.</p> <a class=\"route-link\" href=\"/algo/en/intro/quick-learning-plan/\">Quick Mastery Directory</a> <h2 id=\"chapter-overview\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#chapter-overview\"><span>Chapter Overview</span></a></h2> <a class=\"header-anchor\" href=\"#chapter-overview\"><span>Chapter Overview</span></a> <span>Chapter Overview</span> <p>This chapter focuses on data structures and sorting algorithms, covering all basic data structures, as well as some advanced data structures commonly used in algorithm problems. It concludes with an explanation of ten sorting algorithms.</p> <p>Basic data structures include arrays, linked lists, queues, stacks, hash tables, and binary heaps. This chapter will explain their principles, code implementations, and common variants.</p> <p>Advanced data structures include graphs, segment trees, Fenwick trees, tries, and union-find structures. As this is a foundational chapter, the focus will be on their principles and application scenarios, with specific code implementations arranged in later chapters on data structure design.</p> <p><strong>Understanding the underlying principles and applicable scenarios of these data structures will enable you to fully utilize each data structure's features to solve algorithm problems and accurately comprehend the time complexity of code.</strong></p> <strong>Understanding the underlying principles and applicable scenarios of these data structures will enable you to fully utilize each data structure's features to solve algorithm problems and accurately comprehend the time complexity of code.</strong> <p>In this chapter, the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">Algorithm Visualization Panel</a> will often be used to visualize operations on slightly complex data structures. The visualization code is written in JavaScript, but it is quite simple, so you should be able to understand it easily regardless of your familiarity with JavaScript.</p> <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">Algorithm Visualization Panel</a> <div class=\"hint-container note\"><p class=\"hint-container-title\">Tip</p><p>The focus of this chapter is to help readers understand the implementation principles, advantages, disadvantages, and limitations of each data structure. The provided code implementations in Java/C++/Golang/Python/JavaScript ensure correctness and readability.</p><p>Extreme optimization and best practices at the programming language level are not within the scope of this site's teaching. If you seek a deeper understanding, you can refer to the standard libraries of the corresponding programming language.</p><p>Of course, the multi-language code I provide may inevitably contain minor errors. Feedback and corrections are welcome so that we can make progress together!</p></div> <p class=\"hint-container-title\">Tip</p> <p>The focus of this chapter is to help readers understand the implementation principles, advantages, disadvantages, and limitations of each data structure. The provided code implementations in Java/C++/Golang/Python/JavaScript ensure correctness and readability.</p> <p>Extreme optimization and best practices at the programming language level are not within the scope of this site's teaching. If you seek a deeper understanding, you can refer to the standard libraries of the corresponding programming language.</p> <p>Of course, the multi-language code I provide may inevitably contain minor errors. Feedback and corrections are welcome so that we can make progress together!</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/programming-language-basic/lc-practice/\" aria-label=\"Let's Have Fun with LeetCode\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Let's Have Fun with LeetCode</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/intro/complexity-basic/\" aria-label=\"Basic Time Complexity\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Basic Time Complexity<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/programming-language-basic/lc-practice/\" aria-label=\"Let's Have Fun with LeetCode\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Let's Have Fun with LeetCode</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Let's Have Fun with LeetCode</div> <a class=\"route-link auto-link next\" href=\"/algo/en/intro/complexity-basic/\" aria-label=\"Basic Time Complexity\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Basic Time Complexity<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Basic Time Complexity<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}