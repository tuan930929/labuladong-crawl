{
    "url": "https://labuladong.online/algo/en/dynamic-programming/egg-drop/",
    "title": "Classic DP: Egg Drop | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Classic DP: Egg Drop</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5806 words</span><meta property=\"wordCount\" content=\"5806\"></span></div><hr></div> <h1><!---->Classic DP: Egg Drop</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5806 words</span><meta property=\"wordCount\" content=\"5806\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5806 words</span><meta property=\"wordCount\" content=\"5806\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 5806 words</span> <meta property=\"wordCount\" content=\"5806\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 887. Super Egg Drop https://leetcode.com/problems/super-egg-drop </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div><p>This article discusses a classic algorithm problem: given several floors and several eggs, you need to determine the minimum number of attempts required to find the highest floor from which an egg can be dropped without breaking. This problem is frequently asked in interviews at major Chinese companies as well as Google and Facebook. However, they often change the context to throwing cups or bowls instead of eggs to avoid wastage.</p><p>We'll get to the specific problem shortly. This problem has numerous solution techniques, including several different dynamic programming approaches with varying efficiencies, and finally, an extremely efficient mathematical solution. Consistent with the style of this book, we avoid overly complex techniques that are not broadly applicable, as they are not worth the effort to learn.</p><p>Let's now use the general dynamic programming approach we've emphasized to analyze this problem.</p><h2 id=\"_1-understanding-the-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-understanding-the-problem\"><span>1. Understanding the Problem</span></a></h2><p>This is LeetCode problem 887: <a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">Super Egg Drop</a>. I will explain the problem:</p><p>You have a building with floors numbered from 1 to <code>N</code>. You are given <code>K</code> eggs (<code>K</code> is at least 1). There is a floor <code>F</code> (where <code>0 &lt;= F &lt;= N</code>). If you drop an egg from floor <code>F</code>, it will <strong>not break</strong>. If you drop an egg from any floor higher than <code>F</code>, it will break. If you drop an egg from any floor lower than <code>F</code>, it will not break. If the egg does not break, you can pick it up and use it again.</p><p>Now, the question is: In the <strong>worst case</strong>, what is the <strong>minimum</strong> number of tries needed to find floor <code>F</code>?</p><p>In other words, you need to find the highest floor <code>F</code> where the egg does not break. But what does \"minimum number of tries in the worst case\" mean? Letâ€™s look at some examples.</p><p>First, letâ€™s ignore the limit on the number of eggs. If there are 7 floors, how do you find the floor where the egg just breaks?</p><p>The most basic way is linear search: drop the egg from the 1st floor. If it does not break, try the 2nd floor. If it does not break, try the 3rd floor, and so on.</p><p>With this method, the <strong>worst case</strong> is when you reach the 7th floor and the egg still does not break (<code>F = 7</code>). So you need to drop the egg 7 times.</p><p>Now you should understand what \"worst case\" means. <strong>The egg only breaks when you have tried all possible floors</strong>. If the egg breaks on the 1st floor, you are just lucky; that is not the worst case.</p><p>Now, what does \"minimum number of tries\" mean? Still ignoring the egg limit, if there are 7 floors, we can use a better strategy.</p><p>The best idea is to use binary search. First, drop the egg from the middle floor: <code>(1 + 7) / 2 = 4</code>.</p><p>If the egg breaks, then <code>F</code> is less than 4. Try the middle of 1 to 3.</p><p>If the egg does not break, then <code>F</code> is at least 4. Try the middle of 5 to 7.</p><p>With this strategy, the <strong>worst case</strong> is either when <code>F = 7</code> and the egg never breaks, or when <code>F = 0</code> and the egg always breaks. But in both worst cases, you only need to try <code>log7</code> rounded up, which is 3. This is fewer than 7, so this is the <strong>minimum</strong> number of tries.</p><p>Actually, if there is no limit on the number of eggs, binary search is clearly the best strategy. But in this problem, you <strong>have a limit on the number of eggs <code>K</code>, so you cannot always use binary search</strong>.</p><p>For example, if you have only 1 egg and 7 floors, can you use binary search? If you drop the egg from the 4th floor and it does not break, you can try higher floors. But if it breaks, you have no eggs left and cannot test any more floors, so you cannot find the exact floor <code>F</code>.</p><p>In this case, you can only use linear search, try floors one by one from the bottom. In the worst case, you need 7 tries, so the answer is 7.</p><p>Some readers may think: Binary search eliminates floors the fastest. What if you use binary search first, and only switch to linear search when there is 1 egg left? Is this the best way?</p><p>Unfortunately, no. For example, if there are 100 floors and 2 eggs, you drop the first egg at floor 50. If it breaks, you must do linear search from floor 1 to 49. In the worst case, you need 50 tries.</p><p>If you donâ€™t do \"binary search\", but do \"divide by 5\" or \"divide by 10\", you can reduce the number of tries. For example, drop the first egg every 10 floors. When it breaks, use the second egg to check the floors one by one. In this way, you need at most 20 tries. The best answer is actually 14. There are many possible good strategies, but there is no simple rule.</p><p>After all this explanation, the goal is to make sure you understand the problem. This problem is really complex, even for humans. So how can we solve it with an algorithm?</p><h2 class=\"hidden-for-toc\" id=\"_2-idea-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-idea-analysis\"><span>2. Idea Analysis</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_3-binary-search-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-binary-search-optimization\"><span>3. Binary Search Optimization</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_4-redefining-state-transition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-redefining-state-transition\"><span>4. Redefining State Transition</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_5-further-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-further-optimization\"><span>5. Further Optimization</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 887. Super Egg Drop https://leetcode.com/problems/super-egg-drop </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div><p>This article discusses a classic algorithm problem: given several floors and several eggs, you need to determine the minimum number of attempts required to find the highest floor from which an egg can be dropped without breaking. This problem is frequently asked in interviews at major Chinese companies as well as Google and Facebook. However, they often change the context to throwing cups or bowls instead of eggs to avoid wastage.</p><p>We'll get to the specific problem shortly. This problem has numerous solution techniques, including several different dynamic programming approaches with varying efficiencies, and finally, an extremely efficient mathematical solution. Consistent with the style of this book, we avoid overly complex techniques that are not broadly applicable, as they are not worth the effort to learn.</p><p>Let's now use the general dynamic programming approach we've emphasized to analyze this problem.</p><h2 id=\"_1-understanding-the-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-understanding-the-problem\"><span>1. Understanding the Problem</span></a></h2><p>This is LeetCode problem 887: <a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">Super Egg Drop</a>. I will explain the problem:</p><p>You have a building with floors numbered from 1 to <code>N</code>. You are given <code>K</code> eggs (<code>K</code> is at least 1). There is a floor <code>F</code> (where <code>0 &lt;= F &lt;= N</code>). If you drop an egg from floor <code>F</code>, it will <strong>not break</strong>. If you drop an egg from any floor higher than <code>F</code>, it will break. If you drop an egg from any floor lower than <code>F</code>, it will not break. If the egg does not break, you can pick it up and use it again.</p><p>Now, the question is: In the <strong>worst case</strong>, what is the <strong>minimum</strong> number of tries needed to find floor <code>F</code>?</p><p>In other words, you need to find the highest floor <code>F</code> where the egg does not break. But what does \"minimum number of tries in the worst case\" mean? Letâ€™s look at some examples.</p><p>First, letâ€™s ignore the limit on the number of eggs. If there are 7 floors, how do you find the floor where the egg just breaks?</p><p>The most basic way is linear search: drop the egg from the 1st floor. If it does not break, try the 2nd floor. If it does not break, try the 3rd floor, and so on.</p><p>With this method, the <strong>worst case</strong> is when you reach the 7th floor and the egg still does not break (<code>F = 7</code>). So you need to drop the egg 7 times.</p><p>Now you should understand what \"worst case\" means. <strong>The egg only breaks when you have tried all possible floors</strong>. If the egg breaks on the 1st floor, you are just lucky; that is not the worst case.</p><p>Now, what does \"minimum number of tries\" mean? Still ignoring the egg limit, if there are 7 floors, we can use a better strategy.</p><p>The best idea is to use binary search. First, drop the egg from the middle floor: <code>(1 + 7) / 2 = 4</code>.</p><p>If the egg breaks, then <code>F</code> is less than 4. Try the middle of 1 to 3.</p><p>If the egg does not break, then <code>F</code> is at least 4. Try the middle of 5 to 7.</p><p>With this strategy, the <strong>worst case</strong> is either when <code>F = 7</code> and the egg never breaks, or when <code>F = 0</code> and the egg always breaks. But in both worst cases, you only need to try <code>log7</code> rounded up, which is 3. This is fewer than 7, so this is the <strong>minimum</strong> number of tries.</p><p>Actually, if there is no limit on the number of eggs, binary search is clearly the best strategy. But in this problem, you <strong>have a limit on the number of eggs <code>K</code>, so you cannot always use binary search</strong>.</p><p>For example, if you have only 1 egg and 7 floors, can you use binary search? If you drop the egg from the 4th floor and it does not break, you can try higher floors. But if it breaks, you have no eggs left and cannot test any more floors, so you cannot find the exact floor <code>F</code>.</p><p>In this case, you can only use linear search, try floors one by one from the bottom. In the worst case, you need 7 tries, so the answer is 7.</p><p>Some readers may think: Binary search eliminates floors the fastest. What if you use binary search first, and only switch to linear search when there is 1 egg left? Is this the best way?</p><p>Unfortunately, no. For example, if there are 100 floors and 2 eggs, you drop the first egg at floor 50. If it breaks, you must do linear search from floor 1 to 49. In the worst case, you need 50 tries.</p><p>If you donâ€™t do \"binary search\", but do \"divide by 5\" or \"divide by 10\", you can reduce the number of tries. For example, drop the first egg every 10 floors. When it breaks, use the second egg to check the floors one by one. In this way, you need at most 20 tries. The best answer is actually 14. There are many possible good strategies, but there is no simple rule.</p><p>After all this explanation, the goal is to make sure you understand the problem. This problem is really complex, even for humans. So how can we solve it with an algorithm?</p><h2 class=\"hidden-for-toc\" id=\"_2-idea-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-idea-analysis\"><span>2. Idea Analysis</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_3-binary-search-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-binary-search-optimization\"><span>3. Binary Search Optimization</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_4-redefining-state-transition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-redefining-state-transition\"><span>4. Redefining State Transition</span></a></h2><h2 class=\"hidden-for-toc\" id=\"_5-further-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-further-optimization\"><span>5. Further Optimization</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 887. Super Egg Drop https://leetcode.com/problems/super-egg-drop </h3></div> <h3 tabindex=\"-1\"> 887. Super Egg Drop https://leetcode.com/problems/super-egg-drop </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div> <p class=\"hint-container-title\">This article will resolve</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">Difficulty</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a></td> <a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">887. Super Egg Drop</a> <td style=\"text-align:center;\">ðŸ”´</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a> <p>This article discusses a classic algorithm problem: given several floors and several eggs, you need to determine the minimum number of attempts required to find the highest floor from which an egg can be dropped without breaking. This problem is frequently asked in interviews at major Chinese companies as well as Google and Facebook. However, they often change the context to throwing cups or bowls instead of eggs to avoid wastage.</p> <p>We'll get to the specific problem shortly. This problem has numerous solution techniques, including several different dynamic programming approaches with varying efficiencies, and finally, an extremely efficient mathematical solution. Consistent with the style of this book, we avoid overly complex techniques that are not broadly applicable, as they are not worth the effort to learn.</p> <p>Let's now use the general dynamic programming approach we've emphasized to analyze this problem.</p> <h2 id=\"_1-understanding-the-problem\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1-understanding-the-problem\"><span>1. Understanding the Problem</span></a></h2> <a class=\"header-anchor\" href=\"#_1-understanding-the-problem\"><span>1. Understanding the Problem</span></a> <span>1. Understanding the Problem</span> <p>This is LeetCode problem 887: <a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">Super Egg Drop</a>. I will explain the problem:</p> <a href=\"https://leetcode.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener noreferrer\">Super Egg Drop</a> <p>You have a building with floors numbered from 1 to <code>N</code>. You are given <code>K</code> eggs (<code>K</code> is at least 1). There is a floor <code>F</code> (where <code>0 &lt;= F &lt;= N</code>). If you drop an egg from floor <code>F</code>, it will <strong>not break</strong>. If you drop an egg from any floor higher than <code>F</code>, it will break. If you drop an egg from any floor lower than <code>F</code>, it will not break. If the egg does not break, you can pick it up and use it again.</p> <code>N</code> <code>K</code> <code>K</code> <code>F</code> <code>0 &lt;= F &lt;= N</code> <code>F</code> <strong>not break</strong> <code>F</code> <code>F</code> <p>Now, the question is: In the <strong>worst case</strong>, what is the <strong>minimum</strong> number of tries needed to find floor <code>F</code>?</p> <strong>worst case</strong> <strong>minimum</strong> <code>F</code> <p>In other words, you need to find the highest floor <code>F</code> where the egg does not break. But what does \"minimum number of tries in the worst case\" mean? Letâ€™s look at some examples.</p> <code>F</code> <p>First, letâ€™s ignore the limit on the number of eggs. If there are 7 floors, how do you find the floor where the egg just breaks?</p> <p>The most basic way is linear search: drop the egg from the 1st floor. If it does not break, try the 2nd floor. If it does not break, try the 3rd floor, and so on.</p> <p>With this method, the <strong>worst case</strong> is when you reach the 7th floor and the egg still does not break (<code>F = 7</code>). So you need to drop the egg 7 times.</p> <strong>worst case</strong> <code>F = 7</code> <p>Now you should understand what \"worst case\" means. <strong>The egg only breaks when you have tried all possible floors</strong>. If the egg breaks on the 1st floor, you are just lucky; that is not the worst case.</p> <strong>The egg only breaks when you have tried all possible floors</strong> <p>Now, what does \"minimum number of tries\" mean? Still ignoring the egg limit, if there are 7 floors, we can use a better strategy.</p> <p>The best idea is to use binary search. First, drop the egg from the middle floor: <code>(1 + 7) / 2 = 4</code>.</p> <code>(1 + 7) / 2 = 4</code> <p>If the egg breaks, then <code>F</code> is less than 4. Try the middle of 1 to 3.</p> <code>F</code> <p>If the egg does not break, then <code>F</code> is at least 4. Try the middle of 5 to 7.</p> <code>F</code> <p>With this strategy, the <strong>worst case</strong> is either when <code>F = 7</code> and the egg never breaks, or when <code>F = 0</code> and the egg always breaks. But in both worst cases, you only need to try <code>log7</code> rounded up, which is 3. This is fewer than 7, so this is the <strong>minimum</strong> number of tries.</p> <strong>worst case</strong> <code>F = 7</code> <code>F = 0</code> <code>log7</code> <strong>minimum</strong> <p>Actually, if there is no limit on the number of eggs, binary search is clearly the best strategy. But in this problem, you <strong>have a limit on the number of eggs <code>K</code>, so you cannot always use binary search</strong>.</p> <strong>have a limit on the number of eggs <code>K</code>, so you cannot always use binary search</strong> <code>K</code> <p>For example, if you have only 1 egg and 7 floors, can you use binary search? If you drop the egg from the 4th floor and it does not break, you can try higher floors. But if it breaks, you have no eggs left and cannot test any more floors, so you cannot find the exact floor <code>F</code>.</p> <code>F</code> <p>In this case, you can only use linear search, try floors one by one from the bottom. In the worst case, you need 7 tries, so the answer is 7.</p> <p>Some readers may think: Binary search eliminates floors the fastest. What if you use binary search first, and only switch to linear search when there is 1 egg left? Is this the best way?</p> <p>Unfortunately, no. For example, if there are 100 floors and 2 eggs, you drop the first egg at floor 50. If it breaks, you must do linear search from floor 1 to 49. In the worst case, you need 50 tries.</p> <p>If you donâ€™t do \"binary search\", but do \"divide by 5\" or \"divide by 10\", you can reduce the number of tries. For example, drop the first egg every 10 floors. When it breaks, use the second egg to check the floors one by one. In this way, you need at most 20 tries. The best answer is actually 14. There are many possible good strategies, but there is no simple rule.</p> <p>After all this explanation, the goal is to make sure you understand the problem. This problem is really complex, even for humans. So how can we solve it with an algorithm?</p> <h2 class=\"hidden-for-toc\" id=\"_2-idea-analysis\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_2-idea-analysis\"><span>2. Idea Analysis</span></a></h2> <a class=\"header-anchor\" href=\"#_2-idea-analysis\"><span>2. Idea Analysis</span></a> <span>2. Idea Analysis</span> <h2 class=\"hidden-for-toc\" id=\"_3-binary-search-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_3-binary-search-optimization\"><span>3. Binary Search Optimization</span></a></h2> <a class=\"header-anchor\" href=\"#_3-binary-search-optimization\"><span>3. Binary Search Optimization</span></a> <span>3. Binary Search Optimization</span> <h2 class=\"hidden-for-toc\" id=\"_4-redefining-state-transition\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_4-redefining-state-transition\"><span>4. Redefining State Transition</span></a></h2> <a class=\"header-anchor\" href=\"#_4-redefining-state-transition\"><span>4. Redefining State Transition</span></a> <span>4. Redefining State Transition</span> <h2 class=\"hidden-for-toc\" id=\"_5-further-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_5-further-optimization\"><span>5. Further Optimization</span></a></h2> <a class=\"header-anchor\" href=\"#_5-further-optimization\"><span>5. Further Optimization</span></a> <span>5. Further Optimization</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/dynamic-programming/regular-expression-matching/\" aria-label=\"Classic DP: Regular Expression Matching\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Classic DP: Regular Expression Matching</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/dynamic-programming/burst-balloons/\" aria-label=\"Classic DP: Burst Balloons\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Classic DP: Burst Balloons<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/dynamic-programming/regular-expression-matching/\" aria-label=\"Classic DP: Regular Expression Matching\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Classic DP: Regular Expression Matching</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Classic DP: Regular Expression Matching</div> <a class=\"route-link auto-link next\" href=\"/algo/en/dynamic-programming/burst-balloons/\" aria-label=\"Classic DP: Burst Balloons\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Classic DP: Burst Balloons<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Classic DP: Burst Balloons<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}