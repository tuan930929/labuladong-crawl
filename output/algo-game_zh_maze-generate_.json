{
    "url": "https://labuladong.online/algo-game/zh/maze-generate/",
    "title": "迷宫生成器 | labuladong.online",
    "content": "<div class=\"content-container horizontal-layout\"><div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div></div> <div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div> <div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div> <div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div> <div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div> <template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template> <div>loading...</div> <div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div> <div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div> <div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div></div> <div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div></div> <div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div> <h4>题目</h4> <div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div> <a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a> <div class=\"question-content\"><p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p>\n<h3>迷宫生成要求</h3>\n<ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul>\n<h3>经典算法推荐</h3>\n<h4>1. 深度优先搜索 (DFS) 算法</h4>\n<ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol>\n<h4>2. 随机 Prim 算法</h4>\n<ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol>\n<h4>3. 递归分割算法</h4>\n<ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol>\n<h3>游戏控制器接口</h3>\n<p><code>gameController</code> 提供以下方法来操作迷宫网格：</p>\n<ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul>\n<h3>重要说明</h3>\n<ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul>\n<p>祝你生成出精彩的迷宫！</p></div> <p>在这个挑战中，你需要实现一个迷宫生成算法，创建一个既有挑战性又有解的随机迷宫。</p> <h3>迷宫生成要求</h3> <ul>\n<li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li>\n<li>迷宫应该具有足够的复杂性和随机性</li>\n<li>避免生成过于简单或过于复杂的迷宫</li>\n<li>确保生成的迷宫有唯一解（或接近唯一解）</li>\n</ul> <li>生成的迷宫必须是连通的（从任意一点都能到达任意另一点）</li> <li>迷宫应该具有足够的复杂性和随机性</li> <li>避免生成过于简单或过于复杂的迷宫</li> <li>确保生成的迷宫有唯一解（或接近唯一解）</li> <h3>经典算法推荐</h3> <h4>1. 深度优先搜索 (DFS) 算法</h4> <ol>\n<li>从一个随机起点开始，标记为已访问</li>\n<li>随机选择一个未访问的相邻单元格</li>\n<li>移除两个单元格之间的墙壁，移动到新单元格</li>\n<li>重复步骤2-3，直到无路可走时回溯</li>\n<li>继续直到所有单元格都被访问</li>\n</ol> <li>从一个随机起点开始，标记为已访问</li> <li>随机选择一个未访问的相邻单元格</li> <li>移除两个单元格之间的墙壁，移动到新单元格</li> <li>重复步骤2-3，直到无路可走时回溯</li> <li>继续直到所有单元格都被访问</li> <h4>2. 随机 Prim 算法</h4> <ol>\n<li>选择一个随机起点，加入到迷宫中</li>\n<li>将起点的所有墙壁加入到墙壁列表</li>\n<li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li>\n<li>将新单元格加入迷宫，并将其墙壁加入列表</li>\n<li>重复直到墙壁列表为空</li>\n</ol> <li>选择一个随机起点，加入到迷宫中</li> <li>将起点的所有墙壁加入到墙壁列表</li> <li>随机选择一个墙壁，如果它连接的两个单元格中只有一个在迷宫中，则移除这个墙壁</li> <li>将新单元格加入迷宫，并将其墙壁加入列表</li> <li>重复直到墙壁列表为空</li> <h4>3. 递归分割算法</h4> <ol>\n<li>从整个网格开始</li>\n<li>随机选择一个方向（水平或垂直）进行分割</li>\n<li>在分割线上随机选择一个点作为通道</li>\n<li>递归地对每个子区域重复此过程</li>\n</ol> <li>从整个网格开始</li> <li>随机选择一个方向（水平或垂直）进行分割</li> <li>在分割线上随机选择一个点作为通道</li> <li>递归地对每个子区域重复此过程</li> <h3>游戏控制器接口</h3> <p><code>gameController</code> 提供以下方法来操作迷宫网格：</p> <code>gameController</code> <ul>\n<li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li>\n<li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n<li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li>\n</ul> <li>\n<p><code>getGrid()</code>: 获取当前网格状态</p>\n<ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul>\n</li> <p><code>getGrid()</code>: 获取当前网格状态</p> <code>getGrid()</code> <ul>\n<li>返回二维数组，true 表示墙壁，false 表示通路</li>\n<li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li>\n</ul> <li>返回二维数组，true 表示墙壁，false 表示通路</li> <li>可以通过 <code>grid.length</code> 获取高度，<code>grid[0].length</code> 获取宽度</li> <code>grid.length</code> <code>grid[0].length</code> <li>\n<p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li> <p><code>setEmpty(row, col)</code>: 将指定位置设置为通路</p> <code>setEmpty(row, col)</code> <ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul> <li><code>row</code>: 行索引 (0-based)</li> <code>row</code> <li><code>col</code>: 列索引 (0-based)</li> <code>col</code> <li>\n<p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p>\n<ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul>\n</li> <p><code>setBlock(row, col)</code>: 将指定位置设置为墙壁</p> <code>setBlock(row, col)</code> <ul>\n<li><code>row</code>: 行索引 (0-based)</li>\n<li><code>col</code>: 列索引 (0-based)</li>\n</ul> <li><code>row</code>: 行索引 (0-based)</li> <code>row</code> <li><code>col</code>: 列索引 (0-based)</li> <code>col</code> <h3>重要说明</h3> <ul>\n<li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li>\n<li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li>\n<li>生成的迷宫必须确保从起点到终点有可通行的路径</li>\n</ul> <li><strong>起点</strong>: 位于左上角 (0, 0)，显示为绿色格子</li> <strong>起点</strong> <li><strong>终点</strong>: 位于右下角 (width-1, height-1)，显示为红色格子</li> <strong>终点</strong> <li>生成的迷宫必须确保从起点到终点有可通行的路径</li> <p>祝你生成出精彩的迷宫！</p> <div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div> <div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div> <div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div> <h3 class=\"editor-title\">编辑器</h3> <div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div> <button>提交</button> <button>恢复</button> <button>Console+</button> <div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div> <div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div> <div class=\"cm-theme code-mirror-wrapper\"></div> <div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div> <div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div> <div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div> <h3>控制台输出</h3> <div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div> <button>清空日志</button> <button class=\"close-button\" title=\"关闭\">×</button> <div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div> <p class=\"no-logs\">暂无日志输出</p>"
}