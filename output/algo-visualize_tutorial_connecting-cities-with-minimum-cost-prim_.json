{
    "url": "https://labuladong.online/algo-visualize/tutorial/connecting-cities-with-minimum-cost-prim/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: 'H4sIAOI5UWgC/+19aZMcx5XYX+kdfxAgA2DlUZcUVBgCQSxtHgoMqLVjhJioc7pm+pru6pnpYSCC1kmtSYryro4VtV5txEpiyJZEex0hrkCJP2YxA/CT/4LzqMrOrKrurq6u6pnBNhhBoLMyX758+fLlO6ve2hrFwWC09aXWzltb8WQQkH9tfe3+G/fu335t60Zra+T1WdtOb9zp3GhpD0nbkdMZs367XqffGdJukc9/h1rgGFuPbrTeKhyZTnD3P3/t/t3t7VfeeJ0O7jld1hEhBG+0EMJAnWV3tz9qH3ekeXTXA75XfR5s0nl0IzvPIQLHJ7l5dkH1mQy2IjO3Ik+zO3p+Jlh9JpOtycqtKXaMo2F+JlR9JpuuCWu5NYWj/RMrPxOuPBPW6JowyK3ppG8OTvMz6dVngmxNKLemrgdHBRxRnccxYmvCZnamCHTigpnM6jPpiM5k4OxMA2TEbn4mqzpHQIPNlNunvaE3DvMz2YtnunP71VeVOaAN2Bw5uh0eI/tImiOwkAWSE5tCe+nunVdv37/9IEH8yBm+zuFu7Q2dQXuWoHM7fe+AtIVOZxQoyFiUtNCyZiLjOrHXVqXqy2++fkeZSbvRAmxzwnHPSxHqRr2oO+7e6Y/ireTRKy8x6JEzZLvmDPfG3aAXM6GdLKBILD96OCWKaQVWiKoTRaCakiQejmWKQNvGN1rk//YyFPnqq2/c+U+5eQrXIiP+2t0Hf/nGS8o4whswS8mvDaPuLa/fGxFcvbg/zJDzNO7p88h5EPUY7TIQ5lE58LCDw+pUTlcxg8gAERoDZC86AcB0oGGqaGzffUB79N39wItTiXOKJpyjPC8YjRScym6hKhFyK8mDYfQSK9JJR2DYEg194GPHyQiIFNx8OQQ12k9D2YlPuxh1ZuA/e3t224Ez2D04ON4vqwfJrEBuLQi1BcvICjlg2aSHnr9Y0WlfFqOaH5rIqbTBg8OtWcBX210OpiTrcyzm01SAVBjGnFIoJYbuW5q1JKWxTm4sbOaOkheMIzSDGEUUFv0FhTUJIrs3FAGhByY0KuFqg5m4KlyxCyrxRdR7bfvB1hLUWII1OJiSrCEQWcQdCVSZOzDGglIJUaDpAs+oRJLjINprx9vj7q5MF20lcmgKvgbVmwysS/gCxzGwpuJ7r44tTDnQ1zxQQnTMZ+zkYqpOBwpAwaFWVcAsVgXGWY0qGPsFGtVIuf67Qdzu+zNv/nQrTVMn89ryVgbEFsZ+Wb4fFS5iliZg2xYhT0bd0spqWcQCsRaSdolh0qKdEANsVOLf+bpHAt9yAy/M3qspYrMkKAQa0dchgDkDpY/iCEvgHd3yQLgYfTGu8HiAshtBNtFeRFFDNzTdKstGcb9wy2ap7ZptUpVJ5aMZ6N9549U37lPoXr9DdGHS8u88Hzk+pG0HwYS2QIDhTQgsXd1aepkfDE46Od2DNSqGimYEGmha/uU8OulGLFAwoQYJuWDWITE8Dfqye8o3vRBVE+Jz9LNUswxD20IL8M+dAIO6HaCh5/W2dF9Kajz+JDKAirMfjQYdZ/J1Z9b+LrpsxBKnMIf9fpyFxqdeSNUCaFEcdEdZcN3Acg4WI8e7zTrqS6wyD2irE/T2YkXmgSrLK0msemwdAVrWwQ0t9JfnSYgZT6L5p4kcJtKnikwGElxYp0wmFqrjm+uUybAJmRyfHpq9LOPwRnm1rmli6DUuk+EaZPIuaFQqL7xXystlsTcl5XIp6QIXLr5AvHeCMN5apC1uV4VFuvnt4xIWCe+mboszJFp7CclXEjt+iGRwldBaBKbmSyvnVybnIedW9pxOx3W8g5sg61U+OvbzNlDg7wWsJ/0H3FpoLMwWfgJSDr2M/CuQQeVngMvOUHBnF22LOIVZt8CSd3aqZM0Dg1TRkS6iWPylg26qR/r+3Qdv3n99dW6YAb7kATiqrAkWHMoCYAXsca9xzPLAltJ779W52pUV85IUrKT7lgMEatvTqOcHJ7PP43YldKrvYA4drQYTozp1St+RJZdXBK/gQrgqlgsyLWA6jVouZXTOvO0CJch6nbYLCLBlO+u0XfQmbJejsW53s6zDG+XV+poPoNO47YLWYbvAZm0XWJvtIvamsu0Cize2FhcLWghmYg/9sOxVWoDavVqNoZLQhll9chU7rQBYSpYq1LuihlrJ1a3Z3rtXDqujyqy6ygbWquY+h5ZtwRbUbNmWVBWFjJ5r2WpanSbykratbTdq22bAXxWNNQigE4TNaqwZTeOlN1977b/sFtA/DVPPBoigZ/lghi4wB+IS0fuFkz96uFzCjaURjdWaqZSV0sRpOvEiTdwPsK85zSp1qGazTMqsMSzXyuZ2p8ueRVqbsqGtJvin2bVphN80bJRJm5iRVZLONoWOctBnp6rkN42M1hcmOAQmxrVHEUoqyjUpHwVgSjn5S8Iqp4neuxjVsTpylayUl+6+evfB3SVh5bKjGgz4VNYcL5eq/hyqigUuyJpVxZL2wBLRi9o0zmXDILbZbBwkA//qW/i1RkKO6nSL1Bo9Wj1GU3W1KweRSlKwtljG4ihE9T1tJChScl01u1rWFYEqS+w8OpV1uQJY1dWly2g7+9A2QdZXn2r9M20WkzAesaVmZuikBpFlWnawzIVdaHzMCK3YBrVt8uWPWSxsD+qWVSmzIRz2cxGV8GgUteUEaWC5ZpkkzHScdEr8bB1Faqq62DWcBbtSHEEBGqB1AhqED4thQxf4qHSmXkqBsptCtBVEp9fMGdO7lm0GWqXd4JE3eS+CjsaPZ8rNPsTYXgxcjJu1F1Cq4NdCywQV94KW1QNNNx8Ww3Z1zXW1ipHHhTuBIZ0c4xmTe8gKHFhXxo/EvCgQAeTFi5qCKr8wk1FVlT8SAgAEFmo+Yx5X4wkAdII9gPZ8N6Hh2UhzKy1idplWynaaZft2jSVgYKnSp6xTCWQrYKkA05FcOWR7VqiFjW+pXqUMrCigKjnvkA4BrAIXrlJelqVxzoFSkGsADDOAWMo1ALqFbwIDmEvlSS89i4E0MouVn0Vcmfn7t8ZZxGWQv1meq4I8oGObHixTk6tBncB311mSBy9BSZ5pO6FmNl2Sl0t9r16UN9k7DGGuKK9MGpUYWWgzojrTqPwwhMBdZxoVaqQEZNgmXbKijTUqJSAh1KzmbyRjHWlUqNmIG66vBCTdm9rSqJKNXVMalddpH3ilM5LzqD2naVScLFWo9xylURWs7hKkURVgdVSZVVfZwFpd5c9jgVB+Cy6oQCiV0fPcBfoFFgg1Wx8Er6Qb2LAd38DNplChKtoqaCrpH0PD1/Qrn/TfdvQ4zLIOb8wn/e827xQz16Gv4mb1Vb02fVXsTp0ly/hSqoSFWlyd4bntqrB2d3ttVCZYzruVUU9K1mdfdf2yJJE21d2rKm+JwL74xKZmM5K0hjOStCrcW2vuSgGwgr291zRmBcCWyqpZOVOn5KJry/nIA0K1bUMulwVVcBeh2nJZGkmtqU6d0jfkvaZP0BpKvf/Neheav6BKeheERj3/grpA90KzabfmlXQv6NjQw4bfKYBrrtDavdgard18ldaitDxgmTTjx7Lw/PXxtLymX/xlNFxnlQuv1lZplaXMpau12r2oaquajL9as2oLcKqc7lsAqzpi1Z0T99bhnKgxS7qSulu6Dgw1UgeG1muRXXlf0Eap3Xhdynhd1uCPrmo0bqK+FVi4pPFdU9R3GfNu2YOgN3sO9CYDKSu8GbJcglO5PI9aSxhLYrbcWxwrJ6JUv9qXSuqq7M+E1VZ65UoYS66r+TSn3OpghdXBasQuQKeycl4A6/kqYXQgxCCoqYRR+AVVXwlcdxFjFg9exFjG8C/wbJYvY9xtpJBxFzRZyrgLLriYseKu5MsZvcODrpkrZywDXoyctSdSeVxgaAYOayxolGFbGkD+Ogsapcmh5mqeVtfbOyQHs+6T/9Zd0CghAJHtALvx3K0SNdL5KjUw19UMXN+wvDUUSlZ0ic4uZ0zlbmjomlZjqSReqYwPLy6VBCGwbL1xZrGrlDSCS1zSOO9zXFetpFFcB/nb5fkvadRt2/LhGksawSUoacS+qdl+4yWNsLaSxiMY+Yf5ksYS7yMQIwttyFq/amUD0wu8K/9Vq8k4tnKWMW/Mf9VqDUniQKuiaRTUw6eIG6adswBXyTxfJmxLBZC28FQXbSBCBnblDcQ6uAmxjatuoAagFThVThBorCgYYMuCV74oeM829gbZDeCN+aLgdZygdXyuc1dvNkPErK3OQmzPps7iIussxsFR+2QxNN5tU2exLJE2dRarhksTiX3x4dIm45y42TgnrsK65QL01YssCjb2XtOYFQBbqiBi5SKLkouuLft/cZpX9W1opMiieuFAI0UW1amzhiKLkshdTJFFQVB4cztV+RJOueC6UKfn3U5GnTlBS95xoNEr7mp+cd4LrdCzmq2x0OuusYAXW2MBm66xaPjNWlbTNRawsRoLeNlrLOAF1VjUZPhd2hSigvVVRqwAVq2IXaEKi8Jk9kteYVGvobipsNj4W557f8uVc0NXTrXefOq0wnEoacXX9qnTJSzFZT912uyxsnFN9RUFFG/8XTH1YrZMfUV1L9HRenyitb14prJzVattTxupryi5riv6iajqHt/NJ6JmOZY0oGHHq+sTUalPUPWT4LV/JCqDR1JfAStVOhbVV2Q/TZTUV8AmPk5Ua31F7vNE666vgEpGWoCNSnuSr644mCAjyldXlNgRMXLWjki5+ravO36dn4uSYHuODcy1VldIk2vIt8t85rmc119O3vODwF53dYWEQBDi0HabT9mC6yiDgDWWQWBJTNsh0K0ayyDslVL/7cVlEG5oe67X/K6imj4ZJRFb83Cgm1Xgosv8yag531VZ/8ecVptFXAj5++X5r6/wgB2Y9hrrK9AlqK8gbO0hu/H6ClRbfcW+HnYm+fqKEgFJMbLQhsR1ZoeHruY7a80Ox01khwf25NjNCR3WqGSHw9Bymv9kFMDryA03mo1s27XlhovN2eSGX2RueBREtFploQLJum1yw5cl0iY3fNXgTCKvn+9YpdVsrNKqwrrV4yCVgZXErIEwA1rMdSVXepEZ06tI6Y3oaC6uK3SdeaIDXmBU9+KLUypnw1cPEZc84/Vi1kAhSeXVrhx2LknB2qKfiwON1ff0IktL1hVkrk6duotJiuBd4Vis6WnYbzjJ36g7yR9dbJI/ajrJv+Ey+TJvy1gtyx81luWPLnuWP7qgLP+aTPhLm+VfsL7KiBXAqhWxTZZ/o1n+tVrpmyz/TZb/Jst/k+W/yfLfZPlvsvw3Wf6bLP9Nlv8my7+2LP+FmeRl8/xFJEJ1lRjrzvPP4pHk+aNKsZSiPP9sVnmS54+ayCqvNc8/l1e+7jx/JOf5Q+zDSnuSz/M/7tu+lc/zL7EjYuSsHZGSdHXdcYM68/yxnGEJNNdZZ56/NHkQWEFo1xVrlNPsTcsE687zl4tJXNuwUfPpd/o68vxRjXn+tnRWdGBqqMY8fwBWykEHYHGmv49NE5rN76tRU6a/XPui+SbyqsDFlzjTf1467Ppz8FebRVwJ+Rvm+c/0R2YQhOEaM/3xJcj094iags3GM/1xbZn+o/B02Mln+uPFSxAjC+1IvdZMf6LS+Gidmf56E5n+YdeH+Y/EsEblrfeaD6BTsRhvqUvJXEeuv9lwgBvUluwv9meT7H+Ryf6d/Z5RQl3i3TbJ/ssSaZPsv2qMJhHZz3fI0mw2ZGlWYd3q4ZDKwEpitoZk/wKuK7nSi0z2X0VKb0RHc+FdoevM/YzpRSb7o2YFELqMyf4lz/hzkuxfsNqVo88lKbjGZP/qe/pvIdm/OnU2yf5zQ7KuY5qm12yyv1l3sj++2GR/3HSyf9O+ENh0sj9uLNkfX/Zkf3xByf41mfCXNtm/YH2VESuAVStim2T/RpP9a7XSN8n+m2T/TbL/Jtl/k+y/SfbfJPtvkv03yf6bZP9Nsn99yf6wpmR/EYlQXSXWupP9s3gkyf64UiylKNk/m1qeJPvjJlLLa032zyWXrzvZX0IAucj1w0p7kk/2n/RGsOCl/iV2RIyctSO6DNXTLKPGZH8JNvY9015rsr80uWF5CIV1xRol77Luk/92157uL6EAke0Aexc0n4NnrSPhH9eY8M+S8lPfrQMDZNaZ8Y9Xy/jHizP+dc9zod38xto1Zfwb0s1r2JrhV4GrX+KM/3lpsevPxV9tFnEv5K+Z5z/j38KG6+lrzPjXL0HGvw89P2z+3f56bRn/h0fWqODd/rV/nV2/2Fiu3nQs1244louajuXqjcVy9csey9UvKJZbIQp0pWK5BcBKp+lsV449VI6ZwjL++JIxU9hIzBQ2F0+5XDHT5zC6UxiBrzW6U7CrqwY7a4sSLRs1tbVmw6a2dinjpmVLp0pFeKoHUMqJjHuNY7ZM7Km6b38FAblM7KkkBWuLYiwO9lTf00ZiTyXXdUVjT2WJvYk9LfEKc8cNTVRT5EkkK6iGXfaV2c2HnrKIJKGnElZKQb5FUejJOzzomvnQU4kJxMhZgQ7JGxwYmoHDWkNPMnRLA2jt75mSEMCa7+t2pT0p/T1pvZE3f8Emvyi9Cy/0m9JlYjTlspKk901g17S1dYefJAQCz3Hc5l8AAUt8HKDUd4LTHXFNA6MaA1rLuH/IcGOhiVf0Ag+EDOzK3n2kazcBslDOuy/4qCCBRo4wQROaTX/XATftHjQacw8al909aFyQe7CC36RWk+xKqaerlARuV7X+K7saQY2uRtCIqxGs2ZIuxaQlbagVLMTtugzpmvyp9xpmzVpd6pfRRPQ8W7fMmkxE4TrNmIhg3SZiFpHERDQqeX+LTMSgo/HDrZqIJSYQI2cZJFB+P15omdUNkiITUX5Jq665rlbeIKnHRJQRMM0AG2VMkoJdKZ2faDSRn7gLmsxQLG+2N5KjWHFHiqIbki8q1FA2y6t5K1HGAEIzgE7zZiKoYibqM83EwLYcL3x+zUTBSQXqds5MrJhjWt5Q1Js2FM3GDEXzshuK5kUZio3plbUGAi+Hktr4u15WCUZVMjVKW4paI5bi4tBfKYFSp42xVDbHMhZGwcuIbXL71GVfiJSKjH0B121fZBFJ7AuzUu1wkX0RHo2idt6+KDGBGDlLl9Xk8iDsGk6t9oWsb7nAR+a67QsJAdeyzUAr82rogl0pbV+YjdgXsFH7Al6sfQHrq7GXM7MdAn39BoaEghECK1tx0oSFAZuwMKqatFfBxhDcVKAq5G0M2LCNYdR6jecsDKsGC0NlEOqHMmBt5kXGfNFAiP0lXo4H5xccuA50sb9UOQUsLqfo90aEDl7MLQUpXfI07ulbZZDIFlXQCxPP2wukmRahoGbndB/BcSnVLN9xzLLibkAWlCugwnOkHUEEUERMfSYipQ73CoVaoHhbnE7nTr/XI2cl8DP70kZumEtsXqJeKxUDhNk93LwYR1XEuFZKyuYSxAG9mNHMhGAtQ8lY14J8irgn6L5Q7Yeeh3FZ7vTk/SxAedbHSGxEDgu0sTlbdGHTC22jrHARM86Qg4YJeGZ7SdFSjehzJ09EynJMA64E02DkQA9cGqbJeeFXY5vdi2Wc3YqsA68E6wTI02zv8rAOrJd14MWyDqzGOuhKsI5J7DrgXx7WQfWyDrpY1kHVWAdfCdbRLeBr7uVhHVwv6+CLZR1cjXX0K8E6jq1pULs8rKPXyzr6xbJO/nUGwp6c+QoIG1JPgG3M84MYuqPh8p4KPuN0Bvq+HjIDnDODA8NwOedFdTO5AmLLOzSARg4kAhDPhu2YGsh+CXmGe0nMJ8HHefiph6lxFwUopL14W1OG8MfhiV+DfyJEDjK9Ol9SJb0yzjFcA2W/hCGWuuBbl6ZBPxZpWmpVkvy+vQDA0FjiBIGHKnyNwUez4BtAc4PlvotRcQ+Xxmn5owN16guEJp5JTSMwNLskNfNHB+qAwddnYo6xEZrlqSmmkKnZjXpRd9y90x9l304TOUN3qwpCWVJKseiZxMQWdU3rmjYLtusYjlvaZTUMRuNOPCsiPsupik1iE5H/27OQCK0AmDY/7fws02P7Fj3N/VH7uMN+aIkbECSeHZjYWknuAf92AHt5EQLHJ7khMBkCioYQM7qjiyGgzJDYMY6GuSEoGWIUDQlH+yeWGAIzQ/SiISd9c3AqhqBkCE6GwKIhXQ+OpsvHyRB9HsUi0IlPcoilQ1g2YW7MABmxm6PydEzhoL2hNw7FoOn+JqOnu5eAme4NaUBJA6c8acBp2IjRlTToSQOnGmkw0pQVRhPSYKaXBFsxabCSBr4cGWc73TWWWkBxFkE41s9xg076g/GxljITK4ctMQAkA3hydIkBMBnAyztLDEjpzt9hV2IATgbw2H2JAXoyoG0cukfKzoqUDJAtE4bZpHCULVvF2Rfy6dnX5LEZDgYnXDawJIrMtHE/O28S/RYuGvpcu/kVsIMepiDj00OztxikwFyABApIuAMESB5wXQhSZEtMQWqaAlSnuR9TTPsG8lWCM3JIBOeLkQguAsK5gzkZx9Yoi6QgXLl1A3XdvOZxIUix5wKkoYBEO4YA6TqH3r6yZo63tGZRfimWmB6aeNhmAXMFH7GgOfjoU3wgxUcX+PB83YUgi7ZWgUl3dsovJ8i3lUVyzKVFiuTh3CIDe3LsZjESSxIYiXMlMIJThNDNr+AdKPDZt4bOWMGHTyJPn0oy/kbOzPRisjkEkU4kpvSYnshudNzvqHyevgs0N/3+5OSU74d4lArlMNRPEHv0xS9+MRXp03NEOpH2VHJPeY23pwJ6uj28PZXDUzLx9lTcTvHn7alUneKaYNcJbD8qVCZyO7w3MCDM3dWgqGt3b2yMRFc97apezWln96B/rJ4tjpR8ttjUkjzhExRe9NHBsF0Oy4neNcKcimMUdW1P+hNPwZHPI+HIoRUNHu91k1tWnkcv6jpoH3mHBYQr6uvgfSdQcOITSThxcIWDR8HecU5Xg0Vd952TE6zMwwcXnYNTy7d6OfwL2ak9chxdAcsHF4F10GHXLz5egXcEuwoYzk+y0GKbJ3EPp5x0/fMlStc/R066/jkG6YYeh+0op4EiSWlHSTtO/tbz7G+kUjfSwnEOmJYBZmSAFYMCkxGYCUpLQOk5vIpgnTrdkbYQVrpGOA8tz3SNTmlQKVqoEFTomfrSoAqxcsz9nso4fFslxuFbI6sxjMAS43AqSYzD1yoxDse4CAH+Ll2KQOQ/6H89GMbBScp+TKflNultf//VaCQS1dhtQn1MSjM/Bbz5NSceRikkvkqmQE/6Y9bdORr5TFB541Hc774xiKN+b5TJcBv9FbsgA1/yHo5eiobcvyny9aduL7KOlHO6GHWKDytP4C++JlkGHn3EEu9UbFgJQ6ZyYRqNmO6hSAvLSZA+iiM8084utIB5ZQYdkugHsqYrvVdNQTWp3VDaWKGJ0jJMlA+pSbF2+Bu/psThte0qKkLHXg8qKSEn9tAPM6gI7X49qIj7e+8whOXuVf4e0gwBU+V2vVj32iixHaeoCLV6PaikHH4EI/+w0C2U12GCo/ZJBmth8awX63097EwU1SV32qMgSozKKbbCdlgvtqPwdNhRNKIctvzDohlBk5oa68WWv349I6AfJX7exDXKhSwBMCaDw6jH413JBKSZ+mV5SxgZTC6/7jB37u5xt9tnjrFXemRcFLPTt7t3OmD+vK2bSjOV9eYw3mPvou/0XV76R5vD3gm7Rba+Hp2mbT4EexF3FB+OyTWVtu8fTKJ+gVucPgvioMMu8jd4FCdpnpxMJkcsZj3uefRuTB8cDfYCNu/t4dARSB6AaMzS4V8fd91gKJB0MdOa6UaNgpc7fUdMcKD7YCIevdITDwgBY0bCr/b7ncARE08iHTNY2+Rm7+2lze3wgK95e9J1+4I8+ydExDBvuhMLOvQ0hIY82NLvRiPRfnKQaAX3g727JwOB4j7o7rPA03DYF2saTjrtMSPA3t4w2CPglceBd9pjaN4lfKw8OT7ed3tsFqe3pw7y9z3rhCMQBoSlPfXx4HRvmKyxFzsnyrOR5iFmHD8gzKk88Q7cAfUAbb15/xX1wf4xpmbP1n/c5iEGxmbI0JnxTTSntqAinpy6nFdjQVq/7wz2BQd8dRyG0w0fGCdHbCG3iVIVeSPBNb51ypj+zagXWwrr7PfivXEyh/okHB44h+kgYCjPHM0cdJJRmUeH49ORlw5DUOXTod32kmGZR8NO6LF4CGPTzMNuZ+wA8dDAysM2Nvdjsbg7Hac7CHylxyRsY6Y+fzXao50yAPwYjXDy+JXc08iONS9hZefrUXAs5vUMy+BbJng2ciPHnYISvBd0eLBnOxBtvaBvMrT/KnAOJBAH7W7XTtul/hEcGMfJ6TkR2LkdnR80wrodSYAcEtHJ+OnlqOd0olOHChFyvoi6PpySVYtBO52KABD0MmMeiPYDr+8HhIHFmoOJ7SlP7vS7g34vmK71CACTnXJyjtTBY70fqk9ygw+JZcHgByPPGQgJcawbR4CLe/VBv+d4zNMWHE1l81CnlQ80M3/0MpXlond8arQd/iC9DqgK4Y7jgyTjZkRkngBz1AvYAd5uk3vOLzhuka9FA04/9/ZoFHTdTkrbNHKnyOk0Nqc0ptE3pTGNrymNaQRNaUxjZEpjGgVTGtM4l9KYBrKUxjRQpc6eug3JjXcrsRTVkE/+iXAd5p4I52HuiXAf5p4IB2LuSRp/UW/RNELC+t9NyoClMEe2PY1V5PonwQaFHGnMINs5dfxn21PvvbrNiVc+2zl1recwTLzjCpDU653tnLqu1V1MfNTZzqmjWemcepRVCIkvWaV16sNV+Sjx1qq8mfhllcbU/6oOT9yoKt0Th6nSmLpGlcbU5anye+LcVBpTL6bamHgnVYokfkilMXU4qiglrkUVZuJDVPcv8R6qBE39e0rX1E+nNiYeNxWnxHWmiprECaY2Ju4sFdHEMaWKr8RZxHjnXvppJsn7wrJotlQPjLr3ie9FZajE68LA/mUgbsLUsaJ0Tn0oSmPqJREQXifXy5bqtih6lvoRCp8lhr1Kq8SELxqQ2tRFz1IjV+XPxJwtGpDal6oATyzKogGpiacMSI26ogGplZUMeCSST15JzLG3mCG+M73MHiaOqp3pVfYwcUPuTC+yh4kjcmd6jT1MXJE700vsYZKesDO9wh4mCQo70wvsYZKisDO9vmiTnTbxy4s2AS1t43cXaxP4i3izHIOVg5VymFCO2cnROvnLY7J7VHaIyhE12VMnu8pkX5UcaZPjubJjQ466yR4j2WUjR+BkN4McgZMNeiHbb6ieWzlyIcfA5PCXHPmSAxtyPEoORcmxDjk+JIeG5PCHHNuRoyBycEaI0huqg1l2oMu+c9ltLnvMZWe5EIWMdwS/ctnG2gTDctnG2gTHiuptIebYc8GrXJqxMyTGcGHGDpE4RVyWsVMkeJrLMNYmxnLZxQ7NtI3JLHZqpqeSiSx2bAQ8LqoYflA0chnFGpE4OVxG8dWLRi6ceKOYmwsnvmbRyKUSW7QmMOJSiTVOl83FEc3x26K2AVPHO85o1KJXSuutb/Ra5M8LL7RO219qnf/ik7PPvnX+o4/P3/vd08d/c/4/vv3/Pn337Lc/PfvmR//69rvnH/3m7J3vPfvzv/zr2+89/dm3n3z607PvvPP0j7/+/Kf/cPbOTwSgoPelltcfBi2fmHUtXvQ9HgY3WoNh1B9G8aR1OA7GQSvuk4e03ze2vGF/NIp6ey36SpnRN7Y4LKlk/Br7XuH1FF36J25Ho1usufVii/395czDwSF5QoXzLW8YOHFwjWYHX2PfU7rBZoLXWy9+hf0LJBmqrZv8QfLzugSSrOw/HEWjMbX5ghb3WbXIFMlUSkdKy6f/+/GTTz9tkSHETvJbhKhPH3+bku1PP3/6tx8Ruj773cdnf/rR2d/85skfP3z21998+s1/OfvD/3n6+Afn73zw5JM/nv/87bOPf/D0b/+B/Dz/xQ/pwE/e/vxbH529811lKkrtUdSNOs6QUjSdzqF3z43WkBiTQ59S9rgdee1Wj3DAqNV2joKWSx51g9bAGcatfkiWEbRe236QISGrwG692AuOW+w24/twi7sPr98Ko07nGksPX0gpDmkKNEcvTo78ss///luff++9s//+bm7ZfHEM89G4SxfBd200ez3TjG3CGhrBOYfG5z/7wZM/f/bk8fuE3E8++Q3dlU/fPvv1fyOcT0j/+bf+dPaD3z95/Euyf+fv/PDJ4//15JP3zn71EenPt7CltXj/HLaT/rjlOT3C85Ti3jiO6bbQfJaW05u0Bv2oF99odYL4C6OkD3tGd6ylFW3LjvaQLIKG6rKMT4Bf064XrY5ge/7j3z777MNn//guXxE94B/8MEP2J5/89vwPj8/++hfksOcWchAEA4G/0yO85vvi7FIezJGe8F4naF37i+So3IpGd7uDeHLtunKgxZFnkOjSku6D/uCazF/TjoxCL7L+t+i/b0V+YT+CVNIr7s/qkwiApB//lekYha1rEv3j/sPcAmSG5gxB5ubn+uznH+XJTOXAH/752WffKwRDyc0Y4Atx/wutaNRyOkSS+RNymlIq32iNDqLBTCTOPvjV2Tt/9+yzvzv/+38km/nk0589+eOvCQJP3//9zBn7BPTwOKI1H3S1fDuO++OO3+KCtOW0vInXCQohSEefBSNaX2TjkxfM5IcQ6hNOUpiY/nmk/kyX8/F3ySo4RoQ9z77zywxJc6PoggiD8iFFzFkkG/79i61CBlA3P3/6FpCAf8y5RHcuZXePrlGmvi79jvvXp2AKKSRxHaPP2QfvUx5jJ/78xx8TqfbsT78TR1/ww/mH//fsn34mbvhiMoZxMMzwo+8HPrnZg2HYHxJB1qI3xbA/JlKhHxYCSQTHDc5KVG50qQ6Q0QDyVKcyjaxeInbCIY9SQkxZpDVq0YsjXQwnBFdXCnQVyh2UK1QU6B0ipJmquSTaCUFopJz/9Ab5r++dvZ/g8Pk3HxeJ0HhIbuDhKGDAe5TT3P5QnXo6hlC2dU3IMXa1pZrPrXTsiKCSk0XzWCu4NrrBmMnzkePDVeTc0w8/Ics8f/+XtUg7iRhXX/LliF2LDORyL+VumaML5F7CwQpzy2yc0ZhvDcaj9jUJbwLgeolTt1BvSzl/sbIm5PA1heuGAbEiellR/eUZQuCdfyJ6Tgap85/+njLFu985++B/nn34Z8KPFM3vv33+8+9zqamaMO3AO6BHIUGObZIT9SgrdvjBZcp0wpCMZByAXCw6ew3sbN0KiByYXBMVydQeET+uTxf3iClzYRKybknh7oxllG7H939N5D038Z7+7ifn//wjZW3BSUDEV8Cef4EuaI+Kt3ZXsruozKO6FRXotFsyj1AqqYz4i0G2Njaj0hUzx/lPfkEQevar7z798Md58meYJVlqazRwej3KwPEwCKgi3esTLbpPyMf2g+1FjtA3QZY/kgcDpSiRaZesyxGxolKbkvlhE9MxzY1jbS+TS5k6+EfXdjhQVqrHXtU2/Q1ZHWzyG+R/I/aevuQ3ZL918Zv8wOxFaslv8kOX4UP2G2jyhKxBe/iN3kO6GmJHtHhVHVlJnl2+zHNFul2eZbKzA0wyJa023ME2reKkNe47wNboSxptaPFfiL4h1LZovd0ONFiBN61N3UEaXRAfjnSKPNLL9tFpu47YDDp936Zu8HaTLNrgeJTpY+gG+TfHzbCtGy3TMOa1W5DAsXTA/k2LTm325tOZ7QAjgxZk6pwWmL7QDWCbPwMJ0TD/ZbNCcr4+AHW69dDg46BF9wkhxH4hnXIOstDCGXSLLBUkawUGouMMi/8yKXmAifjsJntpqaUxqgOLvU/S0u0aoczlCpOsARp8z8nfrIKZrxZqgLKDBg3+C+n0l8lmh4C+6xSSKdgvtslQZ28PIL/oNhNe4r8gpRKEBocJLXrWyLXKfjHGIh04LsiiPTFfEcS0HBZiGy+cYd4aTJtibUGN/bIg+2XhRc+QRmmGNJj8gjb9ZbCeCNAVIaAb/JdBjzokUKgjj4id8XBEZD5NV3rFT0vcgxOiQrJQAot60ULiKO6IeuvcdcyuAFYrQ7vtBj3R87VEvm6n8vUBla+30xuBJaMFwy5Ra3osvvQC9erdFF69F6gkfYGX2FLPE6/tIxKTjGdBkHgcE0hOZ+vRo0f/HzpetjKilgEA'\n    } class Prim {\n    // 核心数据结构，存储「横切边」的优先级队列\n    constructor(graph) {\n        this.graph = graph;\n        this.pq = Heap.create([], (edge1, edge2) => edge1.weight - edge2.weight);\n        // @visualize global pq this.pq\n        // 类似 visited 数组的作用，记录哪些节点已经成为最小生成树的一部分\n        this.inMST =new Array(graph.length).fill(false);\n        // @visualize global inMST this.inMST\n        // 记录最小生成树的权重和\n        this.weightSum_ = 0;\n\n        // 随便从一个点开始切分都可以，我们不妨从节点 0 开始\n        this.inMST[0] = true;\n        this.cut(0);\n\n        // 不断进行切分，向最小生成树中添加边\n        while (!this.pq.isEmpty()) {\n            const edge = this.pq.pop();\n            const from = edge.from.id;\n            const to = edge.to.id;\n            const weight = edge.weight;\n            if (this.inMST[to]) {\n                // 节点 to 已经在最小生成树中，跳过\n                // 否则这条边会产生环\n                // @visualize color *edge #c3364b\n                continue;\n            }\n            // 将边 edge 加入最小生成树\n            this.weightSum_ += weight;\n            this.inMST[to] = true;\n            // @visualize color *edge #167e24\n            // @visualize color *graph._v(from) *graph._v(to) #167e24\n\n            // 节点 to 加入后，进行新一轮切分，会产生更多横切边\n            this.cut(to);\n        }\n    }\n\n    // 将 s 的横切边加入优先队列\n    cut(s) {\n        // 遍历 s 的邻边\n        for (const to of this.graph.neighbors(s)) {\n            // @visualize color *graph._e(s,to) #cd3ad2\n            if (this.inMST[to]) {\n                // 相邻接点 to 已经在最小生成树中，跳过\n                // 否则这条边会产生环\n                // @visualize color *graph._e(s,to) #c3364b\n                continue;\n            }\n            // 加入横切边队列\n            this.pq.push(graph._e(s, to));\n        }\n    }\n\n    // 最小生成树的权重和\n    weightSum() {\n        return this.weightSum_;\n    }\n\n    // 判断最小生成树是否包含图中的所有节点\n    allConnected() {\n        return this.inMST.every(connected => connected);\n    }\n};\n\nfunction minimumCost(graph) {\n    // 执行 Prim 算法\n    const prim = new Prim(graph);\n\n    if (!prim.allConnected()) {\n        // 最小生成树无法覆盖所有节点\n        return -1;\n    }\n\n    return prim.weightSum();\n}\n\nvar graph = Graph.createDirectedGraphFromEdges([\n    [0, 1, 3],\n    [0, 2, 1],\n    [1, 2, 1],\n    [1, 3, 6],\n    [2, 3, 5],\n    [3, 4, 2],\n    [4, 5, 3],\n    [2, 5, 10],\n    [0, 5, 100]\n]);\nlet result = minimumCost(graph);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}