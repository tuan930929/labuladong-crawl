{
    "url": "https://labuladong.online/algo-visualize/tutorial/dijkstra-example/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } class State {\n    constructor(id, distFromStart) {\n        this.id = id;\n        this.distFromStart = distFromStart;\n        this.val = `${id}[${distFromStart}]`;\n    }\n}\n\n// 输入一个起点 start，计算从 start 到其他节点的最短距离\nvar dijkstra = function(start, graph) {\n    // 定义：distTo[i] 的值就是起点 start 到达节点 i 的最短路径权重\n    let distTo = Array(graph.size()).fill(Infinity);\n    // base case，start 到 start 的最短距离就是 0\n    distTo[start] = 0;\n    // @visualize unbind distTo[start]\n    \n    // 优先级队列，distFromStart 较小的排在前面\n    let pq = Heap.create([], (s1, s2) => s1.distFromStart - s2.distFromStart);\n    // 从起点 start 开始进行 BFS\n    pq.push(new State(start, 0));\n    \n    while (!pq.isEmpty()) {\n        let cur = pq.pop();\n        let curNodeID = cur.id;\n        let curDistFromStart = cur.distFromStart;\n        \n        if (curDistFromStart > distTo[curNodeID]) {\n            continue;\n        }\n        \n        // 将 curNode 的相邻节点装入队列\n        for (let nextNodeID of graph.neighbors(curNodeID)) {\n            // @visualize color *graph._e(curNodeID,nextNodeID) #e77427\n            let weight = graph.weight(curNodeID, nextNodeID);\n            let distToNextNode = distTo[curNodeID] + weight;\n            // 更新最短距离的备忘录\n            if (distTo[nextNodeID] > distToNextNode) {\n                // @visualize color *graph._v(nextNodeID) #7ed67e\n                distTo[nextNodeID] = distToNextNode;\n                pq.push(new State(nextNodeID, distToNextNode));\n            }\n        }\n    }\n    return distTo;\n};\n\nlet graph = Graph.createDirectedGraphFromEdges([\n    [0, 1, 2],\n    [0, 2, 1],\n    [1, 3, 3],\n    [1, 4, 2],\n    [2, 5, 1],\n    [2, 6, 6],\n    [3, 6, 4],\n    [6, 0, 3],\n    [3, 0, 1],\n    [5, 4, 5],\n]);\n\nlet start = 0;\nlet distTo = dijkstra(0, graph, start);\nfor (let i = 0; i < distTo.length; i++) {\n    console.log(`${start} -> ${i} = ${distTo[i]}`);\n}\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}