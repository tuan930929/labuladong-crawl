{
    "url": "https://labuladong.online/algo-visualize/leetcode/palindrome-linked-list/",
    "title": "回文链表 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } var isPalindrome = function(head) {\n\n    // 先用快慢双指针找到单链表中点\n    let slow = head, fast = head;\n    while (fast != null && fast.next != null) {\n        slow = slow.next;\n        fast = fast.next.next;\n    }\n    if (fast != null) {\n        slow = slow.next;\n    }\n\n    // 将后半部分链表反转\n    let left = head;\n    let right = reverse(slow);\n\n    // 现在 left, right 同向而行就能判断回文了\n    while (right != null) {\n        if (left.val !== right.val) {\n            return false;\n        }\n        left = left.next;\n        right = right.next;\n    }\n\n    return true;\n};\n\nvar reverse = function(head) {\n    let pre = null, cur = head;\n    while (cur != null) {\n        // @visualize color *cur #6c8c3f\n        let next = cur.next;\n        cur.next = pre;\n        pre = cur;\n        cur = next;\n    }\n    return pre;\n};\n\n\nlet result = isPalindrome(LinkedList.createHead([1,2,3,4,4,3,2,1]));\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}