{
    "url": "https://labuladong.online/algo/problem-set/trie/",
    "title": "【练习】Trie 树算法习题 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->【练习】Trie 树算法习题</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 899 字</span><meta property=\"wordCount\" content=\"899\"></span></div><hr></div> <h1><!---->【练习】Trie 树算法习题</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 899 字</span><meta property=\"wordCount\" content=\"899\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 899 字</span><meta property=\"wordCount\" content=\"899\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 899 字</span> <meta property=\"wordCount\" content=\"899\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. 实现 Trie （前缀树） II https://leetcode.cn/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. 实现 Trie (前缀树) https://leetcode.cn/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. 添加与搜索单词 - 数据结构设计 https://leetcode.cn/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. 单词替换 https://leetcode.cn/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. 键值映射 https://leetcode.cn/problems/map-sum-pairs </h3><h3 tabindex=\"-1\"> 剑指 Offer II 063. 替换单词 https://leetcode.cn/problems/UhWRSj </h3><h3 tabindex=\"-1\"> 剑指 Offer II 066. 单词之和 https://leetcode.cn/problems/z1R5dt </h3><h3 tabindex=\"-1\"> 剑指 Offer II 062. 实现前缀树 https://leetcode.cn/problems/QC3q1f </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a></li></ul></div><p>有了 <code>TrieMap</code> 和 <code>TrieSet</code>，力扣上所有前缀树相关的题目都可以直接套用了，下面我举几个题目实践一下。</p><div class=\"hint-container info\"><p class=\"hint-container-title\">可以尝试优化</p><p><strong>首先，前文 <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> 给出的 <code>TrieMap/TrieSet</code> 执行效率在具体的题目里面肯定是有优化空间的</strong>。</p><p>比如力扣前缀树相关题目的输入都被限制在小写英文字母 <code>a-z</code>，所以 <code>TrieNode</code> 其实不用维护一个大小为 256 的 <code>children</code> 数组，大小设置为 26 就够了，可以减小时间和空间上的复杂度。</p><p>另外，之前给出的 Java/cpp 代码带有泛型，在做算法题的时候其实不需要，去掉泛型也可以获得一定的效率提升。</p></div><h3 id=\"_208-实现-trie-前缀树\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-%E5%AE%9E%E7%8E%B0-trie-%E5%89%8D%E7%BC%80%E6%A0%91\"><span>208. 实现 Trie (前缀树)</span></a></h3><p>先看下力扣第 208 题「<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">实现前缀树</a>」：</p><details class=\"hint-container details\" open><summary><strong>208. 实现 Trie (前缀树)</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟠</summary><div><p><strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\n\n<p>请你实现 Trie 类：</p>\n\n<ul>\n\t<li><code>Trie()</code> 初始化前缀树对象。</li>\n\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\n\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n\n\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\n\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\">力扣 208. 实现 Trie (前缀树)</a>。</strong></details><p>题目让我们实现的几个函数其实就是 <code>TrieSet</code> 的部分 API，所以直接封装一个 <code>TrieSet</code> 就能解决这道题了：</p><h3 class=\"hidden-for-toc\" id=\"_648-单词替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2\"><span>648. 单词替换</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_211-添加与搜索单词-数据结构设计\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1\"><span>211. 添加与搜索单词 - 数据结构设计</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_1804-实现一个-trie-前缀树-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie-%E5%89%8D%E7%BC%80%E6%A0%91-ii\"><span>1804. 实现一个 Trie (前缀树 II)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_677-键值映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84\"><span>677. 键值映射</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. 实现 Trie （前缀树） II https://leetcode.cn/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. 实现 Trie (前缀树) https://leetcode.cn/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. 添加与搜索单词 - 数据结构设计 https://leetcode.cn/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. 单词替换 https://leetcode.cn/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. 键值映射 https://leetcode.cn/problems/map-sum-pairs </h3><h3 tabindex=\"-1\"> 剑指 Offer II 063. 替换单词 https://leetcode.cn/problems/UhWRSj </h3><h3 tabindex=\"-1\"> 剑指 Offer II 066. 单词之和 https://leetcode.cn/problems/z1R5dt </h3><h3 tabindex=\"-1\"> 剑指 Offer II 062. 实现前缀树 https://leetcode.cn/problems/QC3q1f </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a></li></ul></div><p>有了 <code>TrieMap</code> 和 <code>TrieSet</code>，力扣上所有前缀树相关的题目都可以直接套用了，下面我举几个题目实践一下。</p><div class=\"hint-container info\"><p class=\"hint-container-title\">可以尝试优化</p><p><strong>首先，前文 <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> 给出的 <code>TrieMap/TrieSet</code> 执行效率在具体的题目里面肯定是有优化空间的</strong>。</p><p>比如力扣前缀树相关题目的输入都被限制在小写英文字母 <code>a-z</code>，所以 <code>TrieNode</code> 其实不用维护一个大小为 256 的 <code>children</code> 数组，大小设置为 26 就够了，可以减小时间和空间上的复杂度。</p><p>另外，之前给出的 Java/cpp 代码带有泛型，在做算法题的时候其实不需要，去掉泛型也可以获得一定的效率提升。</p></div><h3 id=\"_208-实现-trie-前缀树\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-%E5%AE%9E%E7%8E%B0-trie-%E5%89%8D%E7%BC%80%E6%A0%91\"><span>208. 实现 Trie (前缀树)</span></a></h3><p>先看下力扣第 208 题「<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">实现前缀树</a>」：</p><details class=\"hint-container details\" open><summary><strong>208. 实现 Trie (前缀树)</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟠</summary><div><p><strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\n\n<p>请你实现 Trie 类：</p>\n\n<ul>\n\t<li><code>Trie()</code> 初始化前缀树对象。</li>\n\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\n\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n\n\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\n\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\">力扣 208. 实现 Trie (前缀树)</a>。</strong></details><p>题目让我们实现的几个函数其实就是 <code>TrieSet</code> 的部分 API，所以直接封装一个 <code>TrieSet</code> 就能解决这道题了：</p><h3 class=\"hidden-for-toc\" id=\"_648-单词替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2\"><span>648. 单词替换</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_211-添加与搜索单词-数据结构设计\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1\"><span>211. 添加与搜索单词 - 数据结构设计</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_1804-实现一个-trie-前缀树-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie-%E5%89%8D%E7%BC%80%E6%A0%91-ii\"><span>1804. 实现一个 Trie (前缀树 II)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_677-键值映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84\"><span>677. 键值映射</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. 实现 Trie （前缀树） II https://leetcode.cn/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. 实现 Trie (前缀树) https://leetcode.cn/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. 添加与搜索单词 - 数据结构设计 https://leetcode.cn/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. 单词替换 https://leetcode.cn/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. 键值映射 https://leetcode.cn/problems/map-sum-pairs </h3><h3 tabindex=\"-1\"> 剑指 Offer II 063. 替换单词 https://leetcode.cn/problems/UhWRSj </h3><h3 tabindex=\"-1\"> 剑指 Offer II 066. 单词之和 https://leetcode.cn/problems/z1R5dt </h3><h3 tabindex=\"-1\"> 剑指 Offer II 062. 实现前缀树 https://leetcode.cn/problems/QC3q1f </h3></div> <h3 tabindex=\"-1\"> 1804. 实现 Trie （前缀树） II https://leetcode.cn/problems/implement-trie-ii-prefix-tree </h3> <h3 tabindex=\"-1\"> 208. 实现 Trie (前缀树) https://leetcode.cn/problems/implement-trie-prefix-tree </h3> <h3 tabindex=\"-1\"> 211. 添加与搜索单词 - 数据结构设计 https://leetcode.cn/problems/design-add-and-search-words-data-structure </h3> <h3 tabindex=\"-1\"> 648. 单词替换 https://leetcode.cn/problems/replace-words </h3> <h3 tabindex=\"-1\"> 677. 键值映射 https://leetcode.cn/problems/map-sum-pairs </h3> <h3 tabindex=\"-1\"> 剑指 Offer II 063. 替换单词 https://leetcode.cn/problems/UhWRSj </h3> <h3 tabindex=\"-1\"> 剑指 Offer II 066. 单词之和 https://leetcode.cn/problems/z1R5dt </h3> <h3 tabindex=\"-1\"> 剑指 Offer II 062. 实现前缀树 https://leetcode.cn/problems/QC3q1f </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">本文讲解的例题</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table></div> <p class=\"hint-container-title\">本文讲解的例题</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">力扣</th><th style=\"text-align:center;\">难度</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">力扣</th> <th style=\"text-align:center;\">难度</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr><tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>🔒</td> <a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a>🔒</td> <a href=\"https://leetcode.cn/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. 实现 Trie （前缀树） II</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td> <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></td> <a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td> <a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a></td> <a href=\"https://leetcode.cn/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. 添加与搜索单词 - 数据结构设计</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td> <a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a></td> <a href=\"https://leetcode.cn/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. 单词替换</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td> <a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a></td> <a href=\"https://leetcode.cn/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. 键值映射</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\">-</td> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a></td> <a href=\"https://leetcode.cn/problems/z1R5dt/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 066. 单词之和</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\">-</td> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a></td> <a href=\"https://leetcode.cn/problems/QC3q1f/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 062. 实现前缀树</a> <td style=\"text-align:center;\">🟠</td> <tr><td style=\"text-align:center;\">-</td><td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td><td style=\"text-align:center;\">🟠</td></tr> <td style=\"text-align:center;\">-</td> <td style=\"text-align:center;\"><a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a></td> <a href=\"https://leetcode.cn/problems/UhWRSj/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer II 063. 替换单词</a> <td style=\"text-align:center;\">🟠</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/trie-map-basic/\">Trie 树原理</a> <li><a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a></li> <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> <p>有了 <code>TrieMap</code> 和 <code>TrieSet</code>，力扣上所有前缀树相关的题目都可以直接套用了，下面我举几个题目实践一下。</p> <code>TrieMap</code> <code>TrieSet</code> <div class=\"hint-container info\"><p class=\"hint-container-title\">可以尝试优化</p><p><strong>首先，前文 <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> 给出的 <code>TrieMap/TrieSet</code> 执行效率在具体的题目里面肯定是有优化空间的</strong>。</p><p>比如力扣前缀树相关题目的输入都被限制在小写英文字母 <code>a-z</code>，所以 <code>TrieNode</code> 其实不用维护一个大小为 256 的 <code>children</code> 数组，大小设置为 26 就够了，可以减小时间和空间上的复杂度。</p><p>另外，之前给出的 Java/cpp 代码带有泛型，在做算法题的时候其实不需要，去掉泛型也可以获得一定的效率提升。</p></div> <p class=\"hint-container-title\">可以尝试优化</p> <p><strong>首先，前文 <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> 给出的 <code>TrieMap/TrieSet</code> 执行效率在具体的题目里面肯定是有优化空间的</strong>。</p> <strong>首先，前文 <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> 给出的 <code>TrieMap/TrieSet</code> 执行效率在具体的题目里面肯定是有优化空间的</strong> <a class=\"route-link\" href=\"/algo/data-structure/trie-implement/\">TrieMap/TrieSet 代码实现</a> <code>TrieMap/TrieSet</code> <p>比如力扣前缀树相关题目的输入都被限制在小写英文字母 <code>a-z</code>，所以 <code>TrieNode</code> 其实不用维护一个大小为 256 的 <code>children</code> 数组，大小设置为 26 就够了，可以减小时间和空间上的复杂度。</p> <code>a-z</code> <code>TrieNode</code> <code>children</code> <p>另外，之前给出的 Java/cpp 代码带有泛型，在做算法题的时候其实不需要，去掉泛型也可以获得一定的效率提升。</p> <h3 id=\"_208-实现-trie-前缀树\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-%E5%AE%9E%E7%8E%B0-trie-%E5%89%8D%E7%BC%80%E6%A0%91\"><span>208. 实现 Trie (前缀树)</span></a></h3> <a class=\"header-anchor\" href=\"#_208-%E5%AE%9E%E7%8E%B0-trie-%E5%89%8D%E7%BC%80%E6%A0%91\"><span>208. 实现 Trie (前缀树)</span></a> <span>208. 实现 Trie (前缀树)</span> <p>先看下力扣第 208 题「<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">实现前缀树</a>」：</p> <a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">实现前缀树</a> <details class=\"hint-container details\" open><summary><strong>208. 实现 Trie (前缀树)</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟠</summary><div><p><strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\n\n<p>请你实现 Trie 类：</p>\n\n<ul>\n\t<li><code>Trie()</code> 初始化前缀树对象。</li>\n\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\n\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n\n\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\n\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\n</ul>\n</div><strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\">力扣 208. 实现 Trie (前缀树)</a>。</strong></details> <summary><strong>208. 实现 Trie (前缀树)</strong> | <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span>  🟠</summary> <strong>208. 实现 Trie (前缀树)</strong> <span><a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> | </span> <a target=\"_blank\" href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">力扣<!----></a> <span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> <a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> <div><p><strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\n\n<p>请你实现 Trie 类：</p>\n\n<ul>\n\t<li><code>Trie()</code> 初始化前缀树对象。</li>\n\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\n\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n\n\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre>\n\n\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\n\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\n</ul>\n</div> <p><strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong>（发音类似 \"try\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p> <strong><a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a></strong> <a href=\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E6%A0%91/9825209?fr=aladdin\" target=\"_blank\">Trie</a> <strong>前缀树</strong> <p>请你实现 Trie 类：</p> <ul>\n\t<li><code>Trie()</code> 初始化前缀树对象。</li>\n\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\n\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul> <li><code>Trie()</code> 初始化前缀树对象。</li> <code>Trie()</code> <li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li> <code>void insert(String word)</code> <code>word</code> <li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li> <code>boolean search(String word)</code> <code>word</code> <code>true</code> <code>false</code> <li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li> <code>boolean startsWith(String prefix)</code> <code>word</code> <code>prefix</code> <code>true</code> <code>false</code> <p><strong>示例：</strong></p> <strong>示例：</strong> <pre>\n<strong>输入</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>输出</strong>\n[null, null, true, false, true, null, true]\n\n<strong>解释</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 True\ntrie.search(\"app\");     // 返回 False\ntrie.startsWith(\"app\"); // 返回 True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // 返回 True\n</pre> <strong>输入</strong> <strong>输出</strong> <strong>解释</strong> <p><strong>提示：</strong></p> <strong>提示：</strong> <ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\n\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\n</ul> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <code>1 &lt;= word.length, prefix.length &lt;= 2000</code> <li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li> <code>word</code> <code>prefix</code> <li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li> <code>insert</code> <code>search</code> <code>startsWith</code> <strong>总计</strong> <code>3 * 10<sup>4</sup></code> <sup>4</sup> <strong style=\"font-size:small;\">题目来源：<a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\">力扣 208. 实现 Trie (前缀树)</a>。</strong> <a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\">力扣 208. 实现 Trie (前缀树)</a> <p>题目让我们实现的几个函数其实就是 <code>TrieSet</code> 的部分 API，所以直接封装一个 <code>TrieSet</code> 就能解决这道题了：</p> <code>TrieSet</code> <code>TrieSet</code> <h3 class=\"hidden-for-toc\" id=\"_648-单词替换\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2\"><span>648. 单词替换</span></a></h3> <a class=\"header-anchor\" href=\"#_648-%E5%8D%95%E8%AF%8D%E6%9B%BF%E6%8D%A2\"><span>648. 单词替换</span></a> <span>648. 单词替换</span> <h3 class=\"hidden-for-toc\" id=\"_211-添加与搜索单词-数据结构设计\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1\"><span>211. 添加与搜索单词 - 数据结构设计</span></a></h3> <a class=\"header-anchor\" href=\"#_211-%E6%B7%BB%E5%8A%A0%E4%B8%8E%E6%90%9C%E7%B4%A2%E5%8D%95%E8%AF%8D-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1\"><span>211. 添加与搜索单词 - 数据结构设计</span></a> <span>211. 添加与搜索单词 - 数据结构设计</span> <h3 class=\"hidden-for-toc\" id=\"_1804-实现一个-trie-前缀树-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie-%E5%89%8D%E7%BC%80%E6%A0%91-ii\"><span>1804. 实现一个 Trie (前缀树 II)</span></a></h3> <a class=\"header-anchor\" href=\"#_1804-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-trie-%E5%89%8D%E7%BC%80%E6%A0%91-ii\"><span>1804. 实现一个 Trie (前缀树 II)</span></a> <span>1804. 实现一个 Trie (前缀树 II)</span> <h3 class=\"hidden-for-toc\" id=\"_677-键值映射\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84\"><span>677. 键值映射</span></a></h3> <a class=\"header-anchor\" href=\"#_677-%E9%94%AE%E5%80%BC%E6%98%A0%E5%B0%84\"><span>677. 键值映射</span></a> <span>677. 键值映射</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/data-structure/trie-implement/\" aria-label=\"Trie 树代码实现\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->Trie 树代码实现</div></a><a class=\"route-link auto-link next\" href=\"/algo/data-structure/design-twitter/\" aria-label=\"设计朋友圈时间线功能\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">设计朋友圈时间线功能<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/data-structure/trie-implement/\" aria-label=\"Trie 树代码实现\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->Trie 树代码实现</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Trie 树代码实现</div> <a class=\"route-link auto-link next\" href=\"/algo/data-structure/design-twitter/\" aria-label=\"设计朋友圈时间线功能\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">设计朋友圈时间线功能<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">设计朋友圈时间线功能<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}