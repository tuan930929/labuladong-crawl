{
    "url": "https://labuladong.online/algo-game/zh/maze/",
    "title": "迷宫游戏 | labuladong.online",
    "content": "<div class=\"content-container horizontal-layout\"><div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div></div> <div class=\"resizable-panel vertical  \"><div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div><div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"width:55.00000000000001%\"><div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div></div> <div class=\"left-panel\"><div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div></div> <div class=\"game-component-container\" style=\"width:100%;height:100%;overflow:hidden;display:flex;justify-content:center;align-items:center;position:relative;padding:5px;box-sizing:border-box\"><div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div></div> <div style=\"transform:scale(1);transform-origin:center center;transition:transform 0.2s ease-in-out;max-width:none;max-height:none;display:flex;justify-content:center;align-items:center\" data-scale=\"1\"><!--$!--><template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template><div>loading...</div><!--/$--></div> <template data-dgst=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\"></template> <div>loading...</div> <div class=\"resizer vertical\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"width:44.99999999999999%\"><div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div></div> <div class=\"right-panel\"><div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div></div> <div class=\"resizable-panel horizontal  \"><div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div><div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div><div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div></div> <div class=\"panel-section first\" style=\"height:30%\"><div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div></div> <div class=\"question-container\"><div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div><div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div></div> <div class=\"question-header sticky\"><h4>题目</h4><div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div></div> <h4>题目</h4> <div class=\"header-buttons\"><a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a></div> <a href=\"https://labuladong.online/algo/game/maze/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"solution-button\">解法</a> <div class=\"question-content\"><p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p>\n<h3>游戏规则</h3>\n<ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul>\n<h3>你的任务</h3>\n<p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p>\n<h3>输入</h3>\n<p><code>gameController</code> 是一个对象，提供了以下方法：</p>\n<ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul>\n<h3>使用示例</h3>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<h3>算法提示</h3>\n<p>你可以使用以下算法来解决迷宫问题：</p>\n<ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul>\n<p>祝你好运！</p></div> <p>在这个迷宫游戏中，你需要实现一个算法来帮助角色从起点到达终点。</p> <h3>游戏规则</h3> <ul>\n<li>迷宫是一个二维网格，由墙壁和通路组成</li>\n<li>角色只能在通路中移动，不能穿过墙壁</li>\n<li>目标是从起始位置（绿色方块）到达终点（红色方块）</li>\n<li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li>\n</ul> <li>迷宫是一个二维网格，由墙壁和通路组成</li> <li>角色只能在通路中移动，不能穿过墙壁</li> <li>目标是从起始位置（绿色方块）到达终点（红色方块）</li> <li>你可以使用键盘方向键或点击屏幕按钮来手动控制角色移动</li> <h3>你的任务</h3> <p>实现一个 <code>solveMaze</code> 函数，通过操作 <code>gameController</code> 来自动解决迷宫问题。</p> <code>solveMaze</code> <code>gameController</code> <h3>输入</h3> <p><code>gameController</code> 是一个对象，提供了以下方法：</p> <code>gameController</code> <ul>\n<li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li>\n<li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li>\n<li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li>\n<li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li>\n<li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li>\n</ul> <li>\n<p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p>\n<ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul>\n</li> <p><code>isVisited(i, j)</code>: 判断坐标 (i, j) 处的单元格是否已访问</p> <code>isVisited(i, j)</code> <ul>\n<li>i 是行索引，j 是列索引，左上角为 (0, 0)</li>\n<li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li>\n<li>如果是墙壁或边界会抛出错误</li>\n</ul> <li>i 是行索引，j 是列索引，左上角为 (0, 0)</li> <li>返回 <code>true</code> 表示已访问，<code>false</code> 表示未访问</li> <code>true</code> <code>false</code> <li>如果是墙壁或边界会抛出错误</li> <li>\n<p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p>\n<ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul>\n</li> <p><code>isEmpty(i, j)</code>: 判断坐标 (i, j) 处的单元格是否为空（未访问的通路）</p> <code>isEmpty(i, j)</code> <ul>\n<li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li>\n</ul> <li>返回 <code>true</code> 表示是空的通路，<code>false</code> 表示已访问或是墙壁</li> <code>true</code> <code>false</code> <li>\n<p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p>\n<ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul>\n</li> <p><code>isBlock(i, j)</code>: 判断坐标 (i, j) 处是否为墙壁或边界</p> <code>isBlock(i, j)</code> <ul>\n<li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li>\n</ul> <li>返回 <code>true</code> 表示是墙壁或边界，<code>false</code> 表示是通路</li> <code>true</code> <code>false</code> <li>\n<p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p>\n<ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul>\n</li> <p><code>setVisited(i, j, visited)</code>: 设置坐标 (i, j) 处的访问状态</p> <code>setVisited(i, j, visited)</code> <ul>\n<li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li>\n<li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li>\n</ul> <li>visited 为 <code>true</code> 标记为已访问，<code>false</code> 标记为未访问</li> <code>true</code> <code>false</code> <li>注意：墙壁位置不能设置，操作无效位置会抛出错误</li> <li>\n<p><code>getPosition()</code>: 获取玩家当前位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li> <p><code>getPosition()</code>: 获取玩家当前位置</p> <code>getPosition()</code> <ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul> <li>返回 <code>{i: number, j: number}</code></li> <code>{i: number, j: number}</code> <li>\n<p><code>getTargetPosition()</code>: 获取终点位置</p>\n<ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul>\n</li> <p><code>getTargetPosition()</code>: 获取终点位置</p> <code>getTargetPosition()</code> <ul>\n<li>返回 <code>{i: number, j: number}</code></li>\n</ul> <li>返回 <code>{i: number, j: number}</code></li> <code>{i: number, j: number}</code> <li>\n<p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p>\n<ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul>\n</li> <p><code>setPosition(i, j)</code>: 移动玩家到指定位置</p> <code>setPosition(i, j)</code> <ul>\n<li>只能移动到相邻的格子（曼哈顿距离为1）</li>\n<li>不能跳跃移动，无效操作会抛出错误</li>\n</ul> <li>只能移动到相邻的格子（曼哈顿距离为1）</li> <li>不能跳跃移动，无效操作会抛出错误</li> <h3>使用示例</h3> <pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code></pre> <code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 获取当前玩家位置</span>\n<span class=\"hljs-keyword\">const</span> currentPos = gameController.<span class=\"hljs-title function_\">getPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"当前位置:\"</span>, currentPos);\n\n<span class=\"hljs-comment\">// 获取终点位置</span>\n<span class=\"hljs-keyword\">const</span> targetPos = gameController.<span class=\"hljs-title function_\">getTargetPosition</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">\"终点位置:\"</span>, targetPos);\n\n<span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span>\n<span class=\"hljs-keyword\">if</span> (gameController.<span class=\"hljs-title function_\">isEmpty</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>)) {\n  <span class=\"hljs-comment\">// 移动到右边</span>\n  gameController.<span class=\"hljs-title function_\">setPosition</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// 标记为已访问</span>\n  gameController.<span class=\"hljs-title function_\">setVisited</span>(currentPos.<span class=\"hljs-property\">i</span>, currentPos.<span class=\"hljs-property\">j</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);\n}\n</code> <span class=\"hljs-comment\">// 获取当前玩家位置</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getPosition</span> <span class=\"hljs-variable language_\">console</span> <span class=\"hljs-title function_\">log</span> <span class=\"hljs-string\">\"当前位置:\"</span> <span class=\"hljs-comment\">// 获取终点位置</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getTargetPosition</span> <span class=\"hljs-variable language_\">console</span> <span class=\"hljs-title function_\">log</span> <span class=\"hljs-string\">\"终点位置:\"</span> <span class=\"hljs-comment\">// 检查右边的单元格状态 (当前列+1)</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-title function_\">isEmpty</span> <span class=\"hljs-property\">i</span> <span class=\"hljs-property\">j</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 移动到右边</span> <span class=\"hljs-title function_\">setPosition</span> <span class=\"hljs-property\">i</span> <span class=\"hljs-property\">j</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 标记为已访问</span> <span class=\"hljs-title function_\">setVisited</span> <span class=\"hljs-property\">i</span> <span class=\"hljs-property\">j</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-literal\">true</span> <h3>算法提示</h3> <p>你可以使用以下算法来解决迷宫问题：</p> <ul>\n<li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li>\n<li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li>\n<li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li>\n</ul> <li><strong>深度优先搜索 (DFS)</strong>: 沿着一条路径深入探索，直到无路可走再回溯</li> <strong>深度优先搜索 (DFS)</strong> <li><strong>广度优先搜索 (BFS)</strong>: 逐层探索，保证找到最短路径</li> <strong>广度优先搜索 (BFS)</strong> <li><strong>A*算法</strong>: 使用启发式函数的最优路径搜索算法</li> <strong>A*算法</strong> <h3>注意事项</h3> <ul>\n<li>起始位置通常是绿色方块，终点是红色方块</li>\n<li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li>\n<li>移动时请确保目标位置是有效的（非墙壁且相邻）</li>\n</ul> <li>起始位置通常是绿色方块，终点是红色方块</li> <li>你可以通过 <code>setState</code> 方法来标记已访问的路径，方便可视化</li> <code>setState</code> <li>移动时请确保目标位置是有效的（非墙壁且相邻）</li> <p>祝你好运！</p> <div class=\"resizer horizontal\"><div class=\"resizer-line\"></div></div> <div class=\"resizer-line\"></div> <div class=\"panel-section second\" style=\"height:70%\"><div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div></div> <div class=\"code-editor-integrated\"><div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div><div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div></div> <div class=\"editor-header\"><h3 class=\"editor-title\">编辑器</h3><div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div></div> <h3 class=\"editor-title\">编辑器</h3> <div class=\"editor-buttons\"><button>提交</button><button>恢复</button><button>Console+</button></div> <button>提交</button> <button>恢复</button> <button>Console+</button> <div class=\"editor-content\"><div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div><div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div></div> <div class=\"editor-area\"><div class=\"cm-theme code-mirror-wrapper\"></div></div> <div class=\"cm-theme code-mirror-wrapper\"></div> <div class=\"console-area console-hidden\"><div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div></div> <div class=\"console-output embedded-console\"><div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div><div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div></div> <div class=\"console-header\"><h3>控制台输出</h3><div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div></div> <h3>控制台输出</h3> <div class=\"console-header-buttons\"><button>清空日志</button><button class=\"close-button\" title=\"关闭\">×</button></div> <button>清空日志</button> <button class=\"close-button\" title=\"关闭\">×</button> <div class=\"console-content\"><p class=\"no-logs\">暂无日志输出</p></div> <p class=\"no-logs\">暂无日志输出</p>"
}