{
    "url": "https://labuladong.online/algo-visualize/tutorial/graph-node-bfs-traverse3/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } // 图结构的 BFS 遍历，从节点 s 开始进行 BFS，且记录遍历步数（从起点 s 到当前节点的边的条数）\n// 每个节点自行维护 State 类，记录从 s 走来的步数\nclass State {\n    constructor(node, step) {\n        // 当前节点 ID\n        this.node = node;\n        // 从起点 s 到当前节点的步数\n        this.step = step;\n        \n        // 设置这个字段作为可视化节点的值\n        this.val = node;\n    }\n}\n\nvar bfs = function(graph, s) {\n    let visited = new Array(graph.size()).fill(false);\n    // @visualize bfs\n    let q = [new State(s, 0)];\n    visited[s] = true;\n    while (q.length !== 0) {\n        let state = q.shift();\n        let cur = state.node;\n        let step = state.step;\n        // @visualize color *graph._v(cur) #b????a step\n        console.log(\"visit \" + cur + \" with path step \" + step);\n        let neighbors = graph.neighbors(cur);\n        for (let i = 0; i < neighbors.length; i++) {\n            let w = neighbors[i];\n            // @visualize color *graph._e(cur,w) #b????a step\n            if (!visited[w]) {\n                q.push(new State(w, step + 1));\n                visited[w] = true;\n            }\n        }\n    }\n}\n\n// 创建有向加权图\nlet graph = Graph.createDirectedGraphFromAdjList([\n    [[1, 3], [2, 5], [3, 2]],\n    [[4, 4], [5, 1]],\n    [[3, 6], [5, 2], [6, 3]],\n    [[1, 7]],\n    [[6, 2]],\n    [[0, 4]],\n    [[4, 5]],\n]);\n\n// 从节点 0 开始进行 BFS 遍历\nbfs(graph, 0);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}