{
    "url": "https://labuladong.online/algo/en/data-structure-basic/linear-probing-code/",
    "title": "Two Implementations of Linear Probing | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Two Implementations of Linear Probing</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 9875 words</span><meta property=\"wordCount\" content=\"9875\"></span></div><hr></div> <h1><!---->Two Implementations of Linear Probing</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 9875 words</span><meta property=\"wordCount\" content=\"9875\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 9875 words</span><meta property=\"wordCount\" content=\"9875\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 9875 words</span> <meta property=\"wordCount\" content=\"9875\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a></li></ul></div><p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. In <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashtable-chaining/\">Chaining Method: Principles and Implementation</a>, I explained the implementation of the chaining method. <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a> discussed the difficulties of implementing hash tables using linear probing, and provided two methods to solve the problem of \"holes\" when deleting elements. This article will provide reference code implementations for both methods.</p><p>This article will first present a simplified implementation with the help of a visualization panel to make it easier to understand the process of adding, deleting, updating, and searching. Finally, we'll provide a complete implementation.</p><p>In the simplified implementation, the specific simplifications are as follows:</p><ol><li><p>Our hash table implementation only supports <code>key</code> and <code>value</code> of type <code>int</code>. If a <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we use is simply the modulus operation: <code>hash(key) = key % table.length</code>. This also makes it easy to simulate hash collisions. For example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> return 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed when creating the hash table. We assume the <code>table</code> array will not be fully filled, and we do not consider load factor or dynamic resizing.</p></li></ol><p>These simplifications help us focus on the core logic of adding, deleting, updating, and searching, and you can use the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to assist in understanding the process.</p><h2 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h2><h3 class=\"hidden-for-toc\" id=\"linear-probing-with-data-moving\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-data-moving\"><span>Linear Probing with Data Moving</span></a></h3><h3 class=\"hidden-for-toc\" id=\"linear-probing-with-special-placeholder\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-special-placeholder\"><span>Linear Probing with Special Placeholder</span></a></h3><h3 class=\"hidden-for-toc\" id=\"special-value-mark-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#special-value-mark-version\"><span>Special Value Mark Version</span></a></h3><h2 class=\"hidden-for-toc\" id=\"complete-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code\"><span>Complete Code</span></a></h2><h3 class=\"hidden-for-toc\" id=\"rehash-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rehash-version\"><span>Rehash Version</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a></li></ul></div><p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. In <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashtable-chaining/\">Chaining Method: Principles and Implementation</a>, I explained the implementation of the chaining method. <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a> discussed the difficulties of implementing hash tables using linear probing, and provided two methods to solve the problem of \"holes\" when deleting elements. This article will provide reference code implementations for both methods.</p><p>This article will first present a simplified implementation with the help of a visualization panel to make it easier to understand the process of adding, deleting, updating, and searching. Finally, we'll provide a complete implementation.</p><p>In the simplified implementation, the specific simplifications are as follows:</p><ol><li><p>Our hash table implementation only supports <code>key</code> and <code>value</code> of type <code>int</code>. If a <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we use is simply the modulus operation: <code>hash(key) = key % table.length</code>. This also makes it easy to simulate hash collisions. For example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> return 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed when creating the hash table. We assume the <code>table</code> array will not be fully filled, and we do not consider load factor or dynamic resizing.</p></li></ol><p>These simplifications help us focus on the core logic of adding, deleting, updating, and searching, and you can use the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to assist in understanding the process.</p><h2 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h2><h3 class=\"hidden-for-toc\" id=\"linear-probing-with-data-moving\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-data-moving\"><span>Linear Probing with Data Moving</span></a></h3><h3 class=\"hidden-for-toc\" id=\"linear-probing-with-special-placeholder\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-special-placeholder\"><span>Linear Probing with Special Placeholder</span></a></h3><h3 class=\"hidden-for-toc\" id=\"special-value-mark-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#special-value-mark-version\"><span>Special Value Mark Version</span></a></h3><h2 class=\"hidden-for-toc\" id=\"complete-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code\"><span>Complete Code</span></a></h2><h3 class=\"hidden-for-toc\" id=\"rehash-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rehash-version\"><span>Rehash Version</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a></li></ul></div> <p class=\"hint-container-title\">Prerequisite Knowledge</p> <p>Before reading this article, you should learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a> <p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. In <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashtable-chaining/\">Chaining Method: Principles and Implementation</a>, I explained the implementation of the chaining method. <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a> discussed the difficulties of implementing hash tables using linear probing, and provided two methods to solve the problem of \"holes\" when deleting elements. This article will provide reference code implementations for both methods.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashtable-chaining/\">Chaining Method: Principles and Implementation</a> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\">Two Challenges of Linear Probing</a> <p>This article will first present a simplified implementation with the help of a visualization panel to make it easier to understand the process of adding, deleting, updating, and searching. Finally, we'll provide a complete implementation.</p> <p>In the simplified implementation, the specific simplifications are as follows:</p> <ol><li><p>Our hash table implementation only supports <code>key</code> and <code>value</code> of type <code>int</code>. If a <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we use is simply the modulus operation: <code>hash(key) = key % table.length</code>. This also makes it easy to simulate hash collisions. For example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> return 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed when creating the hash table. We assume the <code>table</code> array will not be fully filled, and we do not consider load factor or dynamic resizing.</p></li></ol> <li><p>Our hash table implementation only supports <code>key</code> and <code>value</code> of type <code>int</code>. If a <code>key</code> does not exist, it returns <code>-1</code>.</p></li> <p>Our hash table implementation only supports <code>key</code> and <code>value</code> of type <code>int</code>. If a <code>key</code> does not exist, it returns <code>-1</code>.</p> <code>key</code> <code>value</code> <code>int</code> <code>key</code> <code>-1</code> <li><p>The <code>hash</code> function we use is simply the modulus operation: <code>hash(key) = key % table.length</code>. This also makes it easy to simulate hash collisions. For example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> return 1.</p></li> <p>The <code>hash</code> function we use is simply the modulus operation: <code>hash(key) = key % table.length</code>. This also makes it easy to simulate hash collisions. For example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> return 1.</p> <code>hash</code> <code>hash(key) = key % table.length</code> <code>table.length = 10</code> <code>hash(1)</code> <code>hash(11)</code> <li><p>The size of the underlying <code>table</code> array is fixed when creating the hash table. We assume the <code>table</code> array will not be fully filled, and we do not consider load factor or dynamic resizing.</p></li> <p>The size of the underlying <code>table</code> array is fixed when creating the hash table. We assume the <code>table</code> array will not be fully filled, and we do not consider load factor or dynamic resizing.</p> <code>table</code> <code>table</code> <p>These simplifications help us focus on the core logic of adding, deleting, updating, and searching, and you can use the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to assist in understanding the process.</p> <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> <h2 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h2> <a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a> <span>Simplified Code</span> <h3 class=\"hidden-for-toc\" id=\"linear-probing-with-data-moving\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-data-moving\"><span>Linear Probing with Data Moving</span></a></h3> <a class=\"header-anchor\" href=\"#linear-probing-with-data-moving\"><span>Linear Probing with Data Moving</span></a> <span>Linear Probing with Data Moving</span> <h3 class=\"hidden-for-toc\" id=\"linear-probing-with-special-placeholder\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linear-probing-with-special-placeholder\"><span>Linear Probing with Special Placeholder</span></a></h3> <a class=\"header-anchor\" href=\"#linear-probing-with-special-placeholder\"><span>Linear Probing with Special Placeholder</span></a> <span>Linear Probing with Special Placeholder</span> <h3 class=\"hidden-for-toc\" id=\"special-value-mark-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#special-value-mark-version\"><span>Special Value Mark Version</span></a></h3> <a class=\"header-anchor\" href=\"#special-value-mark-version\"><span>Special Value Mark Version</span></a> <span>Special Value Mark Version</span> <h2 class=\"hidden-for-toc\" id=\"complete-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code\"><span>Complete Code</span></a></h2> <a class=\"header-anchor\" href=\"#complete-code\"><span>Complete Code</span></a> <span>Complete Code</span> <h3 class=\"hidden-for-toc\" id=\"rehash-version\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#rehash-version\"><span>Rehash Version</span></a></h3> <a class=\"header-anchor\" href=\"#rehash-version\"><span>Rehash Version</span></a> <span>Rehash Version</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\" aria-label=\"Key Points to Implement Linear Probing\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Key Points to Implement Linear Probing</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/hash-set/\" aria-label=\"Hash Set Basic and Implementation\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Hash Set Basic and Implementation<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\" aria-label=\"Key Points to Implement Linear Probing\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Key Points to Implement Linear Probing</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Key Points to Implement Linear Probing</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/hash-set/\" aria-label=\"Hash Set Basic and Implementation\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Hash Set Basic and Implementation<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Hash Set Basic and Implementation<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}