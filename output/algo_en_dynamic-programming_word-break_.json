{
    "url": "https://labuladong.online/algo/en/dynamic-programming/word-break/",
    "title": "How to Convert Backtracking to Dynamic Programming | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->How to Convert Backtracking to Dynamic Programming</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8627 words</span><meta property=\"wordCount\" content=\"8627\"></span></div><hr></div> <h1><!---->How to Convert Backtracking to Dynamic Programming</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8627 words</span><meta property=\"wordCount\" content=\"8627\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 8627 words</span><meta property=\"wordCount\" content=\"8627\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 8627 words</span> <meta property=\"wordCount\" content=\"8627\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 139. Word Break https://leetcode.com/problems/word-break </h3><h3 tabindex=\"-1\"> 140. Word Break II https://leetcode.com/problems/word-break-ii </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div><p>In the earlier article <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Step-by-Step Guide to Binary Trees (Overview)</a>, we divided recursive enumeration into two approaches: \"Traversal\" and \"Decomposing Problems\". The \"Traversal\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithms</a>, and the \"Decomposing Problems\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Algorithms</a>.</p><p>This shift in thinking is not limited to binary tree-related algorithms. In this article, we will step outside the realm of binary tree problems to see how to abstract problems into a tree structure in actual algorithm questions, and then optimize step-by-step through \"Traversal\" and \"Decomposing Problems\" approaches, smoothly transitioning from backtracking algorithms to dynamic programming algorithms.</p><p>As a quick aside, the previous article <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Detailed Explanation of the Dynamic Programming Core Framework</a> stated that <strong>standard dynamic programming problems always aim to find the optimal solution</strong>. This is because dynamic programming problems have a property called \"optimal substructure\", meaning that the optimal solution to the overall problem can be derived from the optimal solutions of its subproblems.</p><p>However, in common parlance, even if a problem does not seek the optimal solution, as long as it uses a memoization technique to eliminate overlapping subproblems, we often call it a dynamic programming algorithm. Strictly speaking, this does not fit the definition of a dynamic programming problem. It might be more accurate to call such solutions \"DFS algorithms with memoization\". But we don't need to be too hung up on terminology. Since everyone is comfortable with the term, we can call it dynamic programming.</p><p>The two problems discussed in this article do not seek the optimal solution, but we will still refer to their solutions as dynamic programming solutions. This explanation is to prevent confusion for those who prefer precision. Without further ado, let's dive into the problems.</p><h2 class=\"hidden-for-toc\" id=\"word-break-i\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-i\"><span>Word Break I</span></a></h2><h3 class=\"hidden-for-toc\" id=\"traversal-strategy-backtracking-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-strategy-backtracking-solution\"><span>Traversal Strategy (Backtracking Solution)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"optimizing-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#optimizing-with-postorder-position\"><span>Optimizing with Postorder Position</span></a></h3><h3 class=\"hidden-for-toc\" id=\"thinking-of-problem-decomposition-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thinking-of-problem-decomposition-dynamic-programming\"><span>Thinking of Problem Decomposition (Dynamic Programming)</span></a></h3><h2 class=\"hidden-for-toc\" id=\"word-break-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-ii\"><span>Word Break II</span></a></h2><h3 class=\"hidden-for-toc\" id=\"traversal-approach-backtracking\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-approach-backtracking\"><span>Traversal Approach (Backtracking)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"can-we-optimize-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-we-optimize-with-postorder-position\"><span>Can We Optimize with Postorder Position?</span></a></h3><h3 class=\"hidden-for-toc\" id=\"divide-problem-approach-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#divide-problem-approach-dynamic-programming\"><span>Divide Problem Approach (Dynamic Programming)</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 139. Word Break https://leetcode.com/problems/word-break </h3><h3 tabindex=\"-1\"> 140. Word Break II https://leetcode.com/problems/word-break-ii </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div><p>In the earlier article <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Step-by-Step Guide to Binary Trees (Overview)</a>, we divided recursive enumeration into two approaches: \"Traversal\" and \"Decomposing Problems\". The \"Traversal\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithms</a>, and the \"Decomposing Problems\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Algorithms</a>.</p><p>This shift in thinking is not limited to binary tree-related algorithms. In this article, we will step outside the realm of binary tree problems to see how to abstract problems into a tree structure in actual algorithm questions, and then optimize step-by-step through \"Traversal\" and \"Decomposing Problems\" approaches, smoothly transitioning from backtracking algorithms to dynamic programming algorithms.</p><p>As a quick aside, the previous article <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Detailed Explanation of the Dynamic Programming Core Framework</a> stated that <strong>standard dynamic programming problems always aim to find the optimal solution</strong>. This is because dynamic programming problems have a property called \"optimal substructure\", meaning that the optimal solution to the overall problem can be derived from the optimal solutions of its subproblems.</p><p>However, in common parlance, even if a problem does not seek the optimal solution, as long as it uses a memoization technique to eliminate overlapping subproblems, we often call it a dynamic programming algorithm. Strictly speaking, this does not fit the definition of a dynamic programming problem. It might be more accurate to call such solutions \"DFS algorithms with memoization\". But we don't need to be too hung up on terminology. Since everyone is comfortable with the term, we can call it dynamic programming.</p><p>The two problems discussed in this article do not seek the optimal solution, but we will still refer to their solutions as dynamic programming solutions. This explanation is to prevent confusion for those who prefer precision. Without further ado, let's dive into the problems.</p><h2 class=\"hidden-for-toc\" id=\"word-break-i\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-i\"><span>Word Break I</span></a></h2><h3 class=\"hidden-for-toc\" id=\"traversal-strategy-backtracking-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-strategy-backtracking-solution\"><span>Traversal Strategy (Backtracking Solution)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"optimizing-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#optimizing-with-postorder-position\"><span>Optimizing with Postorder Position</span></a></h3><h3 class=\"hidden-for-toc\" id=\"thinking-of-problem-decomposition-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thinking-of-problem-decomposition-dynamic-programming\"><span>Thinking of Problem Decomposition (Dynamic Programming)</span></a></h3><h2 class=\"hidden-for-toc\" id=\"word-break-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-ii\"><span>Word Break II</span></a></h2><h3 class=\"hidden-for-toc\" id=\"traversal-approach-backtracking\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-approach-backtracking\"><span>Traversal Approach (Backtracking)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"can-we-optimize-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-we-optimize-with-postorder-position\"><span>Can We Optimize with Postorder Position?</span></a></h3><h3 class=\"hidden-for-toc\" id=\"divide-problem-approach-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#divide-problem-approach-dynamic-programming\"><span>Divide Problem Approach (Dynamic Programming)</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 139. Word Break https://leetcode.com/problems/word-break </h3><h3 tabindex=\"-1\"> 140. Word Break II https://leetcode.com/problems/word-break-ii </h3></div> <h3 tabindex=\"-1\"> 139. Word Break https://leetcode.com/problems/word-break </h3> <h3 tabindex=\"-1\"> 140. Word Break II https://leetcode.com/problems/word-break-ii </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table></div> <p class=\"hint-container-title\">This article will resolve</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">Difficulty</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a></td> <a href=\"https://leetcode.com/problems/word-break/\" target=\"_blank\" rel=\"noopener noreferrer\">139. Word Break</a> <td style=\"text-align:center;\">ðŸŸ </td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td><td style=\"text-align:center;\">ðŸ”´</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a></td> <a href=\"https://leetcode.com/problems/word-break-ii/\" target=\"_blank\" rel=\"noopener noreferrer\">140. Word Break II</a> <td style=\"text-align:center;\">ðŸ”´</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to study:</p><ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you need to study:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a></li><li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Binary Tree Algorithms Series (Overview)</a> <li><a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a></li> <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Core Framework</a> <p>In the earlier article <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Step-by-Step Guide to Binary Trees (Overview)</a>, we divided recursive enumeration into two approaches: \"Traversal\" and \"Decomposing Problems\". The \"Traversal\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithms</a>, and the \"Decomposing Problems\" approach can be extended to <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Algorithms</a>.</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/binary-tree-summary/\">Step-by-Step Guide to Binary Trees (Overview)</a> <a class=\"route-link\" href=\"/algo/en/essential-technique/backtrack-framework/\">Backtracking Algorithms</a> <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Dynamic Programming Algorithms</a> <p>This shift in thinking is not limited to binary tree-related algorithms. In this article, we will step outside the realm of binary tree problems to see how to abstract problems into a tree structure in actual algorithm questions, and then optimize step-by-step through \"Traversal\" and \"Decomposing Problems\" approaches, smoothly transitioning from backtracking algorithms to dynamic programming algorithms.</p> <p>As a quick aside, the previous article <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Detailed Explanation of the Dynamic Programming Core Framework</a> stated that <strong>standard dynamic programming problems always aim to find the optimal solution</strong>. This is because dynamic programming problems have a property called \"optimal substructure\", meaning that the optimal solution to the overall problem can be derived from the optimal solutions of its subproblems.</p> <a class=\"route-link\" href=\"/algo/en/essential-technique/dynamic-programming-framework/\">Detailed Explanation of the Dynamic Programming Core Framework</a> <strong>standard dynamic programming problems always aim to find the optimal solution</strong> <p>However, in common parlance, even if a problem does not seek the optimal solution, as long as it uses a memoization technique to eliminate overlapping subproblems, we often call it a dynamic programming algorithm. Strictly speaking, this does not fit the definition of a dynamic programming problem. It might be more accurate to call such solutions \"DFS algorithms with memoization\". But we don't need to be too hung up on terminology. Since everyone is comfortable with the term, we can call it dynamic programming.</p> <p>The two problems discussed in this article do not seek the optimal solution, but we will still refer to their solutions as dynamic programming solutions. This explanation is to prevent confusion for those who prefer precision. Without further ado, let's dive into the problems.</p> <h2 class=\"hidden-for-toc\" id=\"word-break-i\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-i\"><span>Word Break I</span></a></h2> <a class=\"header-anchor\" href=\"#word-break-i\"><span>Word Break I</span></a> <span>Word Break I</span> <h3 class=\"hidden-for-toc\" id=\"traversal-strategy-backtracking-solution\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-strategy-backtracking-solution\"><span>Traversal Strategy (Backtracking Solution)</span></a></h3> <a class=\"header-anchor\" href=\"#traversal-strategy-backtracking-solution\"><span>Traversal Strategy (Backtracking Solution)</span></a> <span>Traversal Strategy (Backtracking Solution)</span> <h3 class=\"hidden-for-toc\" id=\"optimizing-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#optimizing-with-postorder-position\"><span>Optimizing with Postorder Position</span></a></h3> <a class=\"header-anchor\" href=\"#optimizing-with-postorder-position\"><span>Optimizing with Postorder Position</span></a> <span>Optimizing with Postorder Position</span> <h3 class=\"hidden-for-toc\" id=\"thinking-of-problem-decomposition-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#thinking-of-problem-decomposition-dynamic-programming\"><span>Thinking of Problem Decomposition (Dynamic Programming)</span></a></h3> <a class=\"header-anchor\" href=\"#thinking-of-problem-decomposition-dynamic-programming\"><span>Thinking of Problem Decomposition (Dynamic Programming)</span></a> <span>Thinking of Problem Decomposition (Dynamic Programming)</span> <h2 class=\"hidden-for-toc\" id=\"word-break-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#word-break-ii\"><span>Word Break II</span></a></h2> <a class=\"header-anchor\" href=\"#word-break-ii\"><span>Word Break II</span></a> <span>Word Break II</span> <h3 class=\"hidden-for-toc\" id=\"traversal-approach-backtracking\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#traversal-approach-backtracking\"><span>Traversal Approach (Backtracking)</span></a></h3> <a class=\"header-anchor\" href=\"#traversal-approach-backtracking\"><span>Traversal Approach (Backtracking)</span></a> <span>Traversal Approach (Backtracking)</span> <h3 class=\"hidden-for-toc\" id=\"can-we-optimize-with-postorder-position\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#can-we-optimize-with-postorder-position\"><span>Can We Optimize with Postorder Position?</span></a></h3> <a class=\"header-anchor\" href=\"#can-we-optimize-with-postorder-position\"><span>Can We Optimize with Postorder Position?</span></a> <span>Can We Optimize with Postorder Position?</span> <h3 class=\"hidden-for-toc\" id=\"divide-problem-approach-dynamic-programming\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#divide-problem-approach-dynamic-programming\"><span>Divide Problem Approach (Dynamic Programming)</span></a></h3> <a class=\"header-anchor\" href=\"#divide-problem-approach-dynamic-programming\"><span>Divide Problem Approach (Dynamic Programming)</span></a> <span>Divide Problem Approach (Dynamic Programming)</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/dynamic-programming/two-views-of-dp/\" aria-label=\"Two Perspectives of Dynamic Programming Enumeration\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Two Perspectives of Dynamic Programming Enumeration</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/dynamic-programming/space-optimization/\" aria-label=\"Optimize Space Complexity for Dynamic Programming\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Optimize Space Complexity for Dynamic Programming<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/dynamic-programming/two-views-of-dp/\" aria-label=\"Two Perspectives of Dynamic Programming Enumeration\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Two Perspectives of Dynamic Programming Enumeration</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Two Perspectives of Dynamic Programming Enumeration</div> <a class=\"route-link auto-link next\" href=\"/algo/en/dynamic-programming/space-optimization/\" aria-label=\"Optimize Space Complexity for Dynamic Programming\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Optimize Space Complexity for Dynamic Programming<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Optimize Space Complexity for Dynamic Programming<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}