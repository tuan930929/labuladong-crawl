{
    "url": "https://labuladong.online/algo/intro/how-to-learn-algorithms/",
    "title": "算法刷题的重点和坑 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->算法刷题的重点和坑</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3387 字</span><meta property=\"wordCount\" content=\"3387\"></span></div><hr></div> <h1><!---->算法刷题的重点和坑</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3387 字</span><meta property=\"wordCount\" content=\"3387\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 3387 字</span><meta property=\"wordCount\" content=\"3387\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 3387 字</span> <meta property=\"wordCount\" content=\"3387\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><p>现在对于技术岗的求职者来说，无论是校招还是社招，无论笔试还是面试，考察算法几乎成了标配。</p><p>校招的同学请尤其注意，算法对于校招更加重要，因为你还没有工作，问不出什么正儿八经的项目实战经验；问你八股文吧，都是有标准答案的，玩不出什么花活。而且现在 chatGPT 这么厉害，会背八股文这个技能的价值又降低了。</p><p>只有算法是唯一的变数，可以有比较大的考察空间，所以比较好的公司校招都要考算法，这东西很适合拿来筛选校招生。</p><p>我会建议校招生提前开始准备，趁着时间充裕，把本站的内容都过一遍，可以系统掌握数据结构和算法，这样可以免去日后工作跳槽的很多麻烦。</p><p>对于社招，工作经验无疑是最重要的。好公司招人也考算法，但一般也就考到 medium 的难度，不会特别难。</p><p>所以本站提供 <a class=\"route-link\" href=\"/algo/intro/quick-learning-plan/\">速成目录</a>，专门针对算法笔试，帮助时间不充裕的读者解决燃眉之急。</p><p>这里我不探讨算法在工作中有什么实际意义，只针对算法刷题进行科学地分析，并针对不同读者给出高效的解决方案，帮助大家提高算法能力，算法从此不再是求职的绊脚石。</p><h2 id=\"求职中如何考察算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%B1%82%E8%81%8C%E4%B8%AD%E5%A6%82%E4%BD%95%E8%80%83%E5%AF%9F%E7%AE%97%E6%B3%95\"><span>求职中如何考察算法</span></a></h2><p>在技术岗求职的语境下，我们所说的「算法」，一般包含两大块，一个是数据结构，一个是算法，它们的考察形式是不同的。</p><p>「<strong>数据结构</strong>」这部分相对简单，一般只会在面试中考察。比如面试官问你哈希表的原理是什么，为什么它的增删查改效率是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，以及一系列的追问。这种问题类似于八股文，你只要认真学习理解过，都比较容易回答。</p><p>本站的入门章节介绍了所有常见的数据结构的原理及实现，如果时间充裕的话可以动手跟着实现一下，以便加深理解。但如果时间不充裕，把原理理解透彻就行了，一般不需要你手搓数据结构的实现。</p><p>「<strong>算法</strong>」这部分应该是最让大家头痛的，也就是俗话说的手撕算法题，直接给你一道题目，你需要写出解法通过判题系统。</p><p>手撕算法题 100% 会出现在笔试中，属于硬指标，过不了的话面试都没机会。大部分面试中，面试官也可能让你现场手撕算法题，不过相对来说会容易一些，因为实在不行你可以跟面试官交流嘛。</p><p>本站除了入门章节是数据结构专题章节外，其他所有内容都是围绕算法解题技巧展开的，而且有时间一定要亲自动手做一做，这样才能真正掌握算法技巧。</p><h2 id=\"刷算法题的关键点在哪里\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E5%9C%A8%E5%93%AA%E9%87%8C\"><span>刷算法题的关键点在哪里</span></a></h2><p>刷题的关键点在于，构建一套你的解题方法论（本站中经常称之为「框架思维」）。</p><p>具体的题目没有价值，昙花一现的技巧也没有价值，<strong>成体系、可稳定复现的解题方法论才有价值</strong>。</p><p>本站实际上就是我总结的一套思维框架，而不是简单的题解堆砌。你把这套方法论学走，才配得上你付出的时间和金钱。</p><p>在遇到新的题目时，这套方法论可以给你提供切入点，逐步优化，最终写出解法代码。</p><p>算法就像数学考试，死记硬背没有用的。遇到新题就没思路，根本原因就是没有掌握属于自己的方法论。</p><h2 id=\"为什么本站能速成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%AC%E7%AB%99%E8%83%BD%E9%80%9F%E6%88%90\"><span>为什么本站能速成</span></a></h2><p>中学时代，见过那种每天认真听讲做笔记，依然考不好的同学吧？也见过那种天天上课睡大觉，但依然考得好的同学吧？其实学霸的秘密，不在于笔记记得有多工整，而在于「<strong>抽象能力</strong>」。</p><p>譬如编程，一个父类可以产生若干子类，一个子类又可以有无数个实例化。</p><p>如果你执迷于一个个实例化的细节，那完蛋了，即便背诵一千个实例化，还有一万个等着你呢；如果你能从细节跳出来，透过实例化看到父类，一万个实例化，在你眼里其实只是同一个，那自然可以以不变应万变，这就是抽象的力量。</p><p>在本站开篇的 <a class=\"route-link\" href=\"/algo/essential-technique/algorithm-summary/\">学习数据结构和算法的框架思维</a> 中，我提到了两句话：</p><p><strong>数据结构本质上只有两种，一种叫数组，一种叫链表</strong>。其他乱七八糟的都是它们俩的衍生。</p><p><strong>算法本质就是穷举</strong>。花里胡哨的算法名称都只是名词而已，它们做的事情都本质都是穷举。</p><p>有这两句话作为指导方针，数据结构和算法根本没有什么难的，你以前觉得难，是因为没有从这两句话进行切入。</p><p>有了这两句话撑腰，就能大杀四方了吗？也不行，下一步是要把这两句话具体化。</p><p>比如说，针对不同题目的穷举方法是不同的，你就需要对这些场景进行归纳总结，把重复的部分<strong>流程化、框架化</strong>，这些框架就是你的解题方法论。</p><p>本站的核心框架章节，就是针对常见的算法题总结出了几套框架。</p><p>有了这些框架，就能大杀四方了吗？还是不够，下一步是通过不断地实践，把这些框架<strong>内化</strong>，做到随心运用。</p><p>本站目录中标有「强化练习」的习题章节就是这个目的，针对同一套框架进行大量的重复练习，直接给你练出肌肉记忆，真正拥有自己的解题方法论。</p><p>综上，就是我探索出的科学的刷题方法，本站的所有内容都是围绕上述过程展开的。</p><h2 id=\"算法学习的几个坑\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91\"><span>算法学习的几个坑</span></a></h2><h3 id=\"坑一-被误导-浪费时间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%80-%E8%A2%AB%E8%AF%AF%E5%AF%BC-%E6%B5%AA%E8%B4%B9%E6%97%B6%E9%97%B4\"><span>坑一：被误导，浪费时间</span></a></h3><p>尤其是初学者，特别容易被误导，以为算法很高大上，非要有很好的数学基础，非要啃完算法导论才算是入门，所以从心理上就畏惧算法。</p><p>我对这个问题有切身体会，刚学算法那会儿，我会去搜索过各种资料、经验贴之类的，我就记得很多所谓大佬，你问他怎么入门算法，他告诉你看《算法导论》，然后又甩给你一堆英文课程，还强调一定要看英文的哦，中文的翻译不好。</p><p>这就好比，你是一个胖子，去问人家怎么减肥，人家告诉你，每天做 100 个俯卧撑，200 个引体向上，肯定有效，你看我就是这样练出来的！</p><p>呵呵，我要是真能做到这些，还用得着来问么？不过仔细琢磨琢磨，给出这种回答是基于一种什么心理？实际上他根本不在乎你的诉求，他只是想告诉你：我做过这些，我牛逼吧，你羡慕吧，你做不到吧~</p><p>一些算法的专业书籍都是好书，内容也很硬，但目标用户不一样。大多数人只是为了找技术岗的工作，看这些书性价比真的太低了。</p><p><strong>什么性价比高？直接刷题。方向首先要明确，只有刷题是正道，其他的都是辅助手段</strong>。如果这个学一点，那个学一点，感觉懂了很多，但最后一笔试发现啥都用不到，傻眼了，找谁说理去？</p><h3 id=\"坑二-贪多-贪巧\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%BA%8C-%E8%B4%AA%E5%A4%9A-%E8%B4%AA%E5%B7%A7\"><span>坑二：贪多，贪巧</span></a></h3><p>何谓「贪多」？有些读者可能陷入到追求量的陷阱里。比如一些培训机构，标榜自己有几百 G 的资料，内容大而全。</p><p>在我看来，量多不是优势，反而是劣势。咱就实话实说，哪怕这几百 G 的资料真的不错，你会花那个时间和耐心去看，还是放到收藏夹吃灰？</p><p>尤其是算法这种偏实践的东西，你光看是不行的，若不动手去练习，终究是纸上谈兵。</p><p>何谓「贪巧」？大家肯定会被力扣评论区里面一些大佬的精彩解法吸引，<strong>但是我想说，在培养出自己的框架思维之前，不必追求一题多解</strong>。</p><p>追求一题多解当然是好的，但如果你还没有掌握自己的解题方法论，那还是先老老实实练习本站的框架思维吧。</p><p>学到后面你就能体会到了，大道至简，算法就是穷举，本站的全部内容都是围绕这两个字。大部分情况下，按照框架写代码，逢山开路遇水搭桥，见招拆招逐步优化，最后写出来的就是最优解，和那些花哨的算法效率是相同的，你以不变应万变，何乐而不为呢？</p><h3 id=\"坑三-刷题没有章法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%89-%E5%88%B7%E9%A2%98%E6%B2%A1%E6%9C%89%E7%AB%A0%E6%B3%95\"><span>坑三：刷题没有章法</span></a></h3><p>明确了主要方法是刷题，那么接下来的坑是：刷题没有章法，乱刷一通，胡子眉毛一把抓。力扣上几千道题，你是准备全部刷完背下来么？</p><p>我不否认大力可以出奇迹，比方说你如果真能刷个一千道题，你肯定会有一些感觉的。但问题是，我有一妙法，可以让你刷一道顶十道，你想不想学呀？想吧，其实很简单，刷题不要贪数量，而是要归纳总结，高度抽象，最终目标是培养出自己的框架思维。</p><p>说白了，那么多算法题，大多都是换汤不换药，你把药方记住了，汤换来换去，你都是照方抓药，不是么？</p><p><strong>为啥我这么强调这个框架思维？因为它可以从根本上解决你遇到新题无从下手的问题</strong>。</p><p>比方说吧，如果你掌握了框架思维，现在随便给你一道题目，那你就可以按照固定的思维步骤进行思考：</p><p>这题让我们干什么？奥，让我们操作字符串。字符串本质就是个数组，所以这题考察的大概是数组相关的算法技巧。</p><p>数组有什么算法技巧？你心里有数，无非就是 <a class=\"route-link\" href=\"/algo/essential-technique/binary-search-framework/\">二分查找</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">快慢指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">左右指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口</a>、<a class=\"route-link\" href=\"/algo/data-structure/prefix-sum/\">前缀和数组</a>、<a class=\"route-link\" href=\"/algo/data-structure/diff-array/\">差分数组</a>，主要就这些。</p><p>二分查找的适用场景是什么？差分数组的适用场景是什么？你挨个想一遍，这个不行换那个，总能试出来个相对靠谱的吧？</p><p>好，比方说你最后感觉这个题用滑动窗口比较靠谱，那么换一般人，你告诉他这是滑动窗口，他大概率半天憋不出来一行代码。但你不一样，你知道滑动窗口的代码框架，所以你是先把框架写出来，然后往框架里面填充代码。</p><p>如何填充？简单啊，<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口核心框架</a> 总结过了，用滑动窗口要自问三个问题，你回答一下这三个问题，然后这个题就写完了，提交代码一遍过。爽不爽？</p><p>爽吧，那我再给你 100 道 <a class=\"route-link\" href=\"/algo/problem-set/sliding-window/\">滑动窗口习题</a>，你都按完全相同的套路，改点细节就都解决了。这时候，你觉得算法还难么？</p><h3 id=\"坑四-解题风格不统一\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E5%9B%9B-%E8%A7%A3%E9%A2%98%E9%A3%8E%E6%A0%BC%E4%B8%8D%E7%BB%9F%E4%B8%80\"><span>坑四：解题风格不统一</span></a></h3><p>如果你避开了前面的坑，现在可以探讨一些细节层面的问题了。</p><p>比如你看不同人写的解法，那么他们的代码风格，比如算法框架、变量命名等方面都不一样，这可能会产生问题。</p><p>风格这个东西没什么对错，但对于新手，不同的代码风格会提高理解成本。而且新手会不自觉地学习别人的代码风格，那么不同的代码风格会导致你自己的解题风格不统一，难以形成固定的套路框架，发挥的稳定性就下降了。</p><p>本站的所有算法框架、代码风格全部保持同样的风格，甚至会解释为什么使用这种风格，比如 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-vs-dfs/\">解答回溯算法/DFS算法的若干疑问</a> 解释了 backtrack/DFS 算法的递归函数为何不应该设置返回值。</p><p>我建议初学时使用较为统一的代码风格和模板，先把模板理解透彻，运用纯熟，然后你就可以想咋写咋写了，因为你咋写都能写对。</p></div><!----><!----><!----></div> <div id=\"markdown-content\"><p>现在对于技术岗的求职者来说，无论是校招还是社招，无论笔试还是面试，考察算法几乎成了标配。</p><p>校招的同学请尤其注意，算法对于校招更加重要，因为你还没有工作，问不出什么正儿八经的项目实战经验；问你八股文吧，都是有标准答案的，玩不出什么花活。而且现在 chatGPT 这么厉害，会背八股文这个技能的价值又降低了。</p><p>只有算法是唯一的变数，可以有比较大的考察空间，所以比较好的公司校招都要考算法，这东西很适合拿来筛选校招生。</p><p>我会建议校招生提前开始准备，趁着时间充裕，把本站的内容都过一遍，可以系统掌握数据结构和算法，这样可以免去日后工作跳槽的很多麻烦。</p><p>对于社招，工作经验无疑是最重要的。好公司招人也考算法，但一般也就考到 medium 的难度，不会特别难。</p><p>所以本站提供 <a class=\"route-link\" href=\"/algo/intro/quick-learning-plan/\">速成目录</a>，专门针对算法笔试，帮助时间不充裕的读者解决燃眉之急。</p><p>这里我不探讨算法在工作中有什么实际意义，只针对算法刷题进行科学地分析，并针对不同读者给出高效的解决方案，帮助大家提高算法能力，算法从此不再是求职的绊脚石。</p><h2 id=\"求职中如何考察算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%B1%82%E8%81%8C%E4%B8%AD%E5%A6%82%E4%BD%95%E8%80%83%E5%AF%9F%E7%AE%97%E6%B3%95\"><span>求职中如何考察算法</span></a></h2><p>在技术岗求职的语境下，我们所说的「算法」，一般包含两大块，一个是数据结构，一个是算法，它们的考察形式是不同的。</p><p>「<strong>数据结构</strong>」这部分相对简单，一般只会在面试中考察。比如面试官问你哈希表的原理是什么，为什么它的增删查改效率是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，以及一系列的追问。这种问题类似于八股文，你只要认真学习理解过，都比较容易回答。</p><p>本站的入门章节介绍了所有常见的数据结构的原理及实现，如果时间充裕的话可以动手跟着实现一下，以便加深理解。但如果时间不充裕，把原理理解透彻就行了，一般不需要你手搓数据结构的实现。</p><p>「<strong>算法</strong>」这部分应该是最让大家头痛的，也就是俗话说的手撕算法题，直接给你一道题目，你需要写出解法通过判题系统。</p><p>手撕算法题 100% 会出现在笔试中，属于硬指标，过不了的话面试都没机会。大部分面试中，面试官也可能让你现场手撕算法题，不过相对来说会容易一些，因为实在不行你可以跟面试官交流嘛。</p><p>本站除了入门章节是数据结构专题章节外，其他所有内容都是围绕算法解题技巧展开的，而且有时间一定要亲自动手做一做，这样才能真正掌握算法技巧。</p><h2 id=\"刷算法题的关键点在哪里\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E5%9C%A8%E5%93%AA%E9%87%8C\"><span>刷算法题的关键点在哪里</span></a></h2><p>刷题的关键点在于，构建一套你的解题方法论（本站中经常称之为「框架思维」）。</p><p>具体的题目没有价值，昙花一现的技巧也没有价值，<strong>成体系、可稳定复现的解题方法论才有价值</strong>。</p><p>本站实际上就是我总结的一套思维框架，而不是简单的题解堆砌。你把这套方法论学走，才配得上你付出的时间和金钱。</p><p>在遇到新的题目时，这套方法论可以给你提供切入点，逐步优化，最终写出解法代码。</p><p>算法就像数学考试，死记硬背没有用的。遇到新题就没思路，根本原因就是没有掌握属于自己的方法论。</p><h2 id=\"为什么本站能速成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%AC%E7%AB%99%E8%83%BD%E9%80%9F%E6%88%90\"><span>为什么本站能速成</span></a></h2><p>中学时代，见过那种每天认真听讲做笔记，依然考不好的同学吧？也见过那种天天上课睡大觉，但依然考得好的同学吧？其实学霸的秘密，不在于笔记记得有多工整，而在于「<strong>抽象能力</strong>」。</p><p>譬如编程，一个父类可以产生若干子类，一个子类又可以有无数个实例化。</p><p>如果你执迷于一个个实例化的细节，那完蛋了，即便背诵一千个实例化，还有一万个等着你呢；如果你能从细节跳出来，透过实例化看到父类，一万个实例化，在你眼里其实只是同一个，那自然可以以不变应万变，这就是抽象的力量。</p><p>在本站开篇的 <a class=\"route-link\" href=\"/algo/essential-technique/algorithm-summary/\">学习数据结构和算法的框架思维</a> 中，我提到了两句话：</p><p><strong>数据结构本质上只有两种，一种叫数组，一种叫链表</strong>。其他乱七八糟的都是它们俩的衍生。</p><p><strong>算法本质就是穷举</strong>。花里胡哨的算法名称都只是名词而已，它们做的事情都本质都是穷举。</p><p>有这两句话作为指导方针，数据结构和算法根本没有什么难的，你以前觉得难，是因为没有从这两句话进行切入。</p><p>有了这两句话撑腰，就能大杀四方了吗？也不行，下一步是要把这两句话具体化。</p><p>比如说，针对不同题目的穷举方法是不同的，你就需要对这些场景进行归纳总结，把重复的部分<strong>流程化、框架化</strong>，这些框架就是你的解题方法论。</p><p>本站的核心框架章节，就是针对常见的算法题总结出了几套框架。</p><p>有了这些框架，就能大杀四方了吗？还是不够，下一步是通过不断地实践，把这些框架<strong>内化</strong>，做到随心运用。</p><p>本站目录中标有「强化练习」的习题章节就是这个目的，针对同一套框架进行大量的重复练习，直接给你练出肌肉记忆，真正拥有自己的解题方法论。</p><p>综上，就是我探索出的科学的刷题方法，本站的所有内容都是围绕上述过程展开的。</p><h2 id=\"算法学习的几个坑\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91\"><span>算法学习的几个坑</span></a></h2><h3 id=\"坑一-被误导-浪费时间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%80-%E8%A2%AB%E8%AF%AF%E5%AF%BC-%E6%B5%AA%E8%B4%B9%E6%97%B6%E9%97%B4\"><span>坑一：被误导，浪费时间</span></a></h3><p>尤其是初学者，特别容易被误导，以为算法很高大上，非要有很好的数学基础，非要啃完算法导论才算是入门，所以从心理上就畏惧算法。</p><p>我对这个问题有切身体会，刚学算法那会儿，我会去搜索过各种资料、经验贴之类的，我就记得很多所谓大佬，你问他怎么入门算法，他告诉你看《算法导论》，然后又甩给你一堆英文课程，还强调一定要看英文的哦，中文的翻译不好。</p><p>这就好比，你是一个胖子，去问人家怎么减肥，人家告诉你，每天做 100 个俯卧撑，200 个引体向上，肯定有效，你看我就是这样练出来的！</p><p>呵呵，我要是真能做到这些，还用得着来问么？不过仔细琢磨琢磨，给出这种回答是基于一种什么心理？实际上他根本不在乎你的诉求，他只是想告诉你：我做过这些，我牛逼吧，你羡慕吧，你做不到吧~</p><p>一些算法的专业书籍都是好书，内容也很硬，但目标用户不一样。大多数人只是为了找技术岗的工作，看这些书性价比真的太低了。</p><p><strong>什么性价比高？直接刷题。方向首先要明确，只有刷题是正道，其他的都是辅助手段</strong>。如果这个学一点，那个学一点，感觉懂了很多，但最后一笔试发现啥都用不到，傻眼了，找谁说理去？</p><h3 id=\"坑二-贪多-贪巧\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%BA%8C-%E8%B4%AA%E5%A4%9A-%E8%B4%AA%E5%B7%A7\"><span>坑二：贪多，贪巧</span></a></h3><p>何谓「贪多」？有些读者可能陷入到追求量的陷阱里。比如一些培训机构，标榜自己有几百 G 的资料，内容大而全。</p><p>在我看来，量多不是优势，反而是劣势。咱就实话实说，哪怕这几百 G 的资料真的不错，你会花那个时间和耐心去看，还是放到收藏夹吃灰？</p><p>尤其是算法这种偏实践的东西，你光看是不行的，若不动手去练习，终究是纸上谈兵。</p><p>何谓「贪巧」？大家肯定会被力扣评论区里面一些大佬的精彩解法吸引，<strong>但是我想说，在培养出自己的框架思维之前，不必追求一题多解</strong>。</p><p>追求一题多解当然是好的，但如果你还没有掌握自己的解题方法论，那还是先老老实实练习本站的框架思维吧。</p><p>学到后面你就能体会到了，大道至简，算法就是穷举，本站的全部内容都是围绕这两个字。大部分情况下，按照框架写代码，逢山开路遇水搭桥，见招拆招逐步优化，最后写出来的就是最优解，和那些花哨的算法效率是相同的，你以不变应万变，何乐而不为呢？</p><h3 id=\"坑三-刷题没有章法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%89-%E5%88%B7%E9%A2%98%E6%B2%A1%E6%9C%89%E7%AB%A0%E6%B3%95\"><span>坑三：刷题没有章法</span></a></h3><p>明确了主要方法是刷题，那么接下来的坑是：刷题没有章法，乱刷一通，胡子眉毛一把抓。力扣上几千道题，你是准备全部刷完背下来么？</p><p>我不否认大力可以出奇迹，比方说你如果真能刷个一千道题，你肯定会有一些感觉的。但问题是，我有一妙法，可以让你刷一道顶十道，你想不想学呀？想吧，其实很简单，刷题不要贪数量，而是要归纳总结，高度抽象，最终目标是培养出自己的框架思维。</p><p>说白了，那么多算法题，大多都是换汤不换药，你把药方记住了，汤换来换去，你都是照方抓药，不是么？</p><p><strong>为啥我这么强调这个框架思维？因为它可以从根本上解决你遇到新题无从下手的问题</strong>。</p><p>比方说吧，如果你掌握了框架思维，现在随便给你一道题目，那你就可以按照固定的思维步骤进行思考：</p><p>这题让我们干什么？奥，让我们操作字符串。字符串本质就是个数组，所以这题考察的大概是数组相关的算法技巧。</p><p>数组有什么算法技巧？你心里有数，无非就是 <a class=\"route-link\" href=\"/algo/essential-technique/binary-search-framework/\">二分查找</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">快慢指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">左右指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口</a>、<a class=\"route-link\" href=\"/algo/data-structure/prefix-sum/\">前缀和数组</a>、<a class=\"route-link\" href=\"/algo/data-structure/diff-array/\">差分数组</a>，主要就这些。</p><p>二分查找的适用场景是什么？差分数组的适用场景是什么？你挨个想一遍，这个不行换那个，总能试出来个相对靠谱的吧？</p><p>好，比方说你最后感觉这个题用滑动窗口比较靠谱，那么换一般人，你告诉他这是滑动窗口，他大概率半天憋不出来一行代码。但你不一样，你知道滑动窗口的代码框架，所以你是先把框架写出来，然后往框架里面填充代码。</p><p>如何填充？简单啊，<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口核心框架</a> 总结过了，用滑动窗口要自问三个问题，你回答一下这三个问题，然后这个题就写完了，提交代码一遍过。爽不爽？</p><p>爽吧，那我再给你 100 道 <a class=\"route-link\" href=\"/algo/problem-set/sliding-window/\">滑动窗口习题</a>，你都按完全相同的套路，改点细节就都解决了。这时候，你觉得算法还难么？</p><h3 id=\"坑四-解题风格不统一\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E5%9B%9B-%E8%A7%A3%E9%A2%98%E9%A3%8E%E6%A0%BC%E4%B8%8D%E7%BB%9F%E4%B8%80\"><span>坑四：解题风格不统一</span></a></h3><p>如果你避开了前面的坑，现在可以探讨一些细节层面的问题了。</p><p>比如你看不同人写的解法，那么他们的代码风格，比如算法框架、变量命名等方面都不一样，这可能会产生问题。</p><p>风格这个东西没什么对错，但对于新手，不同的代码风格会提高理解成本。而且新手会不自觉地学习别人的代码风格，那么不同的代码风格会导致你自己的解题风格不统一，难以形成固定的套路框架，发挥的稳定性就下降了。</p><p>本站的所有算法框架、代码风格全部保持同样的风格，甚至会解释为什么使用这种风格，比如 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-vs-dfs/\">解答回溯算法/DFS算法的若干疑问</a> 解释了 backtrack/DFS 算法的递归函数为何不应该设置返回值。</p><p>我建议初学时使用较为统一的代码风格和模板，先把模板理解透彻，运用纯熟，然后你就可以想咋写咋写了，因为你咋写都能写对。</p></div> <p>现在对于技术岗的求职者来说，无论是校招还是社招，无论笔试还是面试，考察算法几乎成了标配。</p> <p>校招的同学请尤其注意，算法对于校招更加重要，因为你还没有工作，问不出什么正儿八经的项目实战经验；问你八股文吧，都是有标准答案的，玩不出什么花活。而且现在 chatGPT 这么厉害，会背八股文这个技能的价值又降低了。</p> <p>只有算法是唯一的变数，可以有比较大的考察空间，所以比较好的公司校招都要考算法，这东西很适合拿来筛选校招生。</p> <p>我会建议校招生提前开始准备，趁着时间充裕，把本站的内容都过一遍，可以系统掌握数据结构和算法，这样可以免去日后工作跳槽的很多麻烦。</p> <p>对于社招，工作经验无疑是最重要的。好公司招人也考算法，但一般也就考到 medium 的难度，不会特别难。</p> <p>所以本站提供 <a class=\"route-link\" href=\"/algo/intro/quick-learning-plan/\">速成目录</a>，专门针对算法笔试，帮助时间不充裕的读者解决燃眉之急。</p> <a class=\"route-link\" href=\"/algo/intro/quick-learning-plan/\">速成目录</a> <p>这里我不探讨算法在工作中有什么实际意义，只针对算法刷题进行科学地分析，并针对不同读者给出高效的解决方案，帮助大家提高算法能力，算法从此不再是求职的绊脚石。</p> <h2 id=\"求职中如何考察算法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%B1%82%E8%81%8C%E4%B8%AD%E5%A6%82%E4%BD%95%E8%80%83%E5%AF%9F%E7%AE%97%E6%B3%95\"><span>求职中如何考察算法</span></a></h2> <a class=\"header-anchor\" href=\"#%E6%B1%82%E8%81%8C%E4%B8%AD%E5%A6%82%E4%BD%95%E8%80%83%E5%AF%9F%E7%AE%97%E6%B3%95\"><span>求职中如何考察算法</span></a> <span>求职中如何考察算法</span> <p>在技术岗求职的语境下，我们所说的「算法」，一般包含两大块，一个是数据结构，一个是算法，它们的考察形式是不同的。</p> <p>「<strong>数据结构</strong>」这部分相对简单，一般只会在面试中考察。比如面试官问你哈希表的原理是什么，为什么它的增删查改效率是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>，以及一系列的追问。这种问题类似于八股文，你只要认真学习理解过，都比较容易回答。</p> <strong>数据结构</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <p>本站的入门章节介绍了所有常见的数据结构的原理及实现，如果时间充裕的话可以动手跟着实现一下，以便加深理解。但如果时间不充裕，把原理理解透彻就行了，一般不需要你手搓数据结构的实现。</p> <p>「<strong>算法</strong>」这部分应该是最让大家头痛的，也就是俗话说的手撕算法题，直接给你一道题目，你需要写出解法通过判题系统。</p> <strong>算法</strong> <p>手撕算法题 100% 会出现在笔试中，属于硬指标，过不了的话面试都没机会。大部分面试中，面试官也可能让你现场手撕算法题，不过相对来说会容易一些，因为实在不行你可以跟面试官交流嘛。</p> <p>本站除了入门章节是数据结构专题章节外，其他所有内容都是围绕算法解题技巧展开的，而且有时间一定要亲自动手做一做，这样才能真正掌握算法技巧。</p> <h2 id=\"刷算法题的关键点在哪里\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E5%9C%A8%E5%93%AA%E9%87%8C\"><span>刷算法题的关键点在哪里</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%88%B7%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9%E5%9C%A8%E5%93%AA%E9%87%8C\"><span>刷算法题的关键点在哪里</span></a> <span>刷算法题的关键点在哪里</span> <p>刷题的关键点在于，构建一套你的解题方法论（本站中经常称之为「框架思维」）。</p> <p>具体的题目没有价值，昙花一现的技巧也没有价值，<strong>成体系、可稳定复现的解题方法论才有价值</strong>。</p> <strong>成体系、可稳定复现的解题方法论才有价值</strong> <p>本站实际上就是我总结的一套思维框架，而不是简单的题解堆砌。你把这套方法论学走，才配得上你付出的时间和金钱。</p> <p>在遇到新的题目时，这套方法论可以给你提供切入点，逐步优化，最终写出解法代码。</p> <p>算法就像数学考试，死记硬背没有用的。遇到新题就没思路，根本原因就是没有掌握属于自己的方法论。</p> <h2 id=\"为什么本站能速成\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%AC%E7%AB%99%E8%83%BD%E9%80%9F%E6%88%90\"><span>为什么本站能速成</span></a></h2> <a class=\"header-anchor\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%AC%E7%AB%99%E8%83%BD%E9%80%9F%E6%88%90\"><span>为什么本站能速成</span></a> <span>为什么本站能速成</span> <p>中学时代，见过那种每天认真听讲做笔记，依然考不好的同学吧？也见过那种天天上课睡大觉，但依然考得好的同学吧？其实学霸的秘密，不在于笔记记得有多工整，而在于「<strong>抽象能力</strong>」。</p> <strong>抽象能力</strong> <p>譬如编程，一个父类可以产生若干子类，一个子类又可以有无数个实例化。</p> <p>如果你执迷于一个个实例化的细节，那完蛋了，即便背诵一千个实例化，还有一万个等着你呢；如果你能从细节跳出来，透过实例化看到父类，一万个实例化，在你眼里其实只是同一个，那自然可以以不变应万变，这就是抽象的力量。</p> <p>在本站开篇的 <a class=\"route-link\" href=\"/algo/essential-technique/algorithm-summary/\">学习数据结构和算法的框架思维</a> 中，我提到了两句话：</p> <a class=\"route-link\" href=\"/algo/essential-technique/algorithm-summary/\">学习数据结构和算法的框架思维</a> <p><strong>数据结构本质上只有两种，一种叫数组，一种叫链表</strong>。其他乱七八糟的都是它们俩的衍生。</p> <strong>数据结构本质上只有两种，一种叫数组，一种叫链表</strong> <p><strong>算法本质就是穷举</strong>。花里胡哨的算法名称都只是名词而已，它们做的事情都本质都是穷举。</p> <strong>算法本质就是穷举</strong> <p>有这两句话作为指导方针，数据结构和算法根本没有什么难的，你以前觉得难，是因为没有从这两句话进行切入。</p> <p>有了这两句话撑腰，就能大杀四方了吗？也不行，下一步是要把这两句话具体化。</p> <p>比如说，针对不同题目的穷举方法是不同的，你就需要对这些场景进行归纳总结，把重复的部分<strong>流程化、框架化</strong>，这些框架就是你的解题方法论。</p> <strong>流程化、框架化</strong> <p>本站的核心框架章节，就是针对常见的算法题总结出了几套框架。</p> <p>有了这些框架，就能大杀四方了吗？还是不够，下一步是通过不断地实践，把这些框架<strong>内化</strong>，做到随心运用。</p> <strong>内化</strong> <p>本站目录中标有「强化练习」的习题章节就是这个目的，针对同一套框架进行大量的重复练习，直接给你练出肌肉记忆，真正拥有自己的解题方法论。</p> <p>综上，就是我探索出的科学的刷题方法，本站的所有内容都是围绕上述过程展开的。</p> <h2 id=\"算法学习的几个坑\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91\"><span>算法学习的几个坑</span></a></h2> <a class=\"header-anchor\" href=\"#%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91\"><span>算法学习的几个坑</span></a> <span>算法学习的几个坑</span> <h3 id=\"坑一-被误导-浪费时间\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%80-%E8%A2%AB%E8%AF%AF%E5%AF%BC-%E6%B5%AA%E8%B4%B9%E6%97%B6%E9%97%B4\"><span>坑一：被误导，浪费时间</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%80-%E8%A2%AB%E8%AF%AF%E5%AF%BC-%E6%B5%AA%E8%B4%B9%E6%97%B6%E9%97%B4\"><span>坑一：被误导，浪费时间</span></a> <span>坑一：被误导，浪费时间</span> <p>尤其是初学者，特别容易被误导，以为算法很高大上，非要有很好的数学基础，非要啃完算法导论才算是入门，所以从心理上就畏惧算法。</p> <p>我对这个问题有切身体会，刚学算法那会儿，我会去搜索过各种资料、经验贴之类的，我就记得很多所谓大佬，你问他怎么入门算法，他告诉你看《算法导论》，然后又甩给你一堆英文课程，还强调一定要看英文的哦，中文的翻译不好。</p> <p>这就好比，你是一个胖子，去问人家怎么减肥，人家告诉你，每天做 100 个俯卧撑，200 个引体向上，肯定有效，你看我就是这样练出来的！</p> <p>呵呵，我要是真能做到这些，还用得着来问么？不过仔细琢磨琢磨，给出这种回答是基于一种什么心理？实际上他根本不在乎你的诉求，他只是想告诉你：我做过这些，我牛逼吧，你羡慕吧，你做不到吧~</p> <p>一些算法的专业书籍都是好书，内容也很硬，但目标用户不一样。大多数人只是为了找技术岗的工作，看这些书性价比真的太低了。</p> <p><strong>什么性价比高？直接刷题。方向首先要明确，只有刷题是正道，其他的都是辅助手段</strong>。如果这个学一点，那个学一点，感觉懂了很多，但最后一笔试发现啥都用不到，傻眼了，找谁说理去？</p> <strong>什么性价比高？直接刷题。方向首先要明确，只有刷题是正道，其他的都是辅助手段</strong> <h3 id=\"坑二-贪多-贪巧\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%BA%8C-%E8%B4%AA%E5%A4%9A-%E8%B4%AA%E5%B7%A7\"><span>坑二：贪多，贪巧</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%9D%91%E4%BA%8C-%E8%B4%AA%E5%A4%9A-%E8%B4%AA%E5%B7%A7\"><span>坑二：贪多，贪巧</span></a> <span>坑二：贪多，贪巧</span> <p>何谓「贪多」？有些读者可能陷入到追求量的陷阱里。比如一些培训机构，标榜自己有几百 G 的资料，内容大而全。</p> <p>在我看来，量多不是优势，反而是劣势。咱就实话实说，哪怕这几百 G 的资料真的不错，你会花那个时间和耐心去看，还是放到收藏夹吃灰？</p> <p>尤其是算法这种偏实践的东西，你光看是不行的，若不动手去练习，终究是纸上谈兵。</p> <p>何谓「贪巧」？大家肯定会被力扣评论区里面一些大佬的精彩解法吸引，<strong>但是我想说，在培养出自己的框架思维之前，不必追求一题多解</strong>。</p> <strong>但是我想说，在培养出自己的框架思维之前，不必追求一题多解</strong> <p>追求一题多解当然是好的，但如果你还没有掌握自己的解题方法论，那还是先老老实实练习本站的框架思维吧。</p> <p>学到后面你就能体会到了，大道至简，算法就是穷举，本站的全部内容都是围绕这两个字。大部分情况下，按照框架写代码，逢山开路遇水搭桥，见招拆招逐步优化，最后写出来的就是最优解，和那些花哨的算法效率是相同的，你以不变应万变，何乐而不为呢？</p> <h3 id=\"坑三-刷题没有章法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%89-%E5%88%B7%E9%A2%98%E6%B2%A1%E6%9C%89%E7%AB%A0%E6%B3%95\"><span>坑三：刷题没有章法</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%9D%91%E4%B8%89-%E5%88%B7%E9%A2%98%E6%B2%A1%E6%9C%89%E7%AB%A0%E6%B3%95\"><span>坑三：刷题没有章法</span></a> <span>坑三：刷题没有章法</span> <p>明确了主要方法是刷题，那么接下来的坑是：刷题没有章法，乱刷一通，胡子眉毛一把抓。力扣上几千道题，你是准备全部刷完背下来么？</p> <p>我不否认大力可以出奇迹，比方说你如果真能刷个一千道题，你肯定会有一些感觉的。但问题是，我有一妙法，可以让你刷一道顶十道，你想不想学呀？想吧，其实很简单，刷题不要贪数量，而是要归纳总结，高度抽象，最终目标是培养出自己的框架思维。</p> <p>说白了，那么多算法题，大多都是换汤不换药，你把药方记住了，汤换来换去，你都是照方抓药，不是么？</p> <p><strong>为啥我这么强调这个框架思维？因为它可以从根本上解决你遇到新题无从下手的问题</strong>。</p> <strong>为啥我这么强调这个框架思维？因为它可以从根本上解决你遇到新题无从下手的问题</strong> <p>比方说吧，如果你掌握了框架思维，现在随便给你一道题目，那你就可以按照固定的思维步骤进行思考：</p> <p>这题让我们干什么？奥，让我们操作字符串。字符串本质就是个数组，所以这题考察的大概是数组相关的算法技巧。</p> <p>数组有什么算法技巧？你心里有数，无非就是 <a class=\"route-link\" href=\"/algo/essential-technique/binary-search-framework/\">二分查找</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">快慢指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">左右指针</a>、<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口</a>、<a class=\"route-link\" href=\"/algo/data-structure/prefix-sum/\">前缀和数组</a>、<a class=\"route-link\" href=\"/algo/data-structure/diff-array/\">差分数组</a>，主要就这些。</p> <a class=\"route-link\" href=\"/algo/essential-technique/binary-search-framework/\">二分查找</a> <a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">快慢指针</a> <a class=\"route-link\" href=\"/algo/essential-technique/array-two-pointers-summary/\">左右指针</a> <a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口</a> <a class=\"route-link\" href=\"/algo/data-structure/prefix-sum/\">前缀和数组</a> <a class=\"route-link\" href=\"/algo/data-structure/diff-array/\">差分数组</a> <p>二分查找的适用场景是什么？差分数组的适用场景是什么？你挨个想一遍，这个不行换那个，总能试出来个相对靠谱的吧？</p> <p>好，比方说你最后感觉这个题用滑动窗口比较靠谱，那么换一般人，你告诉他这是滑动窗口，他大概率半天憋不出来一行代码。但你不一样，你知道滑动窗口的代码框架，所以你是先把框架写出来，然后往框架里面填充代码。</p> <p>如何填充？简单啊，<a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口核心框架</a> 总结过了，用滑动窗口要自问三个问题，你回答一下这三个问题，然后这个题就写完了，提交代码一遍过。爽不爽？</p> <a class=\"route-link\" href=\"/algo/essential-technique/sliding-window-framework/\">滑动窗口核心框架</a> <p>爽吧，那我再给你 100 道 <a class=\"route-link\" href=\"/algo/problem-set/sliding-window/\">滑动窗口习题</a>，你都按完全相同的套路，改点细节就都解决了。这时候，你觉得算法还难么？</p> <a class=\"route-link\" href=\"/algo/problem-set/sliding-window/\">滑动窗口习题</a> <h3 id=\"坑四-解题风格不统一\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9D%91%E5%9B%9B-%E8%A7%A3%E9%A2%98%E9%A3%8E%E6%A0%BC%E4%B8%8D%E7%BB%9F%E4%B8%80\"><span>坑四：解题风格不统一</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%9D%91%E5%9B%9B-%E8%A7%A3%E9%A2%98%E9%A3%8E%E6%A0%BC%E4%B8%8D%E7%BB%9F%E4%B8%80\"><span>坑四：解题风格不统一</span></a> <span>坑四：解题风格不统一</span> <p>如果你避开了前面的坑，现在可以探讨一些细节层面的问题了。</p> <p>比如你看不同人写的解法，那么他们的代码风格，比如算法框架、变量命名等方面都不一样，这可能会产生问题。</p> <p>风格这个东西没什么对错，但对于新手，不同的代码风格会提高理解成本。而且新手会不自觉地学习别人的代码风格，那么不同的代码风格会导致你自己的解题风格不统一，难以形成固定的套路框架，发挥的稳定性就下降了。</p> <p>本站的所有算法框架、代码风格全部保持同样的风格，甚至会解释为什么使用这种风格，比如 <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-vs-dfs/\">解答回溯算法/DFS算法的若干疑问</a> 解释了 backtrack/DFS 算法的递归函数为何不应该设置返回值。</p> <a class=\"route-link\" href=\"/algo/essential-technique/backtrack-vs-dfs/\">解答回溯算法/DFS算法的若干疑问</a> <p>我建议初学时使用较为统一的代码风格和模板，先把模板理解透彻，运用纯熟，然后你就可以想咋写咋写了，因为你咋写都能写对。</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/intro/quick-learning-plan/\" aria-label=\"速成读者学习规划\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->速成读者学习规划</div></a><a class=\"route-link auto-link next\" href=\"/algo/intro/how-to-practice/\" aria-label=\"习题章节的练习/复习方法\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">习题章节的练习/复习方法<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/intro/quick-learning-plan/\" aria-label=\"速成读者学习规划\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->速成读者学习规划</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->速成读者学习规划</div> <a class=\"route-link auto-link next\" href=\"/algo/intro/how-to-practice/\" aria-label=\"习题章节的练习/复习方法\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">习题章节的练习/复习方法<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">习题章节的练习/复习方法<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}