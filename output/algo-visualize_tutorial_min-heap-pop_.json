{
    "url": "https://labuladong.online/algo-visualize/tutorial/min-heap-pop/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: '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'\n    } // 创建一个小顶堆，并初始化一些元素在里面\nlet minHeap = Heap.createMin([1,6,8,2,4,10,13,0,7]);\n\n// 步骤一、把堆顶元素删除，把底层最右侧元素移动到堆顶\nlet topNode = minHeap._getRoot();\nlet bottomNode = topNode.left.left.right;\n// 摘除底部最右侧元素\nlet parent = bottomNode.parent;\nbottomNode.parent = null;\nif (parent.left === bottomNode) {\n    parent.left = null;\n} else {\n    parent.right = null;\n}\n// 删除堆顶元素，把底部最右侧元素放到堆顶\ntopNode.val = bottomNode.val;\n// 此时 topNode.val 大于子树节点的值，小顶堆的性质被破坏\n\n// 步骤二、把新的堆顶元素下沉到正确位置，维护小顶堆的性质\n// 我们在后续代码实现中把这个过程称为 sink\nlet p = topNode;\n// @visualize color p #6194be\nwhile (p.left || p.right) {\n    // 选择 p 的左右子节点中值较小的那个\n    let min = p;\n    if (p.left !== null && p.left.val < min.val) {\n        min = p.left;\n    }\n    if (p.right !== null && p.right.val < min.val) {\n        min = p.right;\n    }\n    // 如果 p 的值已经比左右子节点都小，说明 p 已经在正确位置\n    if (min === p) break;\n    // 否则的话，通过交换操作将 p 节点下沉\n    let temp = p.val;\n    p.val = min.val;\n    min.val = temp;\n    p = min;\n}\n\n// 此时，小顶堆的性质恢复，堆顶元素删除完成\nconsole.log('min heap recovered');\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}