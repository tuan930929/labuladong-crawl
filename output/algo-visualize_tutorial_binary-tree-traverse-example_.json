{
    "url": "https://labuladong.online/algo-visualize/tutorial/binary-tree-traverse-example/",
    "title": "labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: 'H4sIAOI5UWgC/+Vd3Y/jOHL/Vwzvw+0GPTP6lryHQTI7O7uY3GzPomf2kqCn0ZAlypY/JLckfy4G2Czugnwfco+5lwBBkuc8BEj2Lsg/c317919EYlE0KdG2rLE9Mraf3EWxWCwWf0VWUdTX7ThBk7j9cev663aynKD0V/vLq5efXz35on3RasdOiGnXwXQ0umhJNyltZo+m+Llb31dlP3vMd/H/jich22i/vWitmX367OmLJ1dPXj9/ednGlaNLe4xLksieoShGm9rpjkJnmNI8exSj9P8A6l3r0kVLt3hJbqPxRHIYUVzVs00HRBExz8V79udfXj179YpIlzehmdZFS+t0Co3cupLd0ZlW9K4juxVaefrkxQuOvyGnfZCkIv/5ItGWDH9kqZYsV1XorT0aXYVhskuhSTRl9allCtVKGl0L07UTp8+byGdfXT7lmklZyBkDbxo4ogHO6M8/xZzT0TQzkh31pmMUJNj62lEmuMi8tnd+Le50svRkKtNlmDzt20EPrfvLamoSoU/9eDKyl7eeMfOFGnt7sx4ITXY6hl11IKLiIOTa2TACZlpuavvo//Nnr7OSsDtATlJ83nYcFGdazdixapLZLnUVQ3E86BLHhyoyb+wVNLZm64SjMOL0/4HdMWVbZk23o3V1p7LpRsiZRrEfBrkBR2hkJ+izzGxczmy2QxIjPhFEcZGrKpUFeX315OlPnl9+fsta7zb+3W5Xy/mXBnw7zFjGRYsHmRzrBEP+9OWLl1dZbdB+pnQTuYaJBRyiZUaRDeuBIsn8aLGmUbYv1iR0xzTsLq+qmpbG9FJRzIuWoupMQ5ap6JLGN/Ti5ee4ocjv+cF6jiRogZtNgQJFLflNwHWDUFmlKpKRNWfcCCfgWq8bxyoH67Wuknhs3nGaUhzJkN1amhohLykOhTtRR4jrhJ5qUDGkm/cPvyxkuLomdU+LglQ1FVGQPr/RNpWdo0anOAN5fX/kRigojlyo2/2Y18grAUd4jOUoFRj5xmK8wuoa+hOinBpsU/MKekm/OBdZpsyAdlDH9jSBD6DSHMAH3MrvBr4bPYFQfRwq5003FZepsZYtvozLRT3WtP7tyJwOmdS16iEz/FCEEK2cHKLtdP2u11OZCKKDgTXWzwWiq0+5w4A0VU5FkKbPbzRTc+e40Rm/G6SR01OHu0EaHtsG0mESDu72Beky2/1AWnY7XckVgDSV5hAgrZwApKnAPEg3fPFMjbVs8QKQVnYjTgXr3w7SRteyFP0dQRp+mEK0Nk+O1o4kd5FXS3dltKZxqbPAauWUWE1VUxGp6ZTdjbKrKJbnu1EWHtuGsnfLjt/fF2XLbPdDWdu0bUO0FKbSHAJl1ROgLBWYR1n1QChLjExgP5+8ePn0J5yBZrNuZ0xPZHa0Dxshsv3hm/YHb9of7TY4AS8XYn8H4zfzYz9BbrugpjrdnNjp1ErEnnOb7WwxjT2CW6QdFqRSs3U6haa/+uKLv7i9evb6q6tLISDl1iPLqQXIciG0DOjPLHB029blDaC0pZU90LmWQG9vts+YYlRf0ZTMy8jbmWue63XcWp4u9e39na7OzLy1ZTTM1UlIRvIP3dHJBUYjS0XyURydstnRWYpsOarA0VFpDuHotBM4Oiow7+i0c3J0tA8HcHQCXu/k6ESy1XR0AlbNdHSlyMkxXN1t85zdbQ13Z2QbU8vcwL7aLnwaxChhNuGqKj9QDbXuJryjOaYlH3oLrlqdi5baMUtb8KK11N+Ej1A6pKXdOKGyWlcNK5PFOvxufJfOBB6yBFVmBVgR8BHCVE1edSFKwEoMURB4PD5EkXZY161plqrtCVA7Z75yVDCq0Pwx19k1kyaClfbtrdcfhNK5rLVPnQKgyqm43qbPb0QTrREpgOKa3Ys78+FRUgBb1uyObFtWR7Bmp9IcYs2un2DNTgXm1+x6s1MA1FjLFi9IAai7IaeC9W9PAUgeQkg5+OoDKJowKaCdPCmAPBd5Wi1tnntSQG1yrIRO4t2469lR0N2Nu/DYtqRAty87yr64W2ZbJymQu1KONZXnEMhrnAB5qcA88hrnFC2hfThAtETA652iJSLZam5FBKzEWxGYiMffipB2ytES5RTRErV50RL1uJsWpZbPO/f0QLMz4adwesXNxqQ/jOZHcXo7EwRCp0flOYTTM0/g9KjAvNMzz8np0T4cwOkJeL2T0xPJVtPpCVg11Ompp3B6WvOcntbsFEHFTTqkCKrEBffbpAuSBLBJP0KSgG7TgaIJ0wZaM9IGAr9Zgi+tAtQI+AihqyavurAlYNW0tEFHdy3LPHTaQH+/aQO92WBU8c0OAkbKod/sEIARvNlxEjCCH4oQlZRmoJIgdVBCJaUCkgj4CFGpJq+6qCRgJUYleNXt+KhE2mFfa9CQiqRDo5LxflHJOG5cQK31xqkwmTlQgvH0bCID6mmTmVQ5FWMD9PmNaKI24qXTYnwhWASqc5SXTrfEF3Rd8YyuILpApTlEdME6QXSBCsxHF6xmJzOpsZYtXpDMrJB+q2D925OZntJRHPeUCxMoUoV5TvX0r6pKKnJQLUWLXlVdrbr+6GwyndppoZ0qpyK00+c3Gre++7RhjhO7oT0ZTYaj3dAOj23Llw7VyLD3hfYy2/3ypZLjyo4kgHYqzSGgvXMCaKcC89DeaTa0U2MtW7wA2vXdiFPB+nfcJ2AoZvFKmRNBO/zQhRivn/4sCzIkvVNL4+d+lkVvclqPTvQK2Byb43EFbMaPbcPmntZXl3tjc4ltrbMsigCdqTwHue1FOgE8U4kL171I55TYo504QGJPwOudEnsi2WrGogSsxLEomIrHj0WRdsqJPe0UiT2zeYk987hRK62W1zv70yzaD93tFaNNKw9N5kdxe7tPs4jcHpXnIG7vFLecUYkLbk8+J7dHO3EAtyfg9U5uTyRbTbcnYNVQt6efwu1ZzXN7VrNTyBU38ySFrB56My9KIePN/GlTyOXtPBTpwuyy3ozsssC7liBOrwBHAj5CeKvJqy60CViJoQ0Cn8eHNtIOY6pux7U89dDZ5c77zS53jrtO12tlIITZ5cgKz+hVWf20KQiqnIprdfr8RjQxGpGCKF1vM9GH3aOkILas9w3T0HVDdL1NLs1BVvunuC6TSlxY7Tf8vkxqrmWbFyQhjN2gU8H+tychFGTajtKQVQtQDGFawjh96tmxNKveGJx7WsJocnyGzv0KeK33x3oFvMaPbUtL9BM0TfbG6xLbWmkJ0YVkVJ6DIPYprt6kEhcQ+6zu3qSdOEB8RsDrneIzItlqbmIErMSbGJiKx9/EkHbK8RnjJFeSSQ28k0w67oannt87+8TED97xFTcq8dTxzKM4vt2JCZHjo/IcxPGd4ipOKnHB8Z3VXZy0EwdwfAJe7+T4RLLVdHwCVg11fOZJHF8TL+Ns+G2cFbf4JDWhHXqLL0hNwBa/MakJuskHiiFMVhjNSFYIPG4J9owq1wWX+Qghryav2lcPl1k1LVmhKJIjKYdOVsjv+WJPWWk2iFV8D4aAmH7o92AEIAbvwTQYxOCHKkQztRloJkh0lNBMrYBAAj5CNKvJqy6aCVg17cVelE0Y/eBopr5nNFObjWYVP/FL0Mw49Ed+BWgGH/k9BzSDH7IQ1uRmwJrg7eASrMkVoEjARwhrNXnVhTUBKxGs7f4i/LFATXf1jnXw8ySy9p5BrXylE/NV9U24puvpLNBNY3sXkaVaMnxXgo52NrBf49tMJLuj438kAiQyiZYpZJmkkm8waOSaJZ0cTzPIXpDE2uBLoetPOmQss4kBlXGKkotCQvCWs6X1VU/ryto+leFqlnVlha3MfGtiXZ3eS3XBHMxbM9D3aR22zuvKxj6VYcm6rqzyotMTg6zoZJ9/wXiJNQOZZ0BvrWEZkDX2BXObQG4J3N0lcnHNQ8dcIZVhnmaViXcMVpOYWH4OYxdMALlwgQGBGE5Ra88LAVXNpKNkzckoZZLiYwZgtaoukm2g6Z6/flynRm5IosfhinhWD/SDFHLxqqlSZVAZowfb0+5YPSgiPdBb6Rk9MFC8WRMjpx9Nq2vibpjY0+qagA9csZqgn8mTi58TKlUGpTGa8B3LZTVhijRBv6nFaYIa4mZNTE1pGlTXhGfYs0V1TThGOAeLo0VSrlOsErafvd6Q7ScJLJf7CkyLfaXGtrmvXdXr2mvhswwXCG8ZIuGXA613JxYeho81135iVxIemNYQPlgFZp8Kj1erWPh0ySo22Zk+q95XuHKVNVl6hbNcvN6yXBlPa0Ybib3iTFYTaYLe8rqvya5CWZtXN9mZHvnj6iY7GU8dXzzqoBKmn33dlSuNOjAt9pXC4ea+OotOf7qHyc66y7FYeBg+RvjuPFarmSxmWkN4W4sXYXWTnSRxklR/3AvdUVxdNXAsk7VweghcLgZaS5XBgTPKGwZql1WeKlIcPQm6r3tCd+NoWd3Co5kkDapbOLyQxmqCvuAqF1/9KVUGpbFmNByYrCZ0oSbyd+A4TdBl0WZNjFHMrkF2uqfFXWRU18Sgs+ysxNMFVML0s6fPqk0XYFrsKzW2LXO9rw9RdYMedoZIEQsPw8cIv9RMVEl4YFpD+GBqzrvVJ+8q1u093BMcVWBNlh5+kotJ4VJlmNaMNmK/u2K1YQhNNj8dsa/JDoa9aFzdZEdGEE+qm6ynLaYbEB5UwvRzvpxrlUYdmBb7SuFwc19Ddzrew2TtRNH7YuFh+Bjhp3bfqyQ8MK0hvDuVTK+6yc56i4FS/fGgN1hYVR5/SwIVJLQAUYhMAYGLPD+AWBTZ3mUbxOkI+5RbZJmLLMbQvrRxnOW2Lw+ljGX7eZDW8xOM6LeeFS1wxQccOTNUb6gCtI3CLoTiMrI3cCaZN2n/1F9RWl9x4egYupv6Ecrpi0UUZyu/9kuIhRHy3dSb6/iY2DRwEj8M8gIU6rNsKrafRJFNBZnfzQZYxMvpuIuinNxLVtMVCaTF6LNRaNMGhuNgNKBFzwNaENnyRMGnasJwhGza8GA86eEmXiWRH/RysjtbLTqYvBx3Q6qC/thQMflTO6F9DQbGAgeGvozCsR9T+sT0YtzZK9R7tphQ1chxB1vusygKaZ/i8Z2J5XvS60Wol7LniifJzMO8nqVmz5W4i7lk4FbsoMdXitO1iAUCeCidAg5fPAwHAw/6GCT2gq/aW2i47HVqgFyJPY+GWNCvrp5zBd1lr4/jZX/6CgKWGTGJlCRDpfYXNhwfy4jLUAEW6fhQ1Y6W3cGCWsAnU89bD/hAUu+wQT5JUg07cU4fu2Oth2Xxg8TiTKcnz+IuaaNQEoWdJK8kG1yZPxzNJ6RWoSjsodUwr6YqvJ2aPVki1QpFd73eBAMSNtNCYc8f4UUMFBoaV2jry0Wfdu7pyB5PkMs9MZ7LgIGf+L3soQKD1SIEBmnx81JpPBqPJWLK9k99NKfVtLnfhSGjNuu4uuqtWVH5PX2KrfIVorSVQuzjz5A9ZFjMZ0lnkdOZ5wNdwUutbPYs1toemF6PmO6IAZDE7higTj+wR/7KzkAknV9+nERrtZqR6+ZNpQwoU+vOweK6yAldlBownZNJry9zJU/D8SQM0LqvvrzUbMjjFCovNSVeciWlyr3+WMGdR7FjTyhCzKey4gOk8wXRquPhMUCzNf72u3Js4oBI/FmG1/RpN1StAApyyM/65BmTJZyoDOJwtOZtJHMHD1o/9YuuYLrNbXeYgP66T+IYjbsjottoPJFw3escwD9ueeTXDameB8A5KM9D2JnvePg6Qugy1VSbj1CLyvIAtKgsjy2LyvLQsagsjwyLyvKgr6gsj+dyHcvjtLjCZVFCElflauTRU46Yx0g5Yh77FPLOI5VcjTweyRHzqCNHzKOJQt557I+rkUf4OGIex+OlIBE8Ie881sbVyCNqHDGPpQnZ5FGvQvchtsXLTSJYPJFEpsTDRuJIXI08WsQR85gQR8yjQULeedyG7z6JzvC8SVxGyCaPoPA1SJyE7ymJhnDEPObBz1ESyxA2mEceuBp5fIHnTaIIHDGPDgh553t5Xm6yY+fnDtmXc8R8Ry7WN9k789KQHTI/TcjeWGxuZBfL1yB7Vb77ZEfKmzLZaQp55/tCvgbZ/fE6IXs8jpjv7oS8830YVyPfbXHEfJ8lZJPviPgZQfY9vBGR3Q0hvqUJ0ufprgUSBAp+rYN6ihuSEr3mjmawGTY208h+vIY9mMam9Cj+35As6zUXXmODyWyInU3HsJkYNqbJxr/Z0DcbAWDjImwMjQ2fsRtRNmjBxivYfB6b02KzOmy4nA0ssqE1apQ3JNlcUgc0kxXjZez12ndhGh0wcF2YRkeMVSWIiMvNvBz8FKZ1chq4qYym0PbYYYDu4fL18GGfhGlGTgOXhGm0PXYIwTthA6Pygv/BNMqbHWpwRdhyqGzgbDBNW/ch8zWYRnXKmgkMCy6n/QbHgodBzmngVzCN6pkzMexicLmVl4MTwTTKmzVF8CdZuUFlA4+Baes62GFkNJPqB/wFptG+sqYNJobLqTzgHDKaRXUGvgHTaF/ZaQHmicupjOAIMI2OJ/gBTKPtsVMKXEJW3qHyAuhjGuXNTj3Af7B3KhxAPBDXtTDEA5GaHTtz1zNLXs8dQHQg0kEFRAci1TY78QHd4QE6RADgMA0pfxYiAMzhASoh4DVMVFoL8BqI66HFeJ2dlGlnm5cMuR89av3JzI+n2f4KteLETqbxh9kLc48fZzGmP/7RBz/6OPv3Ybo3+ehNMLOjVn5ap/WYbgdwjY9aX78JWumf77UwofX48eNWxoWWZH8RSqZR8GMgvH0TwI9UjlX/49bv/+9X9z//t9//7bfff/s/tAClGw849hakUlMyIzcO77X+CDdKbniAx8h26OEo7H34Bk7lvUl1SXtExMi7hMV+mB38EJfg4x95ERH5+3//9f1vvhGIDAfvKomMT0eKJMY8ihJjpZHW7//6V/e//u63//3N7/71v3773d/f/+Jvfvcv/4RLMxGcCNkJatmtbrqDjpZpbxDKzgkmrVt7NLrCY9T6JPP/D+HRjPQhfvXsIjtEY15kR4j0i5ZxkzW8bvU339z/x9/94S//4f4f/6rcampFUZJrzg96raSPeAmoVnMxPvoxRGnHYwjeXmfnxLTs8otrTUoF0WQT/5at9DfQU2O/aMmajH9rRvrbUPHv7HCjIslVn1E6KX9Vyt73vFal7PinYuDfaqoGFZ6v8swmOfWMrgNdz+i6bm6k3+Czf8401VsY0ON/1+QsXFaKFqny8NJq7JLDdn4C22Y6Et//88/+8M0v7//3l4/u//Pb++9+AQOF38TMnr2FqPknMCLZ6LeuoM0ZevQCzdAoJeIBgnjEBEXj1GgDvId65NqJ/SBOoqmTzmP0oGvHvvMIRvdBNroP8sElRXBwLjtPiaV2UivrhbC9SKZJGPlpI2/fvv1/Pc4HM8OpAAA='\n    } // @visualize status(root==null?'#':root.val)\nvar traverse = function(root) {\n    if (root === null) {\n        return;\n    }\n\n    // 进入节点\n    // @visualize color *root #7ed67e\n    console.log(\"enter\", root.val);\n    traverse(root.left);\n    traverse(root.right);\n    // 离开节点\n    // @visualize color *root #unset\n    console.log(\"leave\", root.val);\n}\n\n// 创建一棵二叉树\nlet _allRoot = BTree.createRoot([1, 2, 3, 7, 4, 5, 6]);\n\n// 开始遍历二叉树\ntraverse(_allRoot);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}