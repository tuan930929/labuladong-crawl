{
    "url": "https://labuladong.online/algo-visualize/leetcode/spiral-matrix/",
    "title": "螺旋矩阵 | labuladong 算法可视化",
    "content": "You need to enable JavaScript to run this app. 页面加载失败，请尝试清除浏览器缓存并刷新页面。 Error occurred when loading the page, please try to clear browser cache and refresh the page. window.__viz = {\n        data: ''\n    } var spiralOrder = function(matrix) {\n    var m = matrix.length, n = matrix[0].length;\n\n    var upper_bound = 0, lower_bound = m - 1;\n    var left_bound = 0, right_bound = n - 1;\n    var res = [];\n  \n    // res.length == m * n 则遍历完整个数组\n    while (res.length < m * n) {\n        if (upper_bound <= lower_bound) {\n            // 在顶部从左向右遍历\n            for (var j = left_bound; j <= right_bound; j++) {\n                // @visualize color *matrix[upper_bound][j] #7cd930\n                res.push(matrix[upper_bound][j]);\n            }\n            // 上边界下移\n            upper_bound++;\n        }\n\n        if (left_bound <= right_bound) {\n            // 在右侧从上向下遍历\n            for (var i = upper_bound; i <= lower_bound; i++) {\n                // @visualize color *matrix[i][right_bound] #ccc53a\n                res.push(matrix[i][right_bound]);\n            }\n            // 右边界左移\n            right_bound--;\n        }\n\n        if (upper_bound <= lower_bound) {\n            // 在底部从右向左遍历\n            for (var j = right_bound; j >= left_bound; j--) {\n                // @visualize color *matrix[lower_bound][j] #30d9d1\n                res.push(matrix[lower_bound][j]);\n            }\n            // 下边界上移\n            lower_bound--;\n        }\n\n        if (left_bound <= right_bound) {\n            // 在左侧从下向上遍历\n            for (var i = lower_bound; i >= upper_bound; i--) {\n                // @visualize color *matrix[i][left_bound] #d130d9\n                res.push(matrix[i][left_bound]);\n            }\n            // 左边界右移\n            left_bound++;\n        }\n    }\n    return res;\n};\n\nlet matrix = [\n    [1, 2, 3, 4, 5],\n    [16, 17, 18, 19, 6],\n    [15, 24, 25, 20, 7],\n    [14, 23, 22, 21, 8],\n    [13, 12, 11, 10, 9]\n];\nlet result = spiralOrder(matrix);\n window.onerror = function (message, source, lineno, colno, error) {\n        const root = document.getElementById('root');\n        if (!root || !root.innerHTML.trim()) {\n            console.log('window on error:', error, message)\n            document.getElementById('error-message').style.display = 'block';\n        }\n    };\n\n    // MutationObserver to monitor changes in #root\n    const observer = new MutationObserver(function (mutations) {\n        const root = document.getElementById('root');\n        if (root && root.innerHTML.trim()) {\n            document.getElementById('error-message').style.display = 'none';\n            window.onerror = null; // Remove the window.onerror listener\n            observer.disconnect(); // Stop observing\n        }\n    });\n\n    // Observe changes in the child list of #root\n    observer.observe(document.getElementById('root'), {\n        childList: true,\n        subtree: true\n    }); \n"
}