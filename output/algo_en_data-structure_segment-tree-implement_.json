{
    "url": "https://labuladong.online/algo/en/data-structure/segment-tree-implement/",
    "title": "Basic Segment Tree Implementation | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Basic Segment Tree Implementation</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"Authorüñä\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"Wordsüî†\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 7183 words</span><meta property=\"wordCount\" content=\"7183\"></span></div><hr></div> <h1><!---->Basic Segment Tree Implementation</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"Authorüñä\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"Wordsüî†\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 7183 words</span><meta property=\"wordCount\" content=\"7183\"></span></div> <span class=\"page-author-info\" aria-label=\"Authorüñä\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"Wordsüî†\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 7183 words</span><meta property=\"wordCount\" content=\"7183\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 7183 words</span> <meta property=\"wordCount\" content=\"7183\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 307. Range Sum Query - Mutable https://leetcode.com/problems/range-sum-query-mutable </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a></li></ul></div><p>The segment tree structure is also used to solve interval query problems while supporting dynamic updates of elements, addressing the limitations of the prefix sum technique. However, the trade-off is a slightly higher time complexity, with both interval query and single-point update operations having a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p><p>The principles of segment trees have already been explained in the previous data structure basics chapter <a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a>. This article will not repeat them and will directly provide the code implementation of segment trees.</p><h2 id=\"linked-implementation-vs-array-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linked-implementation-vs-array-implementation\"><span>Linked Implementation vs. Array Implementation</span></a></h2><p>The most straightforward idea is to implement a segment tree using a <code>SegmentNode</code> class similar to a binary tree node. We can refer to this as the linked implementation of a segment tree:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Since a segment tree is a structure that is nearly a complete binary tree, it can also be stored using an array. There is no need to actually use <code>SegmentNode</code> to construct the tree structure. We might call this implementation the array-based implementation of the segment tree:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>From the perspective of algorithm analysis, the theoretical complexity of both implementations is the same. However, the linked structure requires additional maintenance of pointer information, so in actual execution, it will certainly be less efficient than the array implementation. Nonetheless, implementing tree structures on arrays is more abstract and harder to understand.</p><p>This site will provide code for both implementations. We will first explain the linked implementation. Once you understand it, the code for the array implementation will be much easier to grasp.</p><p>In actual written exams, if you need to use a segment tree, you can directly copy the code for the array implementation.</p><h2 class=\"hidden-for-toc\" id=\"implementing-segment-tree-with-linked-structure\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#implementing-segment-tree-with-linked-structure\"><span>Implementing Segment Tree with Linked Structure</span></a></h2><h2 class=\"hidden-for-toc\" id=\"array-implementation-of-segment-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#array-implementation-of-segment-tree\"><span>Array Implementation of Segment Tree</span></a></h2><h2 class=\"hidden-for-toc\" id=\"advanced-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advanced-optimization\"><span>Advanced Optimization</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 307. Range Sum Query - Mutable https://leetcode.com/problems/range-sum-query-mutable </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a></li></ul></div><p>The segment tree structure is also used to solve interval query problems while supporting dynamic updates of elements, addressing the limitations of the prefix sum technique. However, the trade-off is a slightly higher time complexity, with both interval query and single-point update operations having a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p><p>The principles of segment trees have already been explained in the previous data structure basics chapter <a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a>. This article will not repeat them and will directly provide the code implementation of segment trees.</p><h2 id=\"linked-implementation-vs-array-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linked-implementation-vs-array-implementation\"><span>Linked Implementation vs. Array Implementation</span></a></h2><p>The most straightforward idea is to implement a segment tree using a <code>SegmentNode</code> class similar to a binary tree node. We can refer to this as the linked implementation of a segment tree:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>Since a segment tree is a structure that is nearly a complete binary tree, it can also be stored using an array. There is no need to actually use <code>SegmentNode</code> to construct the tree structure. We might call this implementation the array-based implementation of the segment tree:</p><div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>From the perspective of algorithm analysis, the theoretical complexity of both implementations is the same. However, the linked structure requires additional maintenance of pointer information, so in actual execution, it will certainly be less efficient than the array implementation. Nonetheless, implementing tree structures on arrays is more abstract and harder to understand.</p><p>This site will provide code for both implementations. We will first explain the linked implementation. Once you understand it, the code for the array implementation will be much easier to grasp.</p><p>In actual written exams, if you need to use a segment tree, you can directly copy the code for the array implementation.</p><h2 class=\"hidden-for-toc\" id=\"implementing-segment-tree-with-linked-structure\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#implementing-segment-tree-with-linked-structure\"><span>Implementing Segment Tree with Linked Structure</span></a></h2><h2 class=\"hidden-for-toc\" id=\"array-implementation-of-segment-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#array-implementation-of-segment-tree\"><span>Array Implementation of Segment Tree</span></a></h2><h2 class=\"hidden-for-toc\" id=\"advanced-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advanced-optimization\"><span>Advanced Optimization</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 307. Range Sum Query - Mutable https://leetcode.com/problems/range-sum-query-mutable </h3></div> <h3 tabindex=\"-1\"> 307. Range Sum Query - Mutable https://leetcode.com/problems/range-sum-query-mutable </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr></tbody></table></div> <p class=\"hint-container-title\">This article will resolve</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">Difficulty</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td><td style=\"text-align:center;\">üü†</td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a></td> <a href=\"https://leetcode.com/problems/range-sum-query-mutable/\" target=\"_blank\" rel=\"noopener noreferrer\">307. Range Sum Query - Mutable</a> <td style=\"text-align:center;\">üü†</td> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure/prefix-sum/\">A Beautiful Algorithm Technique: Prefix Sum Array</a> <p>The segment tree structure is also used to solve interval query problems while supporting dynamic updates of elements, addressing the limitations of the prefix sum technique. However, the trade-off is a slightly higher time complexity, with both interval query and single-point update operations having a time complexity of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>‚Å°</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mi>log</mi> <mo>‚Å°</mo> <mi>n</mi> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(\\log n)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span> <span style=\"margin-right:0.01389em;\">g</span> <span class=\"mspace\" style=\"margin-right:0.1667em;\"></span> <span class=\"mord mathnormal\">n</span> <span class=\"mclose\">)</span> <p>The principles of segment trees have already been explained in the previous data structure basics chapter <a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a>. This article will not repeat them and will directly provide the code implementation of segment trees.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/segment-tree-basic/\">Core Principles and Visualization of Segment Trees</a> <h2 id=\"linked-implementation-vs-array-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#linked-implementation-vs-array-implementation\"><span>Linked Implementation vs. Array Implementation</span></a></h2> <a class=\"header-anchor\" href=\"#linked-implementation-vs-array-implementation\"><span>Linked Implementation vs. Array Implementation</span></a> <span>Linked Implementation vs. Array Implementation</span> <p>The most straightforward idea is to implement a segment tree using a <code>SegmentNode</code> class similar to a binary tree node. We can refer to this as the linked implementation of a segment tree:</p> <code>SegmentNode</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree Node</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentNode</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The index interval corresponding to the current node</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> l</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">r</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // The aggregated value of the elements in the current interval</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> mergeValue</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Left and right child nodes</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> left</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">, right = </span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">null</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    SegmentNode</span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\"> root</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>Since a segment tree is a structure that is nearly a complete binary tree, it can also be stored using an array. There is no need to actually use <code>SegmentNode</code> to construct the tree structure. We might call this implementation the array-based implementation of the segment tree:</p> <code>SegmentNode</code> <div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;--shiki-light-bg:#FFFFFF;--shiki-dark-bg:#1E1E1E;\"><pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre><div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div> <pre class=\"shiki shiki-themes light-plus dark-plus vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code></pre> <code><span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span></code> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">// Segment Tree</span> <span class=\"line\"><span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span></span> <span style=\"--shiki-light:#0000FF;--shiki-dark:#569CD6;\">class</span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\"> SegmentTree</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\"> {</span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // Store the complete binary tree structure in an array</span> <span class=\"line\"><span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span><span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span></span> <span style=\"--shiki-light:#267F99;--shiki-dark:#4EC9B0;\">    int</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">[] </span> <span style=\"--shiki-light:#001080;--shiki-dark:#9CDCFE;\">tree</span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">;</span> <span class=\"line\"></span> <span class=\"line\"><span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span></span> <span style=\"--shiki-light:#008000;--shiki-dark:#6A9955;\">    // ...</span> <span class=\"line\"><span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span></span> <span style=\"--shiki-light:#000000;--shiki-dark:#D4D4D4;\">}</span> <div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0;\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <div class=\"line-number\"></div> <p>From the perspective of algorithm analysis, the theoretical complexity of both implementations is the same. However, the linked structure requires additional maintenance of pointer information, so in actual execution, it will certainly be less efficient than the array implementation. Nonetheless, implementing tree structures on arrays is more abstract and harder to understand.</p> <p>This site will provide code for both implementations. We will first explain the linked implementation. Once you understand it, the code for the array implementation will be much easier to grasp.</p> <p>In actual written exams, if you need to use a segment tree, you can directly copy the code for the array implementation.</p> <h2 class=\"hidden-for-toc\" id=\"implementing-segment-tree-with-linked-structure\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#implementing-segment-tree-with-linked-structure\"><span>Implementing Segment Tree with Linked Structure</span></a></h2> <a class=\"header-anchor\" href=\"#implementing-segment-tree-with-linked-structure\"><span>Implementing Segment Tree with Linked Structure</span></a> <span>Implementing Segment Tree with Linked Structure</span> <h2 class=\"hidden-for-toc\" id=\"array-implementation-of-segment-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#array-implementation-of-segment-tree\"><span>Array Implementation of Segment Tree</span></a></h2> <a class=\"header-anchor\" href=\"#array-implementation-of-segment-tree\"><span>Array Implementation of Segment Tree</span></a> <span>Array Implementation of Segment Tree</span> <h2 class=\"hidden-for-toc\" id=\"advanced-optimization\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#advanced-optimization\"><span>Advanced Optimization</span></a></h2> <a class=\"header-anchor\" href=\"#advanced-optimization\"><span>Advanced Optimization</span></a> <span>Advanced Optimization</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/tree-map-implement/\" aria-label=\"Implementing TreeMap/TreeSet\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Implementing TreeMap/TreeSet</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure/segment-tree-dynamic/\" aria-label=\"Dynamic Segment Tree Implementation\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Dynamic Segment Tree Implementation<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/tree-map-implement/\" aria-label=\"Implementing TreeMap/TreeSet\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Implementing TreeMap/TreeSet</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Implementing TreeMap/TreeSet</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure/segment-tree-dynamic/\" aria-label=\"Dynamic Segment Tree Implementation\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Dynamic Segment Tree Implementation<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Dynamic Segment Tree Implementation<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}