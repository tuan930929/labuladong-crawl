{
    "url": "https://labuladong.online/algo/en/data-structure-basic/hashtable-chaining/",
    "title": "Implement HashMap with Separate Chaining | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Implement HashMap with Separate Chaining</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5375 words</span><meta property=\"wordCount\" content=\"5375\"></span></div><hr></div> <h1><!---->Implement HashMap with Separate Chaining</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5375 words</span><meta property=\"wordCount\" content=\"5375\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 5375 words</span><meta property=\"wordCount\" content=\"5375\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 5375 words</span> <meta property=\"wordCount\" content=\"5375\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a></li></ul></div><p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. It mentioned that there are two main methods to resolve hash collisions: the chaining method and open addressing method (also known as linear probing):</p><div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision-en.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>This article will specifically introduce the implementation principles and code for the chaining method.</p><p><strong>Firstly, I will use a <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to implement a simplified version of a hash table using the chaining method. This will help you intuitively understand how the chaining method implements the APIs for adding, deleting, finding, and updating, and how it resolves hash collisions. Finally, I will provide a more complete Java code implementation.</strong></p><h2 id=\"simplified-implementation-of-the-chaining-method\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-implementation-of-the-chaining-method\"><span>Simplified Implementation of the Chaining Method</span></a></h2><p>The article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> has already explained the relationship between hash functions and the type of <code>key</code>. The role of a <code>hash</code> function is to convert a <code>key</code> into an index of an array in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time, and a <code>key</code> can be of any immutable type.</p><p>However, to facilitate understanding here, I will make the following simplifications:</p><ol><li><p>The hash table we implement only supports <code>key</code> and <code>value</code> types as <code>int</code>. If the <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we implement is simply a modulo operation, i.e., <code>hash(key) = key % table.length</code>. This also conveniently simulates hash collisions, for example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> produce the value 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed upon the creation of the hash table, without considering load factors or dynamic resizing.</p></li></ol><p>These simplifications help us focus on the core logic of adding, deleting, finding, and updating, and can be supported by the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to enhance understanding.</p><h3 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h3><h3 class=\"hidden-for-toc\" id=\"visual-panel-demonstration-of-the-process\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#visual-panel-demonstration-of-the-process\"><span>Visual Panel Demonstration of the Process</span></a></h3><h2 class=\"hidden-for-toc\" id=\"complete-code-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code-implementation\"><span>Complete Code Implementation</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a></li></ul></div><p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. It mentioned that there are two main methods to resolve hash collisions: the chaining method and open addressing method (also known as linear probing):</p><div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision-en.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div><p>This article will specifically introduce the implementation principles and code for the chaining method.</p><p><strong>Firstly, I will use a <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to implement a simplified version of a hash table using the chaining method. This will help you intuitively understand how the chaining method implements the APIs for adding, deleting, finding, and updating, and how it resolves hash collisions. Finally, I will provide a more complete Java code implementation.</strong></p><h2 id=\"simplified-implementation-of-the-chaining-method\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-implementation-of-the-chaining-method\"><span>Simplified Implementation of the Chaining Method</span></a></h2><p>The article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> has already explained the relationship between hash functions and the type of <code>key</code>. The role of a <code>hash</code> function is to convert a <code>key</code> into an index of an array in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time, and a <code>key</code> can be of any immutable type.</p><p>However, to facilitate understanding here, I will make the following simplifications:</p><ol><li><p>The hash table we implement only supports <code>key</code> and <code>value</code> types as <code>int</code>. If the <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we implement is simply a modulo operation, i.e., <code>hash(key) = key % table.length</code>. This also conveniently simulates hash collisions, for example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> produce the value 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed upon the creation of the hash table, without considering load factors or dynamic resizing.</p></li></ol><p>These simplifications help us focus on the core logic of adding, deleting, finding, and updating, and can be supported by the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to enhance understanding.</p><h3 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h3><h3 class=\"hidden-for-toc\" id=\"visual-panel-demonstration-of-the-process\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#visual-panel-demonstration-of-the-process\"><span>Visual Panel Demonstration of the Process</span></a></h3><h2 class=\"hidden-for-toc\" id=\"complete-code-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code-implementation\"><span>Complete Code Implementation</span></a></h2><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisite Knowledge</p><p>Before reading this article, you should first learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a></li></ul></div> <p class=\"hint-container-title\">Prerequisite Knowledge</p> <p>Before reading this article, you should first learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/linkedlist-basic/\">Basics of Linked Lists (Chained Storage)</a> <p>In the previous article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a>, I introduced the core principles and key concepts of hash tables. It mentioned that there are two main methods to resolve hash collisions: the chaining method and open addressing method (also known as linear probing):</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> <div class=\"img-content\"><img src=\"/algo/images/ds-basic/hash-collision-en.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"></div> <img src=\"/algo/images/ds-basic/hash-collision-en.jpeg\" alt class=\"myimage\" loading=\"lazy\" photo-swipe=\"\"> <p>This article will specifically introduce the implementation principles and code for the chaining method.</p> <p><strong>Firstly, I will use a <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to implement a simplified version of a hash table using the chaining method. This will help you intuitively understand how the chaining method implements the APIs for adding, deleting, finding, and updating, and how it resolves hash collisions. Finally, I will provide a more complete Java code implementation.</strong></p> <strong>Firstly, I will use a <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to implement a simplified version of a hash table using the chaining method. This will help you intuitively understand how the chaining method implements the APIs for adding, deleting, finding, and updating, and how it resolves hash collisions. Finally, I will provide a more complete Java code implementation.</strong> <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> <h2 id=\"simplified-implementation-of-the-chaining-method\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-implementation-of-the-chaining-method\"><span>Simplified Implementation of the Chaining Method</span></a></h2> <a class=\"header-anchor\" href=\"#simplified-implementation-of-the-chaining-method\"><span>Simplified Implementation of the Chaining Method</span></a> <span>Simplified Implementation of the Chaining Method</span> <p>The article <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> has already explained the relationship between hash functions and the type of <code>key</code>. The role of a <code>hash</code> function is to convert a <code>key</code> into an index of an array in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time, and a <code>key</code> can be of any immutable type.</p> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/hashmap-basic/\">Core Principles of Hash Tables</a> <code>key</code> <code>hash</code> <code>key</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> <span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span> <math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math> <semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics> <mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow> <mi>O</mi> <mo stretchy=\"false\">(</mo> <mn>1</mn> <mo stretchy=\"false\">)</mo> <annotation encoding=\"application/x-tex\">O(1)</annotation> <span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span> <span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span> <span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span> <span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span> <span class=\"mopen\">(</span> <span class=\"mord\">1</span> <span class=\"mclose\">)</span> <code>key</code> <p>However, to facilitate understanding here, I will make the following simplifications:</p> <ol><li><p>The hash table we implement only supports <code>key</code> and <code>value</code> types as <code>int</code>. If the <code>key</code> does not exist, it returns <code>-1</code>.</p></li><li><p>The <code>hash</code> function we implement is simply a modulo operation, i.e., <code>hash(key) = key % table.length</code>. This also conveniently simulates hash collisions, for example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> produce the value 1.</p></li><li><p>The size of the underlying <code>table</code> array is fixed upon the creation of the hash table, without considering load factors or dynamic resizing.</p></li></ol> <li><p>The hash table we implement only supports <code>key</code> and <code>value</code> types as <code>int</code>. If the <code>key</code> does not exist, it returns <code>-1</code>.</p></li> <p>The hash table we implement only supports <code>key</code> and <code>value</code> types as <code>int</code>. If the <code>key</code> does not exist, it returns <code>-1</code>.</p> <code>key</code> <code>value</code> <code>int</code> <code>key</code> <code>-1</code> <li><p>The <code>hash</code> function we implement is simply a modulo operation, i.e., <code>hash(key) = key % table.length</code>. This also conveniently simulates hash collisions, for example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> produce the value 1.</p></li> <p>The <code>hash</code> function we implement is simply a modulo operation, i.e., <code>hash(key) = key % table.length</code>. This also conveniently simulates hash collisions, for example, when <code>table.length = 10</code>, both <code>hash(1)</code> and <code>hash(11)</code> produce the value 1.</p> <code>hash</code> <code>hash(key) = key % table.length</code> <code>table.length = 10</code> <code>hash(1)</code> <code>hash(11)</code> <li><p>The size of the underlying <code>table</code> array is fixed upon the creation of the hash table, without considering load factors or dynamic resizing.</p></li> <p>The size of the underlying <code>table</code> array is fixed upon the creation of the hash table, without considering load factors or dynamic resizing.</p> <code>table</code> <p>These simplifications help us focus on the core logic of adding, deleting, finding, and updating, and can be supported by the <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> to enhance understanding.</p> <a class=\"route-link\" href=\"/algo/en/intro/visualize/\">visualization panel</a> <h3 class=\"hidden-for-toc\" id=\"simplified-code\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a></h3> <a class=\"header-anchor\" href=\"#simplified-code\"><span>Simplified Code</span></a> <span>Simplified Code</span> <h3 class=\"hidden-for-toc\" id=\"visual-panel-demonstration-of-the-process\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#visual-panel-demonstration-of-the-process\"><span>Visual Panel Demonstration of the Process</span></a></h3> <a class=\"header-anchor\" href=\"#visual-panel-demonstration-of-the-process\"><span>Visual Panel Demonstration of the Process</span></a> <span>Visual Panel Demonstration of the Process</span> <h2 class=\"hidden-for-toc\" id=\"complete-code-implementation\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#complete-code-implementation\"><span>Complete Code Implementation</span></a></h2> <a class=\"header-anchor\" href=\"#complete-code-implementation\"><span>Complete Code Implementation</span></a> <span>Complete Code Implementation</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/hashmap-basic/\" aria-label=\"Basic Concept of HashMap\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Basic Concept of HashMap</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\" aria-label=\"Key Points to Implement Linear Probing\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Key Points to Implement Linear Probing<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure-basic/hashmap-basic/\" aria-label=\"Basic Concept of HashMap\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Basic Concept of HashMap</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Basic Concept of HashMap</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure-basic/linear-probing-key-point/\" aria-label=\"Key Points to Implement Linear Probing\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Key Points to Implement Linear Probing<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Key Points to Implement Linear Probing<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}