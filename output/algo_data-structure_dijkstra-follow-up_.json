{
    "url": "https://labuladong.online/algo/data-structure/dijkstra-follow-up/",
    "title": "Dijkstra 拓展：带限制的最短路问题 | labuladong 的算法笔记",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Dijkstra 拓展：带限制的最短路问题</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 1681 字</span><meta property=\"wordCount\" content=\"1681\"></span></div><hr></div> <h1><!---->Dijkstra 拓展：带限制的最短路问题</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">原创</span><span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 1681 字</span><meta property=\"wordCount\" content=\"1681\"></span></div> <span class=\"page-author-info\" aria-label=\"作者🖊\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">原创</span> <span class=\"page-word-info\" aria-label=\"字数🔠\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>约 1681 字</span><meta property=\"wordCount\" content=\"1681\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>约 1681 字</span> <meta property=\"wordCount\" content=\"1681\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a></li></ul></div><p>上一篇文章 <a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法原理及实现</a> 中，我们从标准的 BFS 算法推导出了 Dijkstra 算法，解决了标准的加权图最短路径问题。</p><p>本文将探讨更复杂的场景：<strong>带限制的最短路径问题</strong>。</p><p>这类问题比标准的最短路径问题复杂，不过不用担心，只需稍微修改之前给出的 Dijkstra 模板就可以解决这类问题。所以请确保你已经完全掌握了上一章的内容。</p><h2 id=\"带限制的最短路径问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98\"><span>带限制的最短路径问题</span></a></h2><p>上一章给出的 Dijkstra 算法使用的是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">BFS 算法的三种写法</a> 的第三种，每个节点自己维护了一个 <code>State</code> 对象，所以我们可以很容易地扩展标准的 Dijkstra 算法，完成更复杂的任务。</p><p>举个简单的例子，<strong>现在不仅让你求最短路径，还要求最短路径最多不能超过 <code>k</code> 条边</strong>。</p><p>这个场景下依然可以使用 Dijkstra 算法，但是需要修改 <code>pq</code> 的入队和出队条件，且需要给 <code>State</code> 类增加额外的字段。</p><p>下面直接给出代码实现，给 <code>dijkstra</code> 函数增加一个 <code>k</code> 参数，其他不同的地方用高亮标记了：</p><h3 class=\"hidden-for-toc\" id=\"关键修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%B3%E9%94%AE%E4%BF%AE%E6%94%B9\"><span>关键修改</span></a></h3><h3 class=\"hidden-for-toc\" id=\"点对点最短路径的优化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%82%B9%E5%AF%B9%E7%82%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BC%98%E5%8C%96\"><span>点对点最短路径的优化</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a></li></ul></div><p>上一篇文章 <a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法原理及实现</a> 中，我们从标准的 BFS 算法推导出了 Dijkstra 算法，解决了标准的加权图最短路径问题。</p><p>本文将探讨更复杂的场景：<strong>带限制的最短路径问题</strong>。</p><p>这类问题比标准的最短路径问题复杂，不过不用担心，只需稍微修改之前给出的 Dijkstra 模板就可以解决这类问题。所以请确保你已经完全掌握了上一章的内容。</p><h2 id=\"带限制的最短路径问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98\"><span>带限制的最短路径问题</span></a></h2><p>上一章给出的 Dijkstra 算法使用的是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">BFS 算法的三种写法</a> 的第三种，每个节点自己维护了一个 <code>State</code> 对象，所以我们可以很容易地扩展标准的 Dijkstra 算法，完成更复杂的任务。</p><p>举个简单的例子，<strong>现在不仅让你求最短路径，还要求最短路径最多不能超过 <code>k</code> 条边</strong>。</p><p>这个场景下依然可以使用 Dijkstra 算法，但是需要修改 <code>pq</code> 的入队和出队条件，且需要给 <code>State</code> 类增加额外的字段。</p><p>下面直接给出代码实现，给 <code>dijkstra</code> 函数增加一个 <code>k</code> 参数，其他不同的地方用高亮标记了：</p><h3 class=\"hidden-for-toc\" id=\"关键修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%B3%E9%94%AE%E4%BF%AE%E6%94%B9\"><span>关键修改</span></a></h3><h3 class=\"hidden-for-toc\" id=\"点对点最短路径的优化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%82%B9%E5%AF%B9%E7%82%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BC%98%E5%8C%96\"><span>点对点最短路径的优化</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div class=\"hint-container info\"><p class=\"hint-container-title\">前置知识</p><p>阅读本文前，你需要先学习：</p><ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a></li></ul></div> <p class=\"hint-container-title\">前置知识</p> <p>阅读本文前，你需要先学习：</p> <ul><li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a></li><li><a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a></li></ul> <li><a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a></li> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-basic/\">图结构基础及通用实现</a> <li><a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a></li> <a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法核心原理及实现</a> <p>上一篇文章 <a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法原理及实现</a> 中，我们从标准的 BFS 算法推导出了 Dijkstra 算法，解决了标准的加权图最短路径问题。</p> <a class=\"route-link\" href=\"/algo/data-structure/dijkstra/\">Dijkstra 算法原理及实现</a> <p>本文将探讨更复杂的场景：<strong>带限制的最短路径问题</strong>。</p> <strong>带限制的最短路径问题</strong> <p>这类问题比标准的最短路径问题复杂，不过不用担心，只需稍微修改之前给出的 Dijkstra 模板就可以解决这类问题。所以请确保你已经完全掌握了上一章的内容。</p> <h2 id=\"带限制的最短路径问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98\"><span>带限制的最短路径问题</span></a></h2> <a class=\"header-anchor\" href=\"#%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98\"><span>带限制的最短路径问题</span></a> <span>带限制的最短路径问题</span> <p>上一章给出的 Dijkstra 算法使用的是 <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">BFS 算法的三种写法</a> 的第三种，每个节点自己维护了一个 <code>State</code> 对象，所以我们可以很容易地扩展标准的 Dijkstra 算法，完成更复杂的任务。</p> <a class=\"route-link\" href=\"/algo/data-structure-basic/graph-traverse-basic/\">BFS 算法的三种写法</a> <code>State</code> <p>举个简单的例子，<strong>现在不仅让你求最短路径，还要求最短路径最多不能超过 <code>k</code> 条边</strong>。</p> <strong>现在不仅让你求最短路径，还要求最短路径最多不能超过 <code>k</code> 条边</strong> <code>k</code> <p>这个场景下依然可以使用 Dijkstra 算法，但是需要修改 <code>pq</code> 的入队和出队条件，且需要给 <code>State</code> 类增加额外的字段。</p> <code>pq</code> <code>State</code> <p>下面直接给出代码实现，给 <code>dijkstra</code> 函数增加一个 <code>k</code> 参数，其他不同的地方用高亮标记了：</p> <code>dijkstra</code> <code>k</code> <h3 class=\"hidden-for-toc\" id=\"关键修改\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%85%B3%E9%94%AE%E4%BF%AE%E6%94%B9\"><span>关键修改</span></a></h3> <a class=\"header-anchor\" href=\"#%E5%85%B3%E9%94%AE%E4%BF%AE%E6%94%B9\"><span>关键修改</span></a> <span>关键修改</span> <h3 class=\"hidden-for-toc\" id=\"点对点最短路径的优化\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E7%82%B9%E5%AF%B9%E7%82%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BC%98%E5%8C%96\"><span>点对点最短路径的优化</span></a></h3> <a class=\"header-anchor\" href=\"#%E7%82%B9%E5%AF%B9%E7%82%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BC%98%E5%8C%96\"><span>点对点最短路径的优化</span></a> <span>点对点最短路径的优化</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">最近更新：</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time></div> <span class=\"vp-meta-label\">最近更新：</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>2025/7/21 11:29</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/data-structure/dijkstra/\" aria-label=\"Dijkstra 算法核心原理及实现\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->Dijkstra 算法核心原理及实现</div></a><a class=\"route-link auto-link next\" href=\"/algo/problem-set/dijkstra/\" aria-label=\"【练习】Dijkstra 算法经典习题\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">【练习】Dijkstra 算法经典习题<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/data-structure/dijkstra/\" aria-label=\"Dijkstra 算法核心原理及实现\"><div class=\"hint\"><span class=\"arrow start\"></span>上一页</div><div class=\"link\"><!---->Dijkstra 算法核心原理及实现</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>上一页</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Dijkstra 算法核心原理及实现</div> <a class=\"route-link auto-link next\" href=\"/algo/problem-set/dijkstra/\" aria-label=\"【练习】Dijkstra 算法经典习题\"><div class=\"hint\">下一页<span class=\"arrow end\"></span></div><div class=\"link\">【练习】Dijkstra 算法经典习题<!----></div></a> <div class=\"hint\">下一页<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">【练习】Dijkstra 算法经典习题<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}