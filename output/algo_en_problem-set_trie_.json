{
    "url": "https://labuladong.online/algo/en/problem-set/trie/",
    "title": "Exercise: Trie Problems on LeetCode | Labuladong Algo Notes",
    "content": "<nav class=\"vp-breadcrumb disable\"></nav> <div class=\"vp-page-title\"><h1><!---->Exercise: Trie Problems on LeetCode</h1><div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1288 words</span><meta property=\"wordCount\" content=\"1288\"></span></div><hr></div> <h1><!---->Exercise: Trie Problems on LeetCode</h1> <div class=\"page-info\"><span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span><span class=\"page-original-info\">Original</span><span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1288 words</span><meta property=\"wordCount\" content=\"1288\"></span></div> <span class=\"page-author-info\" aria-label=\"AuthorðŸ–Š\" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg><span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span><span property=\"author\" content=\"labuladong\"></span></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon author-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"author icon\" name=\"author\"><path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path></svg> <path d=\"M649.6 633.6c86.4-48 147.2-144 147.2-249.6 0-160-128-288-288-288s-288 128-288 288c0 108.8 57.6 201.6 147.2 249.6-121.6 48-214.4 153.6-240 288-3.2 9.6 0 19.2 6.4 25.6 3.2 9.6 12.8 12.8 22.4 12.8h704c9.6 0 19.2-3.2 25.6-12.8 6.4-6.4 9.6-16 6.4-25.6-25.6-134.4-121.6-240-243.2-288z\"></path> <span><a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a></span> <a class=\"page-author-item\" href=\"https://github.com/labuladong\" target=\"_blank\" rel=\"noopener noreferrer\">labuladong</a> <span property=\"author\" content=\"labuladong\"></span> <span class=\"page-original-info\">Original</span> <span class=\"page-word-info\" aria-label=\"WordsðŸ” \" data-balloon-pos=\"up\"><svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg><span>About 1288 words</span><meta property=\"wordCount\" content=\"1288\"></span> <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon word-icon\" viewbox=\"0 0 1024 1024\" fill=\"currentColor\" aria-label=\"word icon\" name=\"word\"><path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path><path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path></svg> <path d=\"M518.217 432.64V73.143A73.143 73.143 0 01603.43 1.097a512 512 0 01419.474 419.474 73.143 73.143 0 01-72.046 85.212H591.36a73.143 73.143 0 01-73.143-73.143z\"></path> <path d=\"M493.714 566.857h340.297a73.143 73.143 0 0173.143 85.577A457.143 457.143 0 11371.566 117.76a73.143 73.143 0 0185.577 73.143v339.383a36.571 36.571 0 0036.571 36.571z\"></path> <span>About 1288 words</span> <meta property=\"wordCount\" content=\"1288\"> <hr> <div class=\"\" vp-content><!----><div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. Implement Trie II (Prefix Tree) https://leetcode.com/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. Implement Trie (Prefix Tree) https://leetcode.com/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. Design Add and Search Words Data Structure https://leetcode.com/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. Replace Words https://leetcode.com/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. Map Sum Pairs https://leetcode.com/problems/map-sum-pairs </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a></li></ul></div><p>With <code>TrieMap</code> and <code>TrieSet</code>, all prefix tree-related problems on LeetCode can be directly applied. Below, I will illustrate with a few examples.</p><div class=\"hint-container info\"><p class=\"hint-container-title\">Possible Optimizations</p><p><strong>First, the <code>TrieMap/TrieSet</code> implementation provided in the previous article <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> certainly has room for optimization in specific problems.</strong></p><p>For example, in LeetCode problems related to prefix trees, the input is restricted to lowercase English letters <code>a-z</code>. Therefore, <code>TrieNode</code> does not need to maintain a <code>children</code> array of size 256; setting the size to 26 is sufficient, which can reduce time and space complexity.</p><p>Additionally, the previously provided Java/C++ code includes generics, which are not needed when solving algorithm problems. Removing generics can also provide some efficiency improvements.</p></div><h3 id=\"_208-implement-trie-prefix-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-implement-trie-prefix-tree\"><span>208. Implement Trie (Prefix Tree)</span></a></h3><p>Let's look at LeetCode Problem 208 \"<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">Implement Trie (Prefix Tree)</a>\":</p><details class=\"hint-container details\" open><summary><strong>208. Implement Trie (Prefix Tree)</strong>Â | <!----><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> Â ðŸŸ </summary><div><p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre>\n\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n</div><strong style=\"font-size:small;\">The problem is from <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\">LeetCode 208. Implement Trie (Prefix Tree)</a>.</strong></details><p>The functions that the problem asks us to implement are actually part of the <code>TrieSet</code> API, so directly encapsulating a <code>TrieSet</code> can solve this problem.</p><h3 class=\"hidden-for-toc\" id=\"_648-replace-words\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-replace-words\"><span>648. Replace Words</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_211-add-and-search-word-data-structure-design\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-add-and-search-word-data-structure-design\"><span>211. Add and Search Word - Data Structure Design</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_1804-implement-a-trie-prefix-tree-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-implement-a-trie-prefix-tree-ii\"><span>1804. Implement a Trie (Prefix Tree II)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_677-map-sum-pairs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-map-sum-pairs\"><span>677. Map Sum Pairs</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div><!----><!----><!----></div> <div id=\"markdown-content\"><div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. Implement Trie II (Prefix Tree) https://leetcode.com/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. Implement Trie (Prefix Tree) https://leetcode.com/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. Design Add and Search Words Data Structure https://leetcode.com/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. Replace Words https://leetcode.com/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. Map Sum Pairs https://leetcode.com/problems/map-sum-pairs </h3></div><div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr></tbody></table></div><div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a></li></ul></div><p>With <code>TrieMap</code> and <code>TrieSet</code>, all prefix tree-related problems on LeetCode can be directly applied. Below, I will illustrate with a few examples.</p><div class=\"hint-container info\"><p class=\"hint-container-title\">Possible Optimizations</p><p><strong>First, the <code>TrieMap/TrieSet</code> implementation provided in the previous article <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> certainly has room for optimization in specific problems.</strong></p><p>For example, in LeetCode problems related to prefix trees, the input is restricted to lowercase English letters <code>a-z</code>. Therefore, <code>TrieNode</code> does not need to maintain a <code>children</code> array of size 256; setting the size to 26 is sufficient, which can reduce time and space complexity.</p><p>Additionally, the previously provided Java/C++ code includes generics, which are not needed when solving algorithm problems. Removing generics can also provide some efficiency improvements.</p></div><h3 id=\"_208-implement-trie-prefix-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-implement-trie-prefix-tree\"><span>208. Implement Trie (Prefix Tree)</span></a></h3><p>Let's look at LeetCode Problem 208 \"<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">Implement Trie (Prefix Tree)</a>\":</p><details class=\"hint-container details\" open><summary><strong>208. Implement Trie (Prefix Tree)</strong>Â | <!----><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> Â ðŸŸ </summary><div><p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre>\n\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n</div><strong style=\"font-size:small;\">The problem is from <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\">LeetCode 208. Implement Trie (Prefix Tree)</a>.</strong></details><p>The functions that the problem asks us to implement are actually part of the <code>TrieSet</code> API, so directly encapsulating a <code>TrieSet</code> can solve this problem.</p><h3 class=\"hidden-for-toc\" id=\"_648-replace-words\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-replace-words\"><span>648. Replace Words</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_211-add-and-search-word-data-structure-design\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-add-and-search-word-data-structure-design\"><span>211. Add and Search Word - Data Structure Design</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_1804-implement-a-trie-prefix-tree-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-implement-a-trie-prefix-tree-ii\"><span>1804. Implement a Trie (Prefix Tree II)</span></a></h3><h3 class=\"hidden-for-toc\" id=\"_677-map-sum-pairs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-map-sum-pairs\"><span>677. Map Sum Pairs</span></a></h3><div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div></div> <div style=\"display:none;\"><h3 tabindex=\"-1\"> 1804. Implement Trie II (Prefix Tree) https://leetcode.com/problems/implement-trie-ii-prefix-tree </h3><h3 tabindex=\"-1\"> 208. Implement Trie (Prefix Tree) https://leetcode.com/problems/implement-trie-prefix-tree </h3><h3 tabindex=\"-1\"> 211. Design Add and Search Words Data Structure https://leetcode.com/problems/design-add-and-search-words-data-structure </h3><h3 tabindex=\"-1\"> 648. Replace Words https://leetcode.com/problems/replace-words </h3><h3 tabindex=\"-1\"> 677. Map Sum Pairs https://leetcode.com/problems/map-sum-pairs </h3></div> <h3 tabindex=\"-1\"> 1804. Implement Trie II (Prefix Tree) https://leetcode.com/problems/implement-trie-ii-prefix-tree </h3> <h3 tabindex=\"-1\"> 208. Implement Trie (Prefix Tree) https://leetcode.com/problems/implement-trie-prefix-tree </h3> <h3 tabindex=\"-1\"> 211. Design Add and Search Words Data Structure https://leetcode.com/problems/design-add-and-search-words-data-structure </h3> <h3 tabindex=\"-1\"> 648. Replace Words https://leetcode.com/problems/replace-words </h3> <h3 tabindex=\"-1\"> 677. Map Sum Pairs https://leetcode.com/problems/map-sum-pairs </h3> <div class=\"hint-container note\"><p class=\"hint-container-title\">This article will resolve</p><table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr></tbody></table></div> <p class=\"hint-container-title\">This article will resolve</p> <table><thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead><tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr></tbody></table> <thead><tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr></thead> <tr><th style=\"text-align:center;\">LeetCode</th><th style=\"text-align:center;\">Difficulty</th></tr> <th style=\"text-align:center;\">LeetCode</th> <th style=\"text-align:center;\">Difficulty</th> <tbody><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr><tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr></tbody> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a>ðŸ”’</td> <a href=\"https://leetcode.com/problems/implement-trie-ii-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">1804. Implement Trie II (Prefix Tree)</a> <td style=\"text-align:center;\">ðŸŸ </td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a></td> <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. Implement Trie (Prefix Tree)</a> <td style=\"text-align:center;\">ðŸŸ </td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a></td> <a href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\" target=\"_blank\" rel=\"noopener noreferrer\">211. Design Add and Search Words Data Structure</a> <td style=\"text-align:center;\">ðŸŸ </td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a></td> <a href=\"https://leetcode.com/problems/replace-words/\" target=\"_blank\" rel=\"noopener noreferrer\">648. Replace Words</a> <td style=\"text-align:center;\">ðŸŸ </td> <tr><td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td><td style=\"text-align:center;\">ðŸŸ </td></tr> <td style=\"text-align:center;\"><a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a></td> <a href=\"https://leetcode.com/problems/map-sum-pairs/\" target=\"_blank\" rel=\"noopener noreferrer\">677. Map Sum Pairs</a> <td style=\"text-align:center;\">ðŸŸ </td> <div class=\"hint-container info\"><p class=\"hint-container-title\">Prerequisites</p><p>Before reading this article, you need to learn:</p><ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a></li></ul></div> <p class=\"hint-container-title\">Prerequisites</p> <p>Before reading this article, you need to learn:</p> <ul><li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a></li><li><a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a></li></ul> <li><a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure-basic/trie-map-basic/\">Principles of Trie Trees</a> <li><a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a></li> <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> <p>With <code>TrieMap</code> and <code>TrieSet</code>, all prefix tree-related problems on LeetCode can be directly applied. Below, I will illustrate with a few examples.</p> <code>TrieMap</code> <code>TrieSet</code> <div class=\"hint-container info\"><p class=\"hint-container-title\">Possible Optimizations</p><p><strong>First, the <code>TrieMap/TrieSet</code> implementation provided in the previous article <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> certainly has room for optimization in specific problems.</strong></p><p>For example, in LeetCode problems related to prefix trees, the input is restricted to lowercase English letters <code>a-z</code>. Therefore, <code>TrieNode</code> does not need to maintain a <code>children</code> array of size 256; setting the size to 26 is sufficient, which can reduce time and space complexity.</p><p>Additionally, the previously provided Java/C++ code includes generics, which are not needed when solving algorithm problems. Removing generics can also provide some efficiency improvements.</p></div> <p class=\"hint-container-title\">Possible Optimizations</p> <p><strong>First, the <code>TrieMap/TrieSet</code> implementation provided in the previous article <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> certainly has room for optimization in specific problems.</strong></p> <strong>First, the <code>TrieMap/TrieSet</code> implementation provided in the previous article <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> certainly has room for optimization in specific problems.</strong> <code>TrieMap/TrieSet</code> <a class=\"route-link\" href=\"/algo/en/data-structure/trie-implement/\">Implementation of TrieMap/TrieSet</a> <p>For example, in LeetCode problems related to prefix trees, the input is restricted to lowercase English letters <code>a-z</code>. Therefore, <code>TrieNode</code> does not need to maintain a <code>children</code> array of size 256; setting the size to 26 is sufficient, which can reduce time and space complexity.</p> <code>a-z</code> <code>TrieNode</code> <code>children</code> <p>Additionally, the previously provided Java/C++ code includes generics, which are not needed when solving algorithm problems. Removing generics can also provide some efficiency improvements.</p> <h3 id=\"_208-implement-trie-prefix-tree\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_208-implement-trie-prefix-tree\"><span>208. Implement Trie (Prefix Tree)</span></a></h3> <a class=\"header-anchor\" href=\"#_208-implement-trie-prefix-tree\"><span>208. Implement Trie (Prefix Tree)</span></a> <span>208. Implement Trie (Prefix Tree)</span> <p>Let's look at LeetCode Problem 208 \"<a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">Implement Trie (Prefix Tree)</a>\":</p> <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">Implement Trie (Prefix Tree)</a> <details class=\"hint-container details\" open><summary><strong>208. Implement Trie (Prefix Tree)</strong>Â | <!----><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> Â ðŸŸ </summary><div><p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre>\n\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n</div><strong style=\"font-size:small;\">The problem is from <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\">LeetCode 208. Implement Trie (Prefix Tree)</a>.</strong></details> <summary><strong>208. Implement Trie (Prefix Tree)</strong>Â | <!----><span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> Â ðŸŸ </summary> <strong>208. Implement Trie (Prefix Tree)</strong> <span><a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> |</span> <a target=\"_blank\" href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" rel=\"noopener noreferrer\">LeetCode<!----></a> <div><p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre>\n\n\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n</div> <p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as \"try\") or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p> <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> <strong>trie</strong> <strong>prefix tree</strong> <p>Implement the Trie class:</p> <ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul> <li><code>Trie()</code> Initializes the trie object.</li> <code>Trie()</code> <li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li> <code>void insert(String word)</code> <code>word</code> <li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li> <code>boolean search(String word)</code> <code>true</code> <code>word</code> <code>false</code> <li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li> <code>boolean startsWith(String prefix)</code> <code>true</code> <code>word</code> <code>prefix</code> <code>false</code> <p><strong class=\"example\">Example 1:</strong></p> <strong class=\"example\">Example 1:</strong> <pre>\n<strong>Input</strong>\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // return True\ntrie.search(\"app\");     // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\");     // return True\n</pre> <strong>Input</strong> <strong>Output</strong> <strong>Explanation</strong> <p><strong>Constraints:</strong></p> <strong>Constraints:</strong> <ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul> <li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li> <code>1 &lt;= word.length, prefix.length &lt;= 2000</code> <li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li> <code>word</code> <code>prefix</code> <li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li> <code>3 * 10<sup>4</sup></code> <sup>4</sup> <strong>in total</strong> <code>insert</code> <code>search</code> <code>startsWith</code> <strong style=\"font-size:small;\">The problem is from <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\">LeetCode 208. Implement Trie (Prefix Tree)</a>.</strong> <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\" target=\"_blank\">LeetCode 208. Implement Trie (Prefix Tree)</a> <p>The functions that the problem asks us to implement are actually part of the <code>TrieSet</code> API, so directly encapsulating a <code>TrieSet</code> can solve this problem.</p> <code>TrieSet</code> <code>TrieSet</code> <h3 class=\"hidden-for-toc\" id=\"_648-replace-words\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_648-replace-words\"><span>648. Replace Words</span></a></h3> <a class=\"header-anchor\" href=\"#_648-replace-words\"><span>648. Replace Words</span></a> <span>648. Replace Words</span> <h3 class=\"hidden-for-toc\" id=\"_211-add-and-search-word-data-structure-design\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_211-add-and-search-word-data-structure-design\"><span>211. Add and Search Word - Data Structure Design</span></a></h3> <a class=\"header-anchor\" href=\"#_211-add-and-search-word-data-structure-design\"><span>211. Add and Search Word - Data Structure Design</span></a> <span>211. Add and Search Word - Data Structure Design</span> <h3 class=\"hidden-for-toc\" id=\"_1804-implement-a-trie-prefix-tree-ii\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_1804-implement-a-trie-prefix-tree-ii\"><span>1804. Implement a Trie (Prefix Tree II)</span></a></h3> <a class=\"header-anchor\" href=\"#_1804-implement-a-trie-prefix-tree-ii\"><span>1804. Implement a Trie (Prefix Tree II)</span></a> <span>1804. Implement a Trie (Prefix Tree II)</span> <h3 class=\"hidden-for-toc\" id=\"_677-map-sum-pairs\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#_677-map-sum-pairs\"><span>677. Map Sum Pairs</span></a></h3> <a class=\"header-anchor\" href=\"#_677-map-sum-pairs\"><span>677. Map Sum Pairs</span></a> <span>677. Map Sum Pairs</span> <div id=\"hidden_part\" class=\"paywall\"><div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div></div> <div><div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div><p>loading...</p></div> <div class=\"css-1p3hq3p ant-spin ant-spin-spinning\" aria-live=\"polite\" aria-busy=\"true\"><span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span><!----></div> <span class=\"ant-spin-dot ant-spin-dot-spin\"><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i><i class=\"ant-spin-dot-item\"></i></span> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <i class=\"ant-spin-dot-item\"></i> <p>loading...</p> <footer class=\"vp-page-meta\"><!----><div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div></footer> <div class=\"vp-meta-item git-info\"><div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div><!----></div> <div class=\"update-time\"><span class=\"vp-meta-label\">Last Updated:</span><time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time></div> <span class=\"vp-meta-label\">Last Updated:</span> <time class=\"vp-meta-info\" datetime=\"2025-07-21T03:29:25.280Z\" data-allow-mismatch>7/21/25, 11:29 AM</time> <nav class=\"vp-page-nav\"><a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure/trie-implement/\" aria-label=\"Implementing Trie Tree\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Implementing Trie Tree</div></a><a class=\"route-link auto-link next\" href=\"/algo/en/data-structure/design-twitter/\" aria-label=\"Designing a Twitter Feed\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Designing a Twitter Feed<!----></div></a></nav> <a class=\"route-link auto-link prev\" href=\"/algo/en/data-structure/trie-implement/\" aria-label=\"Implementing Trie Tree\"><div class=\"hint\"><span class=\"arrow start\"></span>Prev</div><div class=\"link\"><!---->Implementing Trie Tree</div></a> <div class=\"hint\"><span class=\"arrow start\"></span>Prev</div> <span class=\"arrow start\"></span> <div class=\"link\"><!---->Implementing Trie Tree</div> <a class=\"route-link auto-link next\" href=\"/algo/en/data-structure/design-twitter/\" aria-label=\"Designing a Twitter Feed\"><div class=\"hint\">Next<span class=\"arrow end\"></span></div><div class=\"link\">Designing a Twitter Feed<!----></div></a> <div class=\"hint\">Next<span class=\"arrow end\"></span></div> <span class=\"arrow end\"></span> <div class=\"link\">Designing a Twitter Feed<!----></div> <div style=\"justify-content:center;display:flex;\" data-v-95bd7423><div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div></div> <div class=\"artalkCommentsContainer\" data-v-95bd7423><div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div><div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div></div> <div id=\"artalkComments\" style=\"display:none;\" data-v-95bd7423></div> <div style=\"margin-bottom:10px;\" data-v-95bd7423><!----></div>"
}